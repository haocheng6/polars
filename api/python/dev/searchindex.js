Search.setIndex({"alltitles": {"ABS": [[1327, "abs"]], "ACOS": [[1330, "acos"]], "ACOSD": [[1330, "acosd"]], "ARRAY_AGG": [[1323, "array-agg"]], "ARRAY_CONTAINS": [[1323, "array-contains"]], "ARRAY_GET": [[1323, "array-get"]], "ARRAY_LENGTH": [[1323, "array-length"]], "ARRAY_LOWER": [[1323, "array-lower"]], "ARRAY_MEAN": [[1323, "array-mean"]], "ARRAY_REVERSE": [[1323, "array-reverse"]], "ARRAY_SUM": [[1323, "array-sum"]], "ARRAY_TO_STRING": [[1323, "array-to-string"]], "ARRAY_UNIQUE": [[1323, "array-unique"]], "ARRAY_UPPER": [[1323, "array-upper"]], "ASIN": [[1330, "asin"]], "ASIND": [[1330, "asind"]], "ATAN": [[1330, "atan"]], "ATAN2": [[1330, "atan2"]], "ATAN2D": [[1330, "atan2d"]], "ATAND": [[1330, "atand"]], "AVG": [[1322, "avg"]], "Aggregate": [[1322, null]], "Aggregation": [[174, null], [326, null], [816, null], [923, null]], "Aliases": [[1322, null], [1322, null], [1327, null], [1327, null], [1328, null], [1328, null]], "Array": [[794, null], [1297, null], [1323, null]], "Asserts": [[1336, "asserts"]], "Attributes": [[314, null], [911, null], [1298, null]], "Available registrations": [[1, "available-registrations"]], "Avro": [[815, "avro"]], "BIT_AND": [[1324, "bit-and"]], "BIT_COUNT": [[1324, "bit-count"]], "BIT_LENGTH": [[1328, "bit-length"]], "BIT_OR": [[1324, "bit-or"]], "BIT_XOR": [[1324, "bit-xor"]], "Binary": [[795, null], [808, "binary"], [1299, null]], "Boolean": [[796, null], [1300, null]], "CAST": [[1331, "cast"]], "CBRT": [[1327, "cbrt"]], "CEIL": [[1327, "ceil"]], "COALESCE": [[1325, "coalesce"]], "CONCAT": [[1328, "concat"]], "CONCAT_WS": [[1328, "concat-ws"]], "COS": [[1330, "cos"]], "COSD": [[1330, "cosd"]], "COT": [[1330, "cot"]], "COTD": [[1330, "cotd"]], "COUNT": [[1322, "count"]], "CREATE TABLE": [[1335, "create-table"]], "CSV": [[815, "csv"]], "Categories": [[797, null], [1301, null]], "Clipboard": [[815, "clipboard"]], "Cloud Credentials": [[815, "cloud-credentials"]], "Columns / names": [[799, null]], "Comparison": [[808, "comparison"], [1309, "comparison"]], "Computation": [[315, null], [800, null], [1302, null]], "Conditional": [[1325, null]], "Config": [[173, null]], "Config load, save, state": [[173, "config-load-save-state"]], "Config options": [[173, "config-options"]], "Conjunction": [[808, "conjunction"]], "Conversion": [[813, "conversion"]], "DATE": [[1328, "date"]], "DATE_PART": [[1329, "date-part"]], "DEGREES": [[1330, "degrees"]], "DISTINCT": [[1321, "distinct"]], "DIV": [[1327, "div"]], "DROP TABLES": [[1335, "drop-tables"]], "Data types": [[324, null]], "DataFrame": [[319, null]], "DataType": [[324, "datatype"]], "Database": [[815, "database"]], "Delta Lake": [[815, "delta-lake"]], "Descriptive": [[316, null], [912, null], [1303, null]], "Documentation": [[1333, null], [1333, null], [1333, null]], "ENDS_WITH": [[1328, "ends-with"]], "EXCEPT": [[1334, "except"]], "EXP": [[1327, "exp"]], "EXPLAIN": [[1335, "explain"]], "EXTRACT": [[1329, "extract"]], "Errors": [[325, "errors"]], "Examples": [[1, "examples"], [922, "examples"], [1336, "examples"]], "Excel / ODS": [[815, "excel-ods"]], "Exceptions": [[325, null]], "Export": [[317, null], [1304, null]], "Expression SQL": [[1333, "expression-sql"]], "Expressions": [[802, null]], "Extending the API": [[1, null]], "FIRST": [[1322, "first"]], "FLOOR": [[1327, "floor"]], "FROM": [[1321, "from"]], "Feather / IPC": [[815, "feather-ipc"]], "Frame SQL": [[1333, "frame-sql"]], "Functions": [[801, null], [813, null], [922, "functions"]], "GPUEngine": [[913, null]], "GREATEST": [[1325, "greatest"]], "GROUP BY": [[1321, "group-by"]], "Global SQL": [[1333, "global-sql"]], "GroupBy": [[318, null], [914, null]], "HAVING": [[1321, "having"]], "IF": [[1325, "if"]], "IFNULL": [[1325, "ifnull"]], "INITCAP": [[1328, "initcap"]], "INTERSECT": [[1334, "intersect"]], "Iceberg": [[815, "iceberg"]], "Importing": [[922, "importing"]], "InProcessQuery": [[915, null]], "Index": [[0, null]], "Input/output": [[815, null]], "Introduction": [[1333, "introduction"]], "JOIN": [[1321, "join"]], "JSON": [[815, "json"]], "LAST": [[1322, "last"]], "LEAST": [[1325, "least"]], "LEFT": [[1328, "left"]], "LENGTH": [[1328, "length"]], "LIMIT": [[1321, "limit"]], "LN": [[1327, "ln"]], "LOG": [[1327, "log"]], "LOG10": [[1327, "log10"]], "LOG1P": [[1327, "log1p"]], "LOG2": [[1327, "log2"]], "LOWER": [[1328, "lower"]], "LTRIM": [[1328, "ltrim"]], "LazyFrame": [[916, null]], "List": [[803, null], [1306, null]], "MAX": [[1322, "max"]], "MEDIAN": [[1322, "median"]], "MIN": [[1322, "min"]], "MOD": [[1327, "mod"]], "Manipulation/selection": [[321, null], [806, null], [918, null], [1308, null]], "Math": [[1327, null]], "Meta": [[804, null]], "Metadata": [[919, null]], "Methods": [[1333, "methods"]], "Miscellaneous": [[320, null], [805, null], [813, "miscellaneous"], [917, null], [1307, null]], "Multiple Config instances": [[173, "multiple-config-instances"]], "NULLIF": [[1325, "nullif"]], "Name": [[807, null]], "Nested": [[324, "nested"]], "Numeric": [[324, "numeric"], [808, "numeric"], [1309, "numeric"]], "OCTET_LENGTH": [[1328, "octet-length"]], "OFFSET": [[1321, "offset"]], "ORDER BY": [[1321, "order-by"]], "Operators": [[808, null], [1309, null]], "Other": [[324, "other"]], "PI": [[1327, "pi"]], "POW": [[1327, "pow"]], "Panic": [[325, "panic"]], "Parallelization": [[813, "parallelization"]], "Parametric testing": [[1336, "parametric-testing"]], "Parquet": [[815, "parquet"]], "Plot": [[322, null], [1310, null]], "Plugins": [[920, null]], "Polars strategies": [[1336, "polars-strategies"]], "Profiles": [[1336, "profiles"]], "Providing new functionality": [[1, "providing-new-functionality"]], "PyArrow Datasets": [[815, "pyarrow-datasets"]], "Python API": [[1333, null]], "Python API reference": [[814, null]], "QUANTILE_CONT": [[1322, "quantile-cont"]], "QUANTILE_DISC": [[1322, "quantile-disc"]], "Querying": [[1333, "querying"]], "RADIANS": [[1330, "radians"]], "REGEXP_LIKE": [[1328, "regexp-like"]], "REPLACE": [[1328, "replace"]], "REVERSE": [[1328, "reverse"]], "RIGHT": [[1328, "right"]], "ROUND": [[1327, "round"]], "RTRIM": [[1328, "rtrim"]], "Random": [[813, "random"]], "SELECT": [[1321, "select"]], "SHOW TABLES": [[1335, "show-tables"]], "SIGN": [[1327, "sign"]], "SIN": [[1330, "sin"]], "SIND": [[1330, "sind"]], "SQL Clauses": [[1321, null]], "SQL Functions": [[1326, null]], "SQL Interface": [[1332, null]], "SQLContext": [[1333, "sqlcontext"]], "SQRT": [[1327, "sqrt"]], "STARTS_WITH": [[1328, "starts-with"]], "STDDEV": [[1322, "stddev"]], "STRFTIME": [[1329, "strftime"]], "STRPOS": [[1328, "strpos"]], "STRPTIME": [[1328, "strptime"]], "SUBSTRING": [[1328, "substring"]], "SUM": [[1322, "sum"]], "Schema": [[921, null]], "Selectors": [[922, null]], "Serialization": [[320, "serialization"], [917, "serialization"]], "Series": [[1305, null]], "Set Operations": [[1334, null]], "Set operations": [[922, "set-operations"]], "Strategy helpers": [[1336, "strategy-helpers"]], "String": [[324, "string"], [809, null], [1311, null], [1328, null]], "StringCache": [[813, "stringcache"]], "Struct": [[810, null], [1312, null]], "Style": [[323, null]], "TAN": [[1330, "tan"]], "TAND": [[1330, "tand"]], "TIMESTAMP": [[1328, "timestamp"]], "TRUNCATE": [[1335, "truncate"]], "TRY_CAST": [[1331, "try-cast"]], "Table Operations": [[1335, null]], "Temporal": [[324, "temporal"], [811, null], [1313, null], [1324, null], [1329, null]], "Testing": [[1336, null]], "Trigonometry": [[1330, null]], "Types": [[1331, null]], "UNION": [[1334, "union"]], "UNION ALL": [[1334, "union-all"]], "UNION BY NAME": [[1334, "union-by-name"]], "UNNEST": [[1323, "unnest"], [1335, "unnest"]], "UPPER": [[1328, "upper"]], "Use as a context manager": [[173, "use-as-a-context-manager"]], "Use as a decorator": [[173, "use-as-a-decorator"]], "VARIANCE": [[1322, "variance"]], "WHERE": [[1321, "where"]], "Warnings": [[325, "warnings"]], "Window": [[812, null]], "polars.Config.load": [[2, null]], "polars.Config.load_from_file": [[3, null]], "polars.Config.restore_defaults": [[4, null]], "polars.Config.save": [[5, null]], "polars.Config.save_to_file": [[6, null]], "polars.Config.set_ascii_tables": [[7, null]], "polars.Config.set_auto_structify": [[8, null]], "polars.Config.set_decimal_separator": [[9, null]], "polars.Config.set_float_precision": [[10, null]], "polars.Config.set_fmt_float": [[11, null]], "polars.Config.set_fmt_str_lengths": [[12, null]], "polars.Config.set_fmt_table_cell_list_len": [[13, null]], "polars.Config.set_streaming_chunk_size": [[14, null]], "polars.Config.set_tbl_cell_alignment": [[15, null]], "polars.Config.set_tbl_cell_numeric_alignment": [[16, null]], "polars.Config.set_tbl_cols": [[17, null]], "polars.Config.set_tbl_column_data_type_inline": [[18, null]], "polars.Config.set_tbl_dataframe_shape_below": [[19, null]], "polars.Config.set_tbl_formatting": [[20, null]], "polars.Config.set_tbl_hide_column_data_types": [[21, null]], "polars.Config.set_tbl_hide_column_names": [[22, null]], "polars.Config.set_tbl_hide_dataframe_shape": [[23, null]], "polars.Config.set_tbl_hide_dtype_separator": [[24, null]], "polars.Config.set_tbl_rows": [[25, null]], "polars.Config.set_tbl_width_chars": [[26, null]], "polars.Config.set_thousands_separator": [[27, null]], "polars.Config.set_trim_decimal_zeros": [[28, null]], "polars.Config.set_verbose": [[29, null]], "polars.Config.state": [[30, null]], "polars.CredentialProvider": [[31, null]], "polars.CredentialProviderAWS": [[32, null]], "polars.CredentialProviderGCP": [[33, null]], "polars.DataFrame.__array__": [[175, null]], "polars.DataFrame.__arrow_c_stream__": [[176, null]], "polars.DataFrame.__dataframe__": [[177, null]], "polars.DataFrame.__getitem__": [[178, null]], "polars.DataFrame.approx_n_unique": [[179, null]], "polars.DataFrame.bottom_k": [[180, null]], "polars.DataFrame.cast": [[181, null]], "polars.DataFrame.clear": [[182, null]], "polars.DataFrame.clone": [[183, null]], "polars.DataFrame.collect_schema": [[184, null]], "polars.DataFrame.columns": [[185, null]], "polars.DataFrame.corr": [[186, null]], "polars.DataFrame.count": [[187, null]], "polars.DataFrame.describe": [[188, null]], "polars.DataFrame.deserialize": [[189, null]], "polars.DataFrame.drop": [[190, null]], "polars.DataFrame.drop_in_place": [[191, null]], "polars.DataFrame.drop_nans": [[192, null]], "polars.DataFrame.drop_nulls": [[193, null]], "polars.DataFrame.dtypes": [[194, null]], "polars.DataFrame.equals": [[195, null]], "polars.DataFrame.estimated_size": [[196, null]], "polars.DataFrame.explode": [[197, null]], "polars.DataFrame.extend": [[198, null]], "polars.DataFrame.fill_nan": [[199, null]], "polars.DataFrame.fill_null": [[200, null]], "polars.DataFrame.filter": [[201, null]], "polars.DataFrame.flags": [[202, null]], "polars.DataFrame.fold": [[203, null]], "polars.DataFrame.gather_every": [[204, null]], "polars.DataFrame.get_column": [[205, null]], "polars.DataFrame.get_column_index": [[206, null]], "polars.DataFrame.get_columns": [[207, null]], "polars.DataFrame.glimpse": [[208, null]], "polars.DataFrame.group_by": [[209, null]], "polars.DataFrame.group_by_dynamic": [[210, null]], "polars.DataFrame.hash_rows": [[211, null]], "polars.DataFrame.head": [[212, null]], "polars.DataFrame.height": [[213, null]], "polars.DataFrame.hstack": [[214, null]], "polars.DataFrame.insert_column": [[215, null]], "polars.DataFrame.interpolate": [[216, null]], "polars.DataFrame.is_duplicated": [[217, null]], "polars.DataFrame.is_empty": [[218, null]], "polars.DataFrame.is_unique": [[219, null]], "polars.DataFrame.item": [[220, null]], "polars.DataFrame.iter_columns": [[221, null]], "polars.DataFrame.iter_rows": [[222, null]], "polars.DataFrame.iter_slices": [[223, null]], "polars.DataFrame.join": [[224, null]], "polars.DataFrame.join_asof": [[225, null]], "polars.DataFrame.join_where": [[226, null]], "polars.DataFrame.lazy": [[227, null]], "polars.DataFrame.limit": [[228, null]], "polars.DataFrame.map_rows": [[229, null]], "polars.DataFrame.max": [[230, null]], "polars.DataFrame.max_horizontal": [[231, null]], "polars.DataFrame.mean": [[232, null]], "polars.DataFrame.mean_horizontal": [[233, null]], "polars.DataFrame.median": [[234, null]], "polars.DataFrame.melt": [[235, null]], "polars.DataFrame.merge_sorted": [[236, null]], "polars.DataFrame.min": [[237, null]], "polars.DataFrame.min_horizontal": [[238, null]], "polars.DataFrame.n_chunks": [[239, null]], "polars.DataFrame.n_unique": [[240, null]], "polars.DataFrame.null_count": [[241, null]], "polars.DataFrame.partition_by": [[242, null]], "polars.DataFrame.pipe": [[243, null]], "polars.DataFrame.pivot": [[244, null]], "polars.DataFrame.product": [[245, null]], "polars.DataFrame.quantile": [[246, null]], "polars.DataFrame.rechunk": [[247, null]], "polars.DataFrame.rename": [[248, null]], "polars.DataFrame.replace_column": [[249, null]], "polars.DataFrame.reverse": [[250, null]], "polars.DataFrame.rolling": [[251, null]], "polars.DataFrame.row": [[252, null]], "polars.DataFrame.rows": [[253, null]], "polars.DataFrame.rows_by_key": [[254, null]], "polars.DataFrame.sample": [[255, null]], "polars.DataFrame.schema": [[256, null]], "polars.DataFrame.select": [[257, null]], "polars.DataFrame.select_seq": [[258, null]], "polars.DataFrame.serialize": [[259, null]], "polars.DataFrame.set_sorted": [[260, null]], "polars.DataFrame.shape": [[261, null]], "polars.DataFrame.shift": [[262, null]], "polars.DataFrame.shrink_to_fit": [[263, null]], "polars.DataFrame.slice": [[264, null]], "polars.DataFrame.sort": [[265, null]], "polars.DataFrame.sql": [[266, null]], "polars.DataFrame.std": [[267, null]], "polars.DataFrame.sum": [[268, null]], "polars.DataFrame.sum_horizontal": [[269, null]], "polars.DataFrame.tail": [[270, null]], "polars.DataFrame.to_arrow": [[271, null]], "polars.DataFrame.to_dict": [[272, null]], "polars.DataFrame.to_dicts": [[273, null]], "polars.DataFrame.to_dummies": [[274, null]], "polars.DataFrame.to_init_repr": [[275, null]], "polars.DataFrame.to_jax": [[276, null]], "polars.DataFrame.to_numpy": [[277, null]], "polars.DataFrame.to_pandas": [[278, null]], "polars.DataFrame.to_series": [[279, null]], "polars.DataFrame.to_struct": [[280, null]], "polars.DataFrame.to_torch": [[281, null]], "polars.DataFrame.top_k": [[282, null]], "polars.DataFrame.transpose": [[283, null]], "polars.DataFrame.unique": [[284, null]], "polars.DataFrame.unnest": [[285, null]], "polars.DataFrame.unpivot": [[286, null]], "polars.DataFrame.unstack": [[287, null]], "polars.DataFrame.update": [[288, null]], "polars.DataFrame.upsample": [[289, null]], "polars.DataFrame.var": [[290, null]], "polars.DataFrame.vstack": [[291, null]], "polars.DataFrame.width": [[292, null]], "polars.DataFrame.with_columns": [[293, null]], "polars.DataFrame.with_columns_seq": [[294, null]], "polars.DataFrame.with_row_count": [[295, null]], "polars.DataFrame.with_row_index": [[296, null]], "polars.DataFrame.write_avro": [[34, null]], "polars.DataFrame.write_clipboard": [[35, null]], "polars.DataFrame.write_csv": [[36, null]], "polars.DataFrame.write_database": [[37, null]], "polars.DataFrame.write_delta": [[38, null]], "polars.DataFrame.write_excel": [[39, null]], "polars.DataFrame.write_ipc": [[40, null]], "polars.DataFrame.write_ipc_stream": [[41, null]], "polars.DataFrame.write_json": [[42, null]], "polars.DataFrame.write_ndjson": [[43, null]], "polars.DataFrame.write_parquet": [[44, null]], "polars.Expr.abs": [[327, null]], "polars.Expr.add": [[328, null]], "polars.Expr.agg_groups": [[329, null]], "polars.Expr.alias": [[330, null]], "polars.Expr.all": [[331, null]], "polars.Expr.and_": [[332, null]], "polars.Expr.any": [[333, null]], "polars.Expr.append": [[334, null]], "polars.Expr.approx_n_unique": [[335, null]], "polars.Expr.arccos": [[336, null]], "polars.Expr.arccosh": [[337, null]], "polars.Expr.arcsin": [[338, null]], "polars.Expr.arcsinh": [[339, null]], "polars.Expr.arctan": [[340, null]], "polars.Expr.arctanh": [[341, null]], "polars.Expr.arg_max": [[342, null]], "polars.Expr.arg_min": [[343, null]], "polars.Expr.arg_sort": [[344, null]], "polars.Expr.arg_true": [[345, null]], "polars.Expr.arg_unique": [[346, null]], "polars.Expr.arr.all": [[347, null]], "polars.Expr.arr.any": [[348, null]], "polars.Expr.arr.arg_max": [[349, null]], "polars.Expr.arr.arg_min": [[350, null]], "polars.Expr.arr.contains": [[351, null]], "polars.Expr.arr.count_matches": [[352, null]], "polars.Expr.arr.explode": [[353, null]], "polars.Expr.arr.first": [[354, null]], "polars.Expr.arr.get": [[355, null]], "polars.Expr.arr.join": [[356, null]], "polars.Expr.arr.last": [[357, null]], "polars.Expr.arr.max": [[358, null]], "polars.Expr.arr.median": [[359, null]], "polars.Expr.arr.min": [[360, null]], "polars.Expr.arr.n_unique": [[361, null]], "polars.Expr.arr.reverse": [[362, null]], "polars.Expr.arr.shift": [[363, null]], "polars.Expr.arr.sort": [[364, null]], "polars.Expr.arr.std": [[365, null]], "polars.Expr.arr.sum": [[366, null]], "polars.Expr.arr.to_list": [[367, null]], "polars.Expr.arr.to_struct": [[368, null]], "polars.Expr.arr.unique": [[369, null]], "polars.Expr.arr.var": [[370, null]], "polars.Expr.backward_fill": [[371, null]], "polars.Expr.bin.contains": [[372, null]], "polars.Expr.bin.decode": [[373, null]], "polars.Expr.bin.encode": [[374, null]], "polars.Expr.bin.ends_with": [[375, null]], "polars.Expr.bin.size": [[376, null]], "polars.Expr.bin.starts_with": [[377, null]], "polars.Expr.bitwise_and": [[378, null]], "polars.Expr.bitwise_count_ones": [[379, null]], "polars.Expr.bitwise_count_zeros": [[380, null]], "polars.Expr.bitwise_leading_ones": [[381, null]], "polars.Expr.bitwise_leading_zeros": [[382, null]], "polars.Expr.bitwise_or": [[383, null]], "polars.Expr.bitwise_trailing_ones": [[384, null]], "polars.Expr.bitwise_trailing_zeros": [[385, null]], "polars.Expr.bitwise_xor": [[386, null]], "polars.Expr.bottom_k": [[387, null]], "polars.Expr.bottom_k_by": [[388, null]], "polars.Expr.cast": [[389, null]], "polars.Expr.cat.get_categories": [[390, null]], "polars.Expr.cat.len_bytes": [[391, null]], "polars.Expr.cat.len_chars": [[392, null]], "polars.Expr.cbrt": [[393, null]], "polars.Expr.ceil": [[394, null]], "polars.Expr.clip": [[395, null]], "polars.Expr.cos": [[396, null]], "polars.Expr.cosh": [[397, null]], "polars.Expr.cot": [[398, null]], "polars.Expr.count": [[399, null]], "polars.Expr.cum_count": [[400, null]], "polars.Expr.cum_max": [[401, null]], "polars.Expr.cum_min": [[402, null]], "polars.Expr.cum_prod": [[403, null]], "polars.Expr.cum_sum": [[404, null]], "polars.Expr.cumulative_eval": [[405, null]], "polars.Expr.cut": [[406, null]], "polars.Expr.degrees": [[407, null]], "polars.Expr.deserialize": [[408, null]], "polars.Expr.diff": [[409, null]], "polars.Expr.dot": [[410, null]], "polars.Expr.drop_nans": [[411, null]], "polars.Expr.drop_nulls": [[412, null]], "polars.Expr.dt.add_business_days": [[413, null]], "polars.Expr.dt.base_utc_offset": [[414, null]], "polars.Expr.dt.cast_time_unit": [[415, null]], "polars.Expr.dt.century": [[416, null]], "polars.Expr.dt.combine": [[417, null]], "polars.Expr.dt.convert_time_zone": [[418, null]], "polars.Expr.dt.date": [[419, null]], "polars.Expr.dt.datetime": [[420, null]], "polars.Expr.dt.day": [[421, null]], "polars.Expr.dt.dst_offset": [[422, null]], "polars.Expr.dt.epoch": [[423, null]], "polars.Expr.dt.hour": [[424, null]], "polars.Expr.dt.is_leap_year": [[425, null]], "polars.Expr.dt.iso_year": [[426, null]], "polars.Expr.dt.microsecond": [[427, null]], "polars.Expr.dt.millennium": [[428, null]], "polars.Expr.dt.millisecond": [[429, null]], "polars.Expr.dt.minute": [[430, null]], "polars.Expr.dt.month": [[431, null]], "polars.Expr.dt.month_end": [[432, null]], "polars.Expr.dt.month_start": [[433, null]], "polars.Expr.dt.nanosecond": [[434, null]], "polars.Expr.dt.offset_by": [[435, null]], "polars.Expr.dt.ordinal_day": [[436, null]], "polars.Expr.dt.quarter": [[437, null]], "polars.Expr.dt.replace_time_zone": [[438, null]], "polars.Expr.dt.round": [[439, null]], "polars.Expr.dt.second": [[440, null]], "polars.Expr.dt.strftime": [[441, null]], "polars.Expr.dt.time": [[442, null]], "polars.Expr.dt.timestamp": [[443, null]], "polars.Expr.dt.to_string": [[444, null]], "polars.Expr.dt.total_days": [[445, null]], "polars.Expr.dt.total_hours": [[446, null]], "polars.Expr.dt.total_microseconds": [[447, null]], "polars.Expr.dt.total_milliseconds": [[448, null]], "polars.Expr.dt.total_minutes": [[449, null]], "polars.Expr.dt.total_nanoseconds": [[450, null]], "polars.Expr.dt.total_seconds": [[451, null]], "polars.Expr.dt.truncate": [[452, null]], "polars.Expr.dt.week": [[453, null]], "polars.Expr.dt.weekday": [[454, null]], "polars.Expr.dt.with_time_unit": [[455, null]], "polars.Expr.dt.year": [[456, null]], "polars.Expr.entropy": [[457, null]], "polars.Expr.eq": [[458, null]], "polars.Expr.eq_missing": [[459, null]], "polars.Expr.ewm_mean": [[460, null]], "polars.Expr.ewm_mean_by": [[461, null]], "polars.Expr.ewm_std": [[462, null]], "polars.Expr.ewm_var": [[463, null]], "polars.Expr.exclude": [[464, null]], "polars.Expr.exp": [[465, null]], "polars.Expr.explode": [[466, null]], "polars.Expr.extend_constant": [[467, null]], "polars.Expr.fill_nan": [[468, null]], "polars.Expr.fill_null": [[469, null]], "polars.Expr.filter": [[470, null]], "polars.Expr.first": [[471, null]], "polars.Expr.flatten": [[472, null]], "polars.Expr.floor": [[473, null]], "polars.Expr.floordiv": [[474, null]], "polars.Expr.forward_fill": [[475, null]], "polars.Expr.from_json": [[476, null]], "polars.Expr.gather": [[477, null]], "polars.Expr.gather_every": [[478, null]], "polars.Expr.ge": [[479, null]], "polars.Expr.get": [[480, null]], "polars.Expr.gt": [[481, null]], "polars.Expr.has_nulls": [[482, null]], "polars.Expr.hash": [[483, null]], "polars.Expr.head": [[484, null]], "polars.Expr.hist": [[485, null]], "polars.Expr.implode": [[486, null]], "polars.Expr.inspect": [[487, null]], "polars.Expr.interpolate": [[488, null]], "polars.Expr.interpolate_by": [[489, null]], "polars.Expr.is_between": [[490, null]], "polars.Expr.is_duplicated": [[491, null]], "polars.Expr.is_finite": [[492, null]], "polars.Expr.is_first_distinct": [[493, null]], "polars.Expr.is_in": [[494, null]], "polars.Expr.is_infinite": [[495, null]], "polars.Expr.is_last_distinct": [[496, null]], "polars.Expr.is_nan": [[497, null]], "polars.Expr.is_not_nan": [[498, null]], "polars.Expr.is_not_null": [[499, null]], "polars.Expr.is_null": [[500, null]], "polars.Expr.is_unique": [[501, null]], "polars.Expr.kurtosis": [[502, null]], "polars.Expr.last": [[503, null]], "polars.Expr.le": [[504, null]], "polars.Expr.len": [[505, null]], "polars.Expr.limit": [[506, null]], "polars.Expr.list.all": [[507, null]], "polars.Expr.list.any": [[508, null]], "polars.Expr.list.arg_max": [[509, null]], "polars.Expr.list.arg_min": [[510, null]], "polars.Expr.list.concat": [[511, null]], "polars.Expr.list.contains": [[512, null]], "polars.Expr.list.count_matches": [[513, null]], "polars.Expr.list.diff": [[514, null]], "polars.Expr.list.drop_nulls": [[515, null]], "polars.Expr.list.eval": [[516, null]], "polars.Expr.list.explode": [[517, null]], "polars.Expr.list.first": [[518, null]], "polars.Expr.list.gather": [[519, null]], "polars.Expr.list.gather_every": [[520, null]], "polars.Expr.list.get": [[521, null]], "polars.Expr.list.head": [[522, null]], "polars.Expr.list.join": [[523, null]], "polars.Expr.list.last": [[524, null]], "polars.Expr.list.len": [[525, null]], "polars.Expr.list.max": [[526, null]], "polars.Expr.list.mean": [[527, null]], "polars.Expr.list.median": [[528, null]], "polars.Expr.list.min": [[529, null]], "polars.Expr.list.n_unique": [[530, null]], "polars.Expr.list.reverse": [[531, null]], "polars.Expr.list.sample": [[532, null]], "polars.Expr.list.set_difference": [[533, null]], "polars.Expr.list.set_intersection": [[534, null]], "polars.Expr.list.set_symmetric_difference": [[535, null]], "polars.Expr.list.set_union": [[536, null]], "polars.Expr.list.shift": [[537, null]], "polars.Expr.list.slice": [[538, null]], "polars.Expr.list.sort": [[539, null]], "polars.Expr.list.std": [[540, null]], "polars.Expr.list.sum": [[541, null]], "polars.Expr.list.tail": [[542, null]], "polars.Expr.list.to_array": [[543, null]], "polars.Expr.list.to_struct": [[544, null]], "polars.Expr.list.unique": [[545, null]], "polars.Expr.list.var": [[546, null]], "polars.Expr.log": [[547, null]], "polars.Expr.log10": [[548, null]], "polars.Expr.log1p": [[549, null]], "polars.Expr.lower_bound": [[550, null]], "polars.Expr.lt": [[551, null]], "polars.Expr.map_batches": [[552, null]], "polars.Expr.map_elements": [[553, null]], "polars.Expr.max": [[554, null]], "polars.Expr.mean": [[555, null]], "polars.Expr.median": [[556, null]], "polars.Expr.meta.eq": [[557, null]], "polars.Expr.meta.has_multiple_outputs": [[558, null]], "polars.Expr.meta.is_column": [[559, null]], "polars.Expr.meta.is_column_selection": [[560, null]], "polars.Expr.meta.is_literal": [[561, null]], "polars.Expr.meta.is_regex_projection": [[562, null]], "polars.Expr.meta.ne": [[563, null]], "polars.Expr.meta.output_name": [[564, null]], "polars.Expr.meta.pop": [[565, null]], "polars.Expr.meta.root_names": [[566, null]], "polars.Expr.meta.serialize": [[567, null]], "polars.Expr.meta.show_graph": [[568, null]], "polars.Expr.meta.tree_format": [[569, null]], "polars.Expr.meta.undo_aliases": [[570, null]], "polars.Expr.meta.write_json": [[571, null]], "polars.Expr.min": [[572, null]], "polars.Expr.mod": [[573, null]], "polars.Expr.mode": [[574, null]], "polars.Expr.mul": [[575, null]], "polars.Expr.n_unique": [[576, null]], "polars.Expr.name.keep": [[577, null]], "polars.Expr.name.map": [[578, null]], "polars.Expr.name.map_fields": [[579, null]], "polars.Expr.name.prefix": [[580, null]], "polars.Expr.name.prefix_fields": [[581, null]], "polars.Expr.name.suffix": [[582, null]], "polars.Expr.name.suffix_fields": [[583, null]], "polars.Expr.name.to_lowercase": [[584, null]], "polars.Expr.name.to_uppercase": [[585, null]], "polars.Expr.nan_max": [[586, null]], "polars.Expr.nan_min": [[587, null]], "polars.Expr.ne": [[588, null]], "polars.Expr.ne_missing": [[589, null]], "polars.Expr.neg": [[590, null]], "polars.Expr.not_": [[591, null]], "polars.Expr.null_count": [[592, null]], "polars.Expr.or_": [[593, null]], "polars.Expr.over": [[594, null]], "polars.Expr.pct_change": [[595, null]], "polars.Expr.peak_max": [[596, null]], "polars.Expr.peak_min": [[597, null]], "polars.Expr.pipe": [[598, null]], "polars.Expr.pow": [[599, null]], "polars.Expr.product": [[600, null]], "polars.Expr.qcut": [[601, null]], "polars.Expr.quantile": [[602, null]], "polars.Expr.radians": [[603, null]], "polars.Expr.rank": [[604, null]], "polars.Expr.rechunk": [[605, null]], "polars.Expr.reinterpret": [[606, null]], "polars.Expr.repeat_by": [[607, null]], "polars.Expr.replace": [[608, null]], "polars.Expr.replace_strict": [[609, null]], "polars.Expr.reshape": [[610, null]], "polars.Expr.reverse": [[611, null]], "polars.Expr.rle": [[612, null]], "polars.Expr.rle_id": [[613, null]], "polars.Expr.rolling": [[614, null]], "polars.Expr.rolling_map": [[615, null]], "polars.Expr.rolling_max": [[616, null]], "polars.Expr.rolling_max_by": [[617, null]], "polars.Expr.rolling_mean": [[618, null]], "polars.Expr.rolling_mean_by": [[619, null]], "polars.Expr.rolling_median": [[620, null]], "polars.Expr.rolling_median_by": [[621, null]], "polars.Expr.rolling_min": [[622, null]], "polars.Expr.rolling_min_by": [[623, null]], "polars.Expr.rolling_quantile": [[624, null]], "polars.Expr.rolling_quantile_by": [[625, null]], "polars.Expr.rolling_skew": [[626, null]], "polars.Expr.rolling_std": [[627, null]], "polars.Expr.rolling_std_by": [[628, null]], "polars.Expr.rolling_sum": [[629, null]], "polars.Expr.rolling_sum_by": [[630, null]], "polars.Expr.rolling_var": [[631, null]], "polars.Expr.rolling_var_by": [[632, null]], "polars.Expr.round": [[633, null]], "polars.Expr.round_sig_figs": [[634, null]], "polars.Expr.sample": [[635, null]], "polars.Expr.search_sorted": [[636, null]], "polars.Expr.set_sorted": [[637, null]], "polars.Expr.shift": [[638, null]], "polars.Expr.shrink_dtype": [[639, null]], "polars.Expr.shuffle": [[640, null]], "polars.Expr.sign": [[641, null]], "polars.Expr.sin": [[642, null]], "polars.Expr.sinh": [[643, null]], "polars.Expr.skew": [[644, null]], "polars.Expr.slice": [[645, null]], "polars.Expr.sort": [[646, null]], "polars.Expr.sort_by": [[647, null]], "polars.Expr.sqrt": [[648, null]], "polars.Expr.std": [[649, null]], "polars.Expr.str.concat": [[650, null]], "polars.Expr.str.contains": [[651, null]], "polars.Expr.str.contains_any": [[652, null]], "polars.Expr.str.count_matches": [[653, null]], "polars.Expr.str.decode": [[654, null]], "polars.Expr.str.encode": [[655, null]], "polars.Expr.str.ends_with": [[656, null]], "polars.Expr.str.escape_regex": [[657, null]], "polars.Expr.str.explode": [[658, null]], "polars.Expr.str.extract": [[659, null]], "polars.Expr.str.extract_all": [[660, null]], "polars.Expr.str.extract_groups": [[661, null]], "polars.Expr.str.extract_many": [[662, null]], "polars.Expr.str.find": [[663, null]], "polars.Expr.str.find_many": [[664, null]], "polars.Expr.str.head": [[665, null]], "polars.Expr.str.join": [[666, null]], "polars.Expr.str.json_decode": [[667, null]], "polars.Expr.str.json_path_match": [[668, null]], "polars.Expr.str.len_bytes": [[669, null]], "polars.Expr.str.len_chars": [[670, null]], "polars.Expr.str.pad_end": [[671, null]], "polars.Expr.str.pad_start": [[672, null]], "polars.Expr.str.replace": [[673, null]], "polars.Expr.str.replace_all": [[674, null]], "polars.Expr.str.replace_many": [[675, null]], "polars.Expr.str.reverse": [[676, null]], "polars.Expr.str.slice": [[677, null]], "polars.Expr.str.split": [[678, null]], "polars.Expr.str.split_exact": [[679, null]], "polars.Expr.str.splitn": [[680, null]], "polars.Expr.str.starts_with": [[681, null]], "polars.Expr.str.strip_chars": [[682, null]], "polars.Expr.str.strip_chars_end": [[683, null]], "polars.Expr.str.strip_chars_start": [[684, null]], "polars.Expr.str.strip_prefix": [[685, null]], "polars.Expr.str.strip_suffix": [[686, null]], "polars.Expr.str.strptime": [[687, null]], "polars.Expr.str.tail": [[688, null]], "polars.Expr.str.to_date": [[689, null]], "polars.Expr.str.to_datetime": [[690, null]], "polars.Expr.str.to_decimal": [[691, null]], "polars.Expr.str.to_integer": [[692, null]], "polars.Expr.str.to_lowercase": [[693, null]], "polars.Expr.str.to_time": [[694, null]], "polars.Expr.str.to_titlecase": [[695, null]], "polars.Expr.str.to_uppercase": [[696, null]], "polars.Expr.str.zfill": [[697, null]], "polars.Expr.struct.field": [[698, null]], "polars.Expr.struct.json_encode": [[699, null]], "polars.Expr.struct.rename_fields": [[700, null]], "polars.Expr.struct.unnest": [[701, null]], "polars.Expr.struct.with_fields": [[702, null]], "polars.Expr.sub": [[703, null]], "polars.Expr.sum": [[704, null]], "polars.Expr.tail": [[705, null]], "polars.Expr.tan": [[706, null]], "polars.Expr.tanh": [[707, null]], "polars.Expr.to_physical": [[708, null]], "polars.Expr.top_k": [[709, null]], "polars.Expr.top_k_by": [[710, null]], "polars.Expr.truediv": [[711, null]], "polars.Expr.unique": [[712, null]], "polars.Expr.unique_counts": [[713, null]], "polars.Expr.upper_bound": [[714, null]], "polars.Expr.value_counts": [[715, null]], "polars.Expr.var": [[716, null]], "polars.Expr.where": [[717, null]], "polars.Expr.xor": [[718, null]], "polars.LazyFrame.approx_n_unique": [[817, null]], "polars.LazyFrame.bottom_k": [[818, null]], "polars.LazyFrame.cache": [[819, null]], "polars.LazyFrame.cast": [[820, null]], "polars.LazyFrame.clear": [[821, null]], "polars.LazyFrame.clone": [[822, null]], "polars.LazyFrame.collect": [[823, null]], "polars.LazyFrame.collect_async": [[824, null]], "polars.LazyFrame.collect_schema": [[825, null]], "polars.LazyFrame.columns": [[826, null]], "polars.LazyFrame.count": [[827, null]], "polars.LazyFrame.describe": [[828, null]], "polars.LazyFrame.deserialize": [[829, null]], "polars.LazyFrame.drop": [[830, null]], "polars.LazyFrame.drop_nans": [[831, null]], "polars.LazyFrame.drop_nulls": [[832, null]], "polars.LazyFrame.dtypes": [[833, null]], "polars.LazyFrame.explain": [[834, null]], "polars.LazyFrame.explode": [[835, null]], "polars.LazyFrame.fill_nan": [[836, null]], "polars.LazyFrame.fill_null": [[837, null]], "polars.LazyFrame.filter": [[838, null]], "polars.LazyFrame.first": [[839, null]], "polars.LazyFrame.gather_every": [[840, null]], "polars.LazyFrame.group_by": [[841, null]], "polars.LazyFrame.group_by_dynamic": [[842, null]], "polars.LazyFrame.head": [[843, null]], "polars.LazyFrame.inspect": [[844, null]], "polars.LazyFrame.interpolate": [[845, null]], "polars.LazyFrame.join": [[846, null]], "polars.LazyFrame.join_asof": [[847, null]], "polars.LazyFrame.join_where": [[848, null]], "polars.LazyFrame.last": [[849, null]], "polars.LazyFrame.lazy": [[850, null]], "polars.LazyFrame.limit": [[851, null]], "polars.LazyFrame.map_batches": [[852, null]], "polars.LazyFrame.max": [[853, null]], "polars.LazyFrame.mean": [[854, null]], "polars.LazyFrame.median": [[855, null]], "polars.LazyFrame.melt": [[856, null]], "polars.LazyFrame.merge_sorted": [[857, null]], "polars.LazyFrame.min": [[858, null]], "polars.LazyFrame.null_count": [[859, null]], "polars.LazyFrame.pipe": [[860, null]], "polars.LazyFrame.profile": [[861, null]], "polars.LazyFrame.quantile": [[862, null]], "polars.LazyFrame.rename": [[863, null]], "polars.LazyFrame.reverse": [[864, null]], "polars.LazyFrame.rolling": [[865, null]], "polars.LazyFrame.schema": [[866, null]], "polars.LazyFrame.select": [[867, null]], "polars.LazyFrame.select_seq": [[868, null]], "polars.LazyFrame.serialize": [[869, null]], "polars.LazyFrame.set_sorted": [[870, null]], "polars.LazyFrame.shift": [[871, null]], "polars.LazyFrame.show_graph": [[872, null]], "polars.LazyFrame.sink_csv": [[45, null]], "polars.LazyFrame.sink_ipc": [[46, null]], "polars.LazyFrame.sink_ndjson": [[47, null]], "polars.LazyFrame.sink_parquet": [[48, null]], "polars.LazyFrame.slice": [[873, null]], "polars.LazyFrame.sort": [[874, null]], "polars.LazyFrame.sql": [[875, null]], "polars.LazyFrame.std": [[876, null]], "polars.LazyFrame.sum": [[877, null]], "polars.LazyFrame.tail": [[878, null]], "polars.LazyFrame.top_k": [[879, null]], "polars.LazyFrame.unique": [[880, null]], "polars.LazyFrame.unnest": [[881, null]], "polars.LazyFrame.unpivot": [[882, null]], "polars.LazyFrame.update": [[883, null]], "polars.LazyFrame.var": [[884, null]], "polars.LazyFrame.width": [[885, null]], "polars.LazyFrame.with_columns": [[886, null]], "polars.LazyFrame.with_columns_seq": [[887, null]], "polars.LazyFrame.with_context": [[888, null]], "polars.LazyFrame.with_row_count": [[889, null]], "polars.LazyFrame.with_row_index": [[890, null]], "polars.SQLContext.execute": [[1314, null]], "polars.SQLContext.execute_global": [[1315, null]], "polars.SQLContext.register": [[1316, null]], "polars.SQLContext.register_globals": [[1317, null]], "polars.SQLContext.register_many": [[1318, null]], "polars.SQLContext.tables": [[1319, null]], "polars.SQLContext.unregister": [[1320, null]], "polars.Series.__array__": [[924, null]], "polars.Series.__arrow_c_stream__": [[925, null]], "polars.Series.__getitem__": [[926, null]], "polars.Series.abs": [[927, null]], "polars.Series.alias": [[928, null]], "polars.Series.all": [[929, null]], "polars.Series.any": [[930, null]], "polars.Series.append": [[931, null]], "polars.Series.approx_n_unique": [[932, null]], "polars.Series.arccos": [[933, null]], "polars.Series.arccosh": [[934, null]], "polars.Series.arcsin": [[935, null]], "polars.Series.arcsinh": [[936, null]], "polars.Series.arctan": [[937, null]], "polars.Series.arctanh": [[938, null]], "polars.Series.arg_max": [[939, null]], "polars.Series.arg_min": [[940, null]], "polars.Series.arg_sort": [[941, null]], "polars.Series.arg_true": [[942, null]], "polars.Series.arg_unique": [[943, null]], "polars.Series.arr.all": [[944, null]], "polars.Series.arr.any": [[945, null]], "polars.Series.arr.arg_max": [[946, null]], "polars.Series.arr.arg_min": [[947, null]], "polars.Series.arr.contains": [[948, null]], "polars.Series.arr.count_matches": [[949, null]], "polars.Series.arr.explode": [[950, null]], "polars.Series.arr.first": [[951, null]], "polars.Series.arr.get": [[952, null]], "polars.Series.arr.join": [[953, null]], "polars.Series.arr.last": [[954, null]], "polars.Series.arr.max": [[955, null]], "polars.Series.arr.median": [[956, null]], "polars.Series.arr.min": [[957, null]], "polars.Series.arr.n_unique": [[958, null]], "polars.Series.arr.reverse": [[959, null]], "polars.Series.arr.shift": [[960, null]], "polars.Series.arr.sort": [[961, null]], "polars.Series.arr.std": [[962, null]], "polars.Series.arr.sum": [[963, null]], "polars.Series.arr.to_list": [[964, null]], "polars.Series.arr.to_struct": [[965, null]], "polars.Series.arr.unique": [[966, null]], "polars.Series.arr.var": [[967, null]], "polars.Series.bin.contains": [[968, null]], "polars.Series.bin.decode": [[969, null]], "polars.Series.bin.encode": [[970, null]], "polars.Series.bin.ends_with": [[971, null]], "polars.Series.bin.size": [[972, null]], "polars.Series.bin.starts_with": [[973, null]], "polars.Series.bitwise_and": [[974, null]], "polars.Series.bitwise_count_ones": [[975, null]], "polars.Series.bitwise_count_zeros": [[976, null]], "polars.Series.bitwise_leading_ones": [[977, null]], "polars.Series.bitwise_leading_zeros": [[978, null]], "polars.Series.bitwise_or": [[979, null]], "polars.Series.bitwise_trailing_ones": [[980, null]], "polars.Series.bitwise_trailing_zeros": [[981, null]], "polars.Series.bitwise_xor": [[982, null]], "polars.Series.bottom_k": [[983, null]], "polars.Series.cast": [[984, null]], "polars.Series.cat.get_categories": [[985, null]], "polars.Series.cat.is_local": [[986, null]], "polars.Series.cat.len_bytes": [[987, null]], "polars.Series.cat.len_chars": [[988, null]], "polars.Series.cat.to_local": [[989, null]], "polars.Series.cat.uses_lexical_ordering": [[990, null]], "polars.Series.cbrt": [[991, null]], "polars.Series.ceil": [[992, null]], "polars.Series.chunk_lengths": [[993, null]], "polars.Series.clear": [[994, null]], "polars.Series.clip": [[995, null]], "polars.Series.clone": [[996, null]], "polars.Series.cos": [[997, null]], "polars.Series.cosh": [[998, null]], "polars.Series.cot": [[999, null]], "polars.Series.count": [[1000, null]], "polars.Series.cum_count": [[1001, null]], "polars.Series.cum_max": [[1002, null]], "polars.Series.cum_min": [[1003, null]], "polars.Series.cum_prod": [[1004, null]], "polars.Series.cum_sum": [[1005, null]], "polars.Series.cumulative_eval": [[1006, null]], "polars.Series.cut": [[1007, null]], "polars.Series.describe": [[1008, null]], "polars.Series.diff": [[1009, null]], "polars.Series.dot": [[1010, null]], "polars.Series.drop_nans": [[1011, null]], "polars.Series.drop_nulls": [[1012, null]], "polars.Series.dt.add_business_days": [[1013, null]], "polars.Series.dt.base_utc_offset": [[1014, null]], "polars.Series.dt.cast_time_unit": [[1015, null]], "polars.Series.dt.century": [[1016, null]], "polars.Series.dt.combine": [[1017, null]], "polars.Series.dt.convert_time_zone": [[1018, null]], "polars.Series.dt.date": [[1019, null]], "polars.Series.dt.datetime": [[1020, null]], "polars.Series.dt.day": [[1021, null]], "polars.Series.dt.dst_offset": [[1022, null]], "polars.Series.dt.epoch": [[1023, null]], "polars.Series.dt.hour": [[1024, null]], "polars.Series.dt.is_leap_year": [[1025, null]], "polars.Series.dt.iso_year": [[1026, null]], "polars.Series.dt.max": [[1027, null]], "polars.Series.dt.mean": [[1028, null]], "polars.Series.dt.median": [[1029, null]], "polars.Series.dt.microsecond": [[1030, null]], "polars.Series.dt.millennium": [[1031, null]], "polars.Series.dt.millisecond": [[1032, null]], "polars.Series.dt.min": [[1033, null]], "polars.Series.dt.minute": [[1034, null]], "polars.Series.dt.month": [[1035, null]], "polars.Series.dt.month_end": [[1036, null]], "polars.Series.dt.month_start": [[1037, null]], "polars.Series.dt.nanosecond": [[1038, null]], "polars.Series.dt.offset_by": [[1039, null]], "polars.Series.dt.ordinal_day": [[1040, null]], "polars.Series.dt.quarter": [[1041, null]], "polars.Series.dt.replace_time_zone": [[1042, null]], "polars.Series.dt.round": [[1043, null]], "polars.Series.dt.second": [[1044, null]], "polars.Series.dt.strftime": [[1045, null]], "polars.Series.dt.time": [[1046, null]], "polars.Series.dt.timestamp": [[1047, null]], "polars.Series.dt.to_string": [[1048, null]], "polars.Series.dt.total_days": [[1049, null]], "polars.Series.dt.total_hours": [[1050, null]], "polars.Series.dt.total_microseconds": [[1051, null]], "polars.Series.dt.total_milliseconds": [[1052, null]], "polars.Series.dt.total_minutes": [[1053, null]], "polars.Series.dt.total_nanoseconds": [[1054, null]], "polars.Series.dt.total_seconds": [[1055, null]], "polars.Series.dt.truncate": [[1056, null]], "polars.Series.dt.week": [[1057, null]], "polars.Series.dt.weekday": [[1058, null]], "polars.Series.dt.with_time_unit": [[1059, null]], "polars.Series.dt.year": [[1060, null]], "polars.Series.dtype": [[1061, null]], "polars.Series.entropy": [[1062, null]], "polars.Series.eq": [[1063, null]], "polars.Series.eq_missing": [[1064, null]], "polars.Series.equals": [[1065, null]], "polars.Series.estimated_size": [[1066, null]], "polars.Series.ewm_mean": [[1067, null]], "polars.Series.ewm_mean_by": [[1068, null]], "polars.Series.ewm_std": [[1069, null]], "polars.Series.ewm_var": [[1070, null]], "polars.Series.exp": [[1071, null]], "polars.Series.explode": [[1072, null]], "polars.Series.extend": [[1073, null]], "polars.Series.extend_constant": [[1074, null]], "polars.Series.fill_nan": [[1075, null]], "polars.Series.fill_null": [[1076, null]], "polars.Series.filter": [[1077, null]], "polars.Series.first": [[1078, null]], "polars.Series.flags": [[1079, null]], "polars.Series.floor": [[1080, null]], "polars.Series.gather": [[1081, null]], "polars.Series.gather_every": [[1082, null]], "polars.Series.ge": [[1083, null]], "polars.Series.get_chunks": [[1084, null]], "polars.Series.gt": [[1085, null]], "polars.Series.has_nulls": [[1086, null]], "polars.Series.has_validity": [[1087, null]], "polars.Series.hash": [[1088, null]], "polars.Series.head": [[1089, null]], "polars.Series.hist": [[1090, null]], "polars.Series.implode": [[1091, null]], "polars.Series.interpolate": [[1092, null]], "polars.Series.interpolate_by": [[1093, null]], "polars.Series.is_between": [[1094, null]], "polars.Series.is_duplicated": [[1095, null]], "polars.Series.is_empty": [[1096, null]], "polars.Series.is_finite": [[1097, null]], "polars.Series.is_first_distinct": [[1098, null]], "polars.Series.is_in": [[1099, null]], "polars.Series.is_infinite": [[1100, null]], "polars.Series.is_last_distinct": [[1101, null]], "polars.Series.is_nan": [[1102, null]], "polars.Series.is_not_nan": [[1103, null]], "polars.Series.is_not_null": [[1104, null]], "polars.Series.is_null": [[1105, null]], "polars.Series.is_sorted": [[1106, null]], "polars.Series.is_unique": [[1107, null]], "polars.Series.item": [[1108, null]], "polars.Series.kurtosis": [[1109, null]], "polars.Series.last": [[1110, null]], "polars.Series.le": [[1111, null]], "polars.Series.len": [[1112, null]], "polars.Series.limit": [[1113, null]], "polars.Series.list.all": [[1114, null]], "polars.Series.list.any": [[1115, null]], "polars.Series.list.arg_max": [[1116, null]], "polars.Series.list.arg_min": [[1117, null]], "polars.Series.list.concat": [[1118, null]], "polars.Series.list.contains": [[1119, null]], "polars.Series.list.count_matches": [[1120, null]], "polars.Series.list.diff": [[1121, null]], "polars.Series.list.drop_nulls": [[1122, null]], "polars.Series.list.eval": [[1123, null]], "polars.Series.list.explode": [[1124, null]], "polars.Series.list.first": [[1125, null]], "polars.Series.list.gather": [[1126, null]], "polars.Series.list.gather_every": [[1127, null]], "polars.Series.list.get": [[1128, null]], "polars.Series.list.head": [[1129, null]], "polars.Series.list.join": [[1130, null]], "polars.Series.list.last": [[1131, null]], "polars.Series.list.len": [[1132, null]], "polars.Series.list.max": [[1133, null]], "polars.Series.list.mean": [[1134, null]], "polars.Series.list.median": [[1135, null]], "polars.Series.list.min": [[1136, null]], "polars.Series.list.n_unique": [[1137, null]], "polars.Series.list.reverse": [[1138, null]], "polars.Series.list.sample": [[1139, null]], "polars.Series.list.set_difference": [[1140, null]], "polars.Series.list.set_intersection": [[1141, null]], "polars.Series.list.set_symmetric_difference": [[1142, null]], "polars.Series.list.set_union": [[1143, null]], "polars.Series.list.shift": [[1144, null]], "polars.Series.list.slice": [[1145, null]], "polars.Series.list.sort": [[1146, null]], "polars.Series.list.std": [[1147, null]], "polars.Series.list.sum": [[1148, null]], "polars.Series.list.tail": [[1149, null]], "polars.Series.list.to_array": [[1150, null]], "polars.Series.list.to_struct": [[1151, null]], "polars.Series.list.unique": [[1152, null]], "polars.Series.list.var": [[1153, null]], "polars.Series.log": [[1154, null]], "polars.Series.log10": [[1155, null]], "polars.Series.log1p": [[1156, null]], "polars.Series.lower_bound": [[1157, null]], "polars.Series.lt": [[1158, null]], "polars.Series.map_elements": [[1159, null]], "polars.Series.max": [[1160, null]], "polars.Series.mean": [[1161, null]], "polars.Series.median": [[1162, null]], "polars.Series.min": [[1163, null]], "polars.Series.mode": [[1164, null]], "polars.Series.n_chunks": [[1165, null]], "polars.Series.n_unique": [[1166, null]], "polars.Series.name": [[1167, null]], "polars.Series.nan_max": [[1168, null]], "polars.Series.nan_min": [[1169, null]], "polars.Series.ne": [[1170, null]], "polars.Series.ne_missing": [[1171, null]], "polars.Series.new_from_index": [[1172, null]], "polars.Series.not_": [[1173, null]], "polars.Series.null_count": [[1174, null]], "polars.Series.pct_change": [[1175, null]], "polars.Series.peak_max": [[1176, null]], "polars.Series.peak_min": [[1177, null]], "polars.Series.pow": [[1178, null]], "polars.Series.product": [[1179, null]], "polars.Series.qcut": [[1180, null]], "polars.Series.quantile": [[1181, null]], "polars.Series.rank": [[1182, null]], "polars.Series.rechunk": [[1183, null]], "polars.Series.reinterpret": [[1184, null]], "polars.Series.rename": [[1185, null]], "polars.Series.replace": [[1186, null]], "polars.Series.replace_strict": [[1187, null]], "polars.Series.reshape": [[1188, null]], "polars.Series.reverse": [[1189, null]], "polars.Series.rle": [[1190, null]], "polars.Series.rle_id": [[1191, null]], "polars.Series.rolling_map": [[1192, null]], "polars.Series.rolling_max": [[1193, null]], "polars.Series.rolling_mean": [[1194, null]], "polars.Series.rolling_median": [[1195, null]], "polars.Series.rolling_min": [[1196, null]], "polars.Series.rolling_quantile": [[1197, null]], "polars.Series.rolling_skew": [[1198, null]], "polars.Series.rolling_std": [[1199, null]], "polars.Series.rolling_sum": [[1200, null]], "polars.Series.rolling_var": [[1201, null]], "polars.Series.round": [[1202, null]], "polars.Series.round_sig_figs": [[1203, null]], "polars.Series.sample": [[1204, null]], "polars.Series.scatter": [[1205, null]], "polars.Series.search_sorted": [[1206, null]], "polars.Series.set": [[1207, null]], "polars.Series.set_sorted": [[1208, null]], "polars.Series.shape": [[1209, null]], "polars.Series.shift": [[1210, null]], "polars.Series.shrink_dtype": [[1211, null]], "polars.Series.shrink_to_fit": [[1212, null]], "polars.Series.shuffle": [[1213, null]], "polars.Series.sign": [[1214, null]], "polars.Series.sin": [[1215, null]], "polars.Series.sinh": [[1216, null]], "polars.Series.skew": [[1217, null]], "polars.Series.slice": [[1218, null]], "polars.Series.sort": [[1219, null]], "polars.Series.sqrt": [[1220, null]], "polars.Series.std": [[1221, null]], "polars.Series.str.concat": [[1222, null]], "polars.Series.str.contains": [[1223, null]], "polars.Series.str.contains_any": [[1224, null]], "polars.Series.str.count_matches": [[1225, null]], "polars.Series.str.decode": [[1226, null]], "polars.Series.str.encode": [[1227, null]], "polars.Series.str.ends_with": [[1228, null]], "polars.Series.str.escape_regex": [[1229, null]], "polars.Series.str.explode": [[1230, null]], "polars.Series.str.extract": [[1231, null]], "polars.Series.str.extract_all": [[1232, null]], "polars.Series.str.extract_groups": [[1233, null]], "polars.Series.str.extract_many": [[1234, null]], "polars.Series.str.find": [[1235, null]], "polars.Series.str.find_many": [[1236, null]], "polars.Series.str.head": [[1237, null]], "polars.Series.str.join": [[1238, null]], "polars.Series.str.json_decode": [[1239, null]], "polars.Series.str.json_path_match": [[1240, null]], "polars.Series.str.len_bytes": [[1241, null]], "polars.Series.str.len_chars": [[1242, null]], "polars.Series.str.pad_end": [[1243, null]], "polars.Series.str.pad_start": [[1244, null]], "polars.Series.str.replace": [[1245, null]], "polars.Series.str.replace_all": [[1246, null]], "polars.Series.str.replace_many": [[1247, null]], "polars.Series.str.reverse": [[1248, null]], "polars.Series.str.slice": [[1249, null]], "polars.Series.str.split": [[1250, null]], "polars.Series.str.split_exact": [[1251, null]], "polars.Series.str.splitn": [[1252, null]], "polars.Series.str.starts_with": [[1253, null]], "polars.Series.str.strip_chars": [[1254, null]], "polars.Series.str.strip_chars_end": [[1255, null]], "polars.Series.str.strip_chars_start": [[1256, null]], "polars.Series.str.strip_prefix": [[1257, null]], "polars.Series.str.strip_suffix": [[1258, null]], "polars.Series.str.strptime": [[1259, null]], "polars.Series.str.tail": [[1260, null]], "polars.Series.str.to_date": [[1261, null]], "polars.Series.str.to_datetime": [[1262, null]], "polars.Series.str.to_decimal": [[1263, null]], "polars.Series.str.to_integer": [[1264, null]], "polars.Series.str.to_lowercase": [[1265, null]], "polars.Series.str.to_time": [[1266, null]], "polars.Series.str.to_titlecase": [[1267, null]], "polars.Series.str.to_uppercase": [[1268, null]], "polars.Series.str.zfill": [[1269, null]], "polars.Series.struct.field": [[1270, null]], "polars.Series.struct.fields": [[1271, null]], "polars.Series.struct.json_encode": [[1272, null]], "polars.Series.struct.rename_fields": [[1273, null]], "polars.Series.struct.schema": [[1274, null]], "polars.Series.struct.unnest": [[1275, null]], "polars.Series.sum": [[1276, null]], "polars.Series.tail": [[1277, null]], "polars.Series.tan": [[1278, null]], "polars.Series.tanh": [[1279, null]], "polars.Series.to_arrow": [[1280, null]], "polars.Series.to_dummies": [[1281, null]], "polars.Series.to_frame": [[1282, null]], "polars.Series.to_init_repr": [[1283, null]], "polars.Series.to_jax": [[1284, null]], "polars.Series.to_list": [[1285, null]], "polars.Series.to_numpy": [[1286, null]], "polars.Series.to_pandas": [[1287, null]], "polars.Series.to_physical": [[1288, null]], "polars.Series.to_torch": [[1289, null]], "polars.Series.top_k": [[1290, null]], "polars.Series.unique": [[1291, null]], "polars.Series.unique_counts": [[1292, null]], "polars.Series.upper_bound": [[1293, null]], "polars.Series.value_counts": [[1294, null]], "polars.Series.var": [[1295, null]], "polars.Series.zip_with": [[1296, null]], "polars.StringCache": [[49, null]], "polars.align_frames": [[50, null]], "polars.all": [[719, null]], "polars.all_horizontal": [[720, null]], "polars.any": [[721, null]], "polars.any_horizontal": [[722, null]], "polars.api.register_dataframe_namespace": [[51, null]], "polars.api.register_expr_namespace": [[52, null]], "polars.api.register_lazyframe_namespace": [[53, null]], "polars.api.register_series_namespace": [[54, null]], "polars.approx_n_unique": [[723, null]], "polars.arange": [[724, null]], "polars.arctan2": [[725, null]], "polars.arctan2d": [[726, null]], "polars.arg_sort_by": [[727, null]], "polars.arg_where": [[728, null]], "polars.build_info": [[55, null]], "polars.business_day_count": [[729, null]], "polars.coalesce": [[730, null]], "polars.col": [[798, null]], "polars.collect_all": [[56, null]], "polars.collect_all_async": [[57, null]], "polars.concat": [[58, null]], "polars.concat_arr": [[731, null]], "polars.concat_list": [[732, null]], "polars.concat_str": [[733, null]], "polars.corr": [[734, null]], "polars.count": [[735, null]], "polars.cov": [[736, null]], "polars.cum_count": [[737, null]], "polars.cum_fold": [[738, null]], "polars.cum_reduce": [[739, null]], "polars.cum_sum": [[740, null]], "polars.cum_sum_horizontal": [[741, null]], "polars.dataframe.group_by.GroupBy.__iter__": [[297, null]], "polars.dataframe.group_by.GroupBy.agg": [[298, null]], "polars.dataframe.group_by.GroupBy.all": [[299, null]], "polars.dataframe.group_by.GroupBy.count": [[300, null]], "polars.dataframe.group_by.GroupBy.first": [[301, null]], "polars.dataframe.group_by.GroupBy.head": [[302, null]], "polars.dataframe.group_by.GroupBy.last": [[303, null]], "polars.dataframe.group_by.GroupBy.len": [[304, null]], "polars.dataframe.group_by.GroupBy.map_groups": [[305, null]], "polars.dataframe.group_by.GroupBy.max": [[306, null]], "polars.dataframe.group_by.GroupBy.mean": [[307, null]], "polars.dataframe.group_by.GroupBy.median": [[308, null]], "polars.dataframe.group_by.GroupBy.min": [[309, null]], "polars.dataframe.group_by.GroupBy.n_unique": [[310, null]], "polars.dataframe.group_by.GroupBy.quantile": [[311, null]], "polars.dataframe.group_by.GroupBy.sum": [[312, null]], "polars.dataframe.group_by.GroupBy.tail": [[313, null]], "polars.datatypes.Array": [[59, null]], "polars.datatypes.Binary": [[60, null]], "polars.datatypes.Boolean": [[61, null]], "polars.datatypes.Categorical": [[62, null]], "polars.datatypes.DataType": [[63, null]], "polars.datatypes.Date": [[64, null]], "polars.datatypes.Datetime": [[65, null]], "polars.datatypes.Decimal": [[66, null]], "polars.datatypes.Duration": [[67, null]], "polars.datatypes.Enum": [[68, null]], "polars.datatypes.Float32": [[69, null]], "polars.datatypes.Float64": [[70, null]], "polars.datatypes.Int128": [[71, null]], "polars.datatypes.Int16": [[72, null]], "polars.datatypes.Int32": [[73, null]], "polars.datatypes.Int64": [[74, null]], "polars.datatypes.Int8": [[75, null]], "polars.datatypes.List": [[76, null]], "polars.datatypes.Null": [[77, null]], "polars.datatypes.Object": [[78, null]], "polars.datatypes.String": [[79, null]], "polars.datatypes.Struct": [[80, null]], "polars.datatypes.Time": [[81, null]], "polars.datatypes.UInt16": [[82, null]], "polars.datatypes.UInt32": [[83, null]], "polars.datatypes.UInt64": [[84, null]], "polars.datatypes.UInt8": [[85, null]], "polars.datatypes.Unknown": [[86, null]], "polars.datatypes.Utf8": [[87, null]], "polars.date": [[742, null]], "polars.date_range": [[743, null]], "polars.date_ranges": [[744, null]], "polars.datetime": [[745, null]], "polars.datetime_range": [[746, null]], "polars.datetime_ranges": [[747, null]], "polars.disable_string_cache": [[88, null]], "polars.duration": [[748, null]], "polars.element": [[749, null]], "polars.enable_string_cache": [[89, null]], "polars.escape_regex": [[90, null]], "polars.exceptions.CategoricalRemappingWarning": [[91, null]], "polars.exceptions.ChronoFormatWarning": [[92, null]], "polars.exceptions.ColumnNotFoundError": [[93, null]], "polars.exceptions.ComputeError": [[94, null]], "polars.exceptions.CustomUFuncWarning": [[95, null]], "polars.exceptions.DataOrientationWarning": [[96, null]], "polars.exceptions.DuplicateError": [[97, null]], "polars.exceptions.InvalidOperationError": [[98, null]], "polars.exceptions.MapWithoutReturnDtypeWarning": [[99, null]], "polars.exceptions.ModuleUpgradeRequiredError": [[100, null]], "polars.exceptions.NoDataError": [[101, null]], "polars.exceptions.NoRowsReturnedError": [[102, null]], "polars.exceptions.OutOfBoundsError": [[103, null]], "polars.exceptions.PanicException": [[104, null]], "polars.exceptions.ParameterCollisionError": [[105, null]], "polars.exceptions.PerformanceWarning": [[106, null]], "polars.exceptions.PolarsError": [[107, null]], "polars.exceptions.PolarsInefficientMapWarning": [[108, null]], "polars.exceptions.PolarsWarning": [[109, null]], "polars.exceptions.RowsError": [[110, null]], "polars.exceptions.SQLInterfaceError": [[111, null]], "polars.exceptions.SQLSyntaxError": [[112, null]], "polars.exceptions.SchemaError": [[113, null]], "polars.exceptions.SchemaFieldNotFoundError": [[114, null]], "polars.exceptions.ShapeError": [[115, null]], "polars.exceptions.StringCacheMismatchError": [[116, null]], "polars.exceptions.StructFieldNotFoundError": [[117, null]], "polars.exceptions.TooManyRowsReturnedError": [[118, null]], "polars.exceptions.UnstableWarning": [[119, null]], "polars.exceptions.UnsuitableSQLError": [[120, null]], "polars.exclude": [[750, null]], "polars.first": [[751, null]], "polars.fold": [[752, null]], "polars.format": [[753, null]], "polars.from_arrow": [[121, null]], "polars.from_dataframe": [[122, null]], "polars.from_dict": [[123, null]], "polars.from_dicts": [[124, null]], "polars.from_epoch": [[754, null]], "polars.from_numpy": [[125, null]], "polars.from_pandas": [[126, null]], "polars.from_records": [[127, null]], "polars.from_repr": [[128, null]], "polars.get_index_type": [[129, null]], "polars.groups": [[755, null]], "polars.head": [[756, null]], "polars.implode": [[757, null]], "polars.int_range": [[758, null]], "polars.int_ranges": [[759, null]], "polars.io.csv.batched_reader.BatchedCsvReader.next_batches": [[130, null]], "polars.json_normalize": [[131, null]], "polars.last": [[760, null]], "polars.lazyframe.engine_config.GPUEngine": [[891, null]], "polars.lazyframe.group_by.LazyGroupBy.agg": [[892, null]], "polars.lazyframe.group_by.LazyGroupBy.all": [[893, null]], "polars.lazyframe.group_by.LazyGroupBy.count": [[894, null]], "polars.lazyframe.group_by.LazyGroupBy.first": [[895, null]], "polars.lazyframe.group_by.LazyGroupBy.head": [[896, null]], "polars.lazyframe.group_by.LazyGroupBy.last": [[897, null]], "polars.lazyframe.group_by.LazyGroupBy.len": [[898, null]], "polars.lazyframe.group_by.LazyGroupBy.map_groups": [[899, null]], "polars.lazyframe.group_by.LazyGroupBy.max": [[900, null]], "polars.lazyframe.group_by.LazyGroupBy.mean": [[901, null]], "polars.lazyframe.group_by.LazyGroupBy.median": [[902, null]], "polars.lazyframe.group_by.LazyGroupBy.min": [[903, null]], "polars.lazyframe.group_by.LazyGroupBy.n_unique": [[904, null]], "polars.lazyframe.group_by.LazyGroupBy.quantile": [[905, null]], "polars.lazyframe.group_by.LazyGroupBy.sum": [[906, null]], "polars.lazyframe.group_by.LazyGroupBy.tail": [[907, null]], "polars.lazyframe.in_process.InProcessQuery.cancel": [[908, null]], "polars.lazyframe.in_process.InProcessQuery.fetch": [[909, null]], "polars.lazyframe.in_process.InProcessQuery.fetch_blocking": [[910, null]], "polars.len": [[761, null]], "polars.lit": [[762, null]], "polars.map_batches": [[763, null]], "polars.map_groups": [[764, null]], "polars.max": [[765, null]], "polars.max_horizontal": [[766, null]], "polars.mean": [[767, null]], "polars.mean_horizontal": [[768, null]], "polars.median": [[769, null]], "polars.min": [[770, null]], "polars.min_horizontal": [[771, null]], "polars.n_unique": [[772, null]], "polars.nth": [[773, null]], "polars.ones": [[774, null]], "polars.quantile": [[775, null]], "polars.read_avro": [[132, null]], "polars.read_clipboard": [[133, null]], "polars.read_csv": [[134, null]], "polars.read_csv_batched": [[135, null]], "polars.read_database": [[136, null]], "polars.read_database_uri": [[137, null]], "polars.read_delta": [[138, null]], "polars.read_excel": [[139, null]], "polars.read_ipc": [[140, null]], "polars.read_ipc_schema": [[141, null]], "polars.read_ipc_stream": [[142, null]], "polars.read_json": [[143, null]], "polars.read_ndjson": [[144, null]], "polars.read_ods": [[145, null]], "polars.read_parquet": [[146, null]], "polars.read_parquet_schema": [[147, null]], "polars.reduce": [[776, null]], "polars.repeat": [[777, null]], "polars.rolling_corr": [[778, null]], "polars.rolling_cov": [[779, null]], "polars.scan_csv": [[148, null]], "polars.scan_delta": [[149, null]], "polars.scan_iceberg": [[150, null]], "polars.scan_ipc": [[151, null]], "polars.scan_ndjson": [[152, null]], "polars.scan_parquet": [[153, null]], "polars.scan_pyarrow_dataset": [[154, null]], "polars.select": [[780, null]], "polars.set_random_seed": [[155, null]], "polars.show_versions": [[156, null]], "polars.sql": [[781, null]], "polars.sql_expr": [[782, null]], "polars.std": [[783, null]], "polars.struct": [[784, null]], "polars.sum": [[785, null]], "polars.sum_horizontal": [[786, null]], "polars.tail": [[787, null]], "polars.testing.assert_frame_equal": [[157, null]], "polars.testing.assert_frame_not_equal": [[158, null]], "polars.testing.assert_series_equal": [[159, null]], "polars.testing.assert_series_not_equal": [[160, null]], "polars.testing.parametric.column": [[161, null]], "polars.testing.parametric.columns": [[162, null]], "polars.testing.parametric.create_list_strategy": [[163, null]], "polars.testing.parametric.dataframes": [[164, null]], "polars.testing.parametric.dtypes": [[165, null]], "polars.testing.parametric.lists": [[166, null]], "polars.testing.parametric.load_profile": [[167, null]], "polars.testing.parametric.series": [[168, null]], "polars.testing.parametric.set_profile": [[169, null]], "polars.thread_pool_size": [[170, null]], "polars.threadpool_size": [[171, null]], "polars.time": [[788, null]], "polars.time_range": [[789, null]], "polars.time_ranges": [[790, null]], "polars.using_string_cache": [[172, null]], "polars.var": [[791, null]], "polars.when": [[792, null]], "polars.zeros": [[793, null]]}, "docnames": ["index", "reference/api", "reference/api/polars.Config.load", "reference/api/polars.Config.load_from_file", "reference/api/polars.Config.restore_defaults", "reference/api/polars.Config.save", "reference/api/polars.Config.save_to_file", "reference/api/polars.Config.set_ascii_tables", "reference/api/polars.Config.set_auto_structify", "reference/api/polars.Config.set_decimal_separator", "reference/api/polars.Config.set_float_precision", "reference/api/polars.Config.set_fmt_float", "reference/api/polars.Config.set_fmt_str_lengths", "reference/api/polars.Config.set_fmt_table_cell_list_len", "reference/api/polars.Config.set_streaming_chunk_size", "reference/api/polars.Config.set_tbl_cell_alignment", "reference/api/polars.Config.set_tbl_cell_numeric_alignment", "reference/api/polars.Config.set_tbl_cols", "reference/api/polars.Config.set_tbl_column_data_type_inline", "reference/api/polars.Config.set_tbl_dataframe_shape_below", "reference/api/polars.Config.set_tbl_formatting", "reference/api/polars.Config.set_tbl_hide_column_data_types", "reference/api/polars.Config.set_tbl_hide_column_names", "reference/api/polars.Config.set_tbl_hide_dataframe_shape", "reference/api/polars.Config.set_tbl_hide_dtype_separator", "reference/api/polars.Config.set_tbl_rows", "reference/api/polars.Config.set_tbl_width_chars", "reference/api/polars.Config.set_thousands_separator", "reference/api/polars.Config.set_trim_decimal_zeros", "reference/api/polars.Config.set_verbose", "reference/api/polars.Config.state", "reference/api/polars.CredentialProvider", "reference/api/polars.CredentialProviderAWS", "reference/api/polars.CredentialProviderGCP", "reference/api/polars.DataFrame.write_avro", "reference/api/polars.DataFrame.write_clipboard", "reference/api/polars.DataFrame.write_csv", "reference/api/polars.DataFrame.write_database", "reference/api/polars.DataFrame.write_delta", "reference/api/polars.DataFrame.write_excel", "reference/api/polars.DataFrame.write_ipc", "reference/api/polars.DataFrame.write_ipc_stream", "reference/api/polars.DataFrame.write_json", "reference/api/polars.DataFrame.write_ndjson", "reference/api/polars.DataFrame.write_parquet", "reference/api/polars.LazyFrame.sink_csv", "reference/api/polars.LazyFrame.sink_ipc", "reference/api/polars.LazyFrame.sink_ndjson", "reference/api/polars.LazyFrame.sink_parquet", "reference/api/polars.StringCache", "reference/api/polars.align_frames", "reference/api/polars.api.register_dataframe_namespace", "reference/api/polars.api.register_expr_namespace", "reference/api/polars.api.register_lazyframe_namespace", "reference/api/polars.api.register_series_namespace", "reference/api/polars.build_info", "reference/api/polars.collect_all", "reference/api/polars.collect_all_async", "reference/api/polars.concat", "reference/api/polars.datatypes.Array", "reference/api/polars.datatypes.Binary", "reference/api/polars.datatypes.Boolean", "reference/api/polars.datatypes.Categorical", "reference/api/polars.datatypes.DataType", "reference/api/polars.datatypes.Date", "reference/api/polars.datatypes.Datetime", "reference/api/polars.datatypes.Decimal", "reference/api/polars.datatypes.Duration", "reference/api/polars.datatypes.Enum", "reference/api/polars.datatypes.Float32", "reference/api/polars.datatypes.Float64", "reference/api/polars.datatypes.Int128", "reference/api/polars.datatypes.Int16", "reference/api/polars.datatypes.Int32", "reference/api/polars.datatypes.Int64", "reference/api/polars.datatypes.Int8", "reference/api/polars.datatypes.List", "reference/api/polars.datatypes.Null", "reference/api/polars.datatypes.Object", "reference/api/polars.datatypes.String", "reference/api/polars.datatypes.Struct", "reference/api/polars.datatypes.Time", "reference/api/polars.datatypes.UInt16", "reference/api/polars.datatypes.UInt32", "reference/api/polars.datatypes.UInt64", "reference/api/polars.datatypes.UInt8", "reference/api/polars.datatypes.Unknown", "reference/api/polars.datatypes.Utf8", "reference/api/polars.disable_string_cache", "reference/api/polars.enable_string_cache", "reference/api/polars.escape_regex", "reference/api/polars.exceptions.CategoricalRemappingWarning", "reference/api/polars.exceptions.ChronoFormatWarning", "reference/api/polars.exceptions.ColumnNotFoundError", "reference/api/polars.exceptions.ComputeError", "reference/api/polars.exceptions.CustomUFuncWarning", "reference/api/polars.exceptions.DataOrientationWarning", "reference/api/polars.exceptions.DuplicateError", "reference/api/polars.exceptions.InvalidOperationError", "reference/api/polars.exceptions.MapWithoutReturnDtypeWarning", "reference/api/polars.exceptions.ModuleUpgradeRequiredError", "reference/api/polars.exceptions.NoDataError", "reference/api/polars.exceptions.NoRowsReturnedError", "reference/api/polars.exceptions.OutOfBoundsError", "reference/api/polars.exceptions.PanicException", "reference/api/polars.exceptions.ParameterCollisionError", "reference/api/polars.exceptions.PerformanceWarning", "reference/api/polars.exceptions.PolarsError", "reference/api/polars.exceptions.PolarsInefficientMapWarning", "reference/api/polars.exceptions.PolarsWarning", "reference/api/polars.exceptions.RowsError", "reference/api/polars.exceptions.SQLInterfaceError", "reference/api/polars.exceptions.SQLSyntaxError", "reference/api/polars.exceptions.SchemaError", "reference/api/polars.exceptions.SchemaFieldNotFoundError", "reference/api/polars.exceptions.ShapeError", "reference/api/polars.exceptions.StringCacheMismatchError", "reference/api/polars.exceptions.StructFieldNotFoundError", "reference/api/polars.exceptions.TooManyRowsReturnedError", "reference/api/polars.exceptions.UnstableWarning", "reference/api/polars.exceptions.UnsuitableSQLError", "reference/api/polars.from_arrow", "reference/api/polars.from_dataframe", "reference/api/polars.from_dict", "reference/api/polars.from_dicts", "reference/api/polars.from_numpy", "reference/api/polars.from_pandas", "reference/api/polars.from_records", "reference/api/polars.from_repr", "reference/api/polars.get_index_type", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "reference/api/polars.json_normalize", "reference/api/polars.read_avro", "reference/api/polars.read_clipboard", "reference/api/polars.read_csv", "reference/api/polars.read_csv_batched", "reference/api/polars.read_database", "reference/api/polars.read_database_uri", "reference/api/polars.read_delta", "reference/api/polars.read_excel", "reference/api/polars.read_ipc", "reference/api/polars.read_ipc_schema", "reference/api/polars.read_ipc_stream", "reference/api/polars.read_json", "reference/api/polars.read_ndjson", "reference/api/polars.read_ods", "reference/api/polars.read_parquet", "reference/api/polars.read_parquet_schema", "reference/api/polars.scan_csv", "reference/api/polars.scan_delta", "reference/api/polars.scan_iceberg", "reference/api/polars.scan_ipc", "reference/api/polars.scan_ndjson", "reference/api/polars.scan_parquet", "reference/api/polars.scan_pyarrow_dataset", "reference/api/polars.set_random_seed", "reference/api/polars.show_versions", "reference/api/polars.testing.assert_frame_equal", "reference/api/polars.testing.assert_frame_not_equal", "reference/api/polars.testing.assert_series_equal", "reference/api/polars.testing.assert_series_not_equal", "reference/api/polars.testing.parametric.column", "reference/api/polars.testing.parametric.columns", "reference/api/polars.testing.parametric.create_list_strategy", "reference/api/polars.testing.parametric.dataframes", "reference/api/polars.testing.parametric.dtypes", "reference/api/polars.testing.parametric.lists", "reference/api/polars.testing.parametric.load_profile", "reference/api/polars.testing.parametric.series", "reference/api/polars.testing.parametric.set_profile", "reference/api/polars.thread_pool_size", "reference/api/polars.threadpool_size", "reference/api/polars.using_string_cache", "reference/config", "reference/dataframe/aggregation", "reference/dataframe/api/polars.DataFrame.__array__", "reference/dataframe/api/polars.DataFrame.__arrow_c_stream__", "reference/dataframe/api/polars.DataFrame.__dataframe__", "reference/dataframe/api/polars.DataFrame.__getitem__", "reference/dataframe/api/polars.DataFrame.approx_n_unique", "reference/dataframe/api/polars.DataFrame.bottom_k", "reference/dataframe/api/polars.DataFrame.cast", "reference/dataframe/api/polars.DataFrame.clear", "reference/dataframe/api/polars.DataFrame.clone", "reference/dataframe/api/polars.DataFrame.collect_schema", "reference/dataframe/api/polars.DataFrame.columns", "reference/dataframe/api/polars.DataFrame.corr", "reference/dataframe/api/polars.DataFrame.count", "reference/dataframe/api/polars.DataFrame.describe", "reference/dataframe/api/polars.DataFrame.deserialize", "reference/dataframe/api/polars.DataFrame.drop", "reference/dataframe/api/polars.DataFrame.drop_in_place", "reference/dataframe/api/polars.DataFrame.drop_nans", "reference/dataframe/api/polars.DataFrame.drop_nulls", "reference/dataframe/api/polars.DataFrame.dtypes", "reference/dataframe/api/polars.DataFrame.equals", "reference/dataframe/api/polars.DataFrame.estimated_size", "reference/dataframe/api/polars.DataFrame.explode", "reference/dataframe/api/polars.DataFrame.extend", "reference/dataframe/api/polars.DataFrame.fill_nan", "reference/dataframe/api/polars.DataFrame.fill_null", "reference/dataframe/api/polars.DataFrame.filter", "reference/dataframe/api/polars.DataFrame.flags", "reference/dataframe/api/polars.DataFrame.fold", "reference/dataframe/api/polars.DataFrame.gather_every", "reference/dataframe/api/polars.DataFrame.get_column", "reference/dataframe/api/polars.DataFrame.get_column_index", "reference/dataframe/api/polars.DataFrame.get_columns", "reference/dataframe/api/polars.DataFrame.glimpse", "reference/dataframe/api/polars.DataFrame.group_by", "reference/dataframe/api/polars.DataFrame.group_by_dynamic", "reference/dataframe/api/polars.DataFrame.hash_rows", "reference/dataframe/api/polars.DataFrame.head", "reference/dataframe/api/polars.DataFrame.height", "reference/dataframe/api/polars.DataFrame.hstack", "reference/dataframe/api/polars.DataFrame.insert_column", "reference/dataframe/api/polars.DataFrame.interpolate", "reference/dataframe/api/polars.DataFrame.is_duplicated", "reference/dataframe/api/polars.DataFrame.is_empty", "reference/dataframe/api/polars.DataFrame.is_unique", "reference/dataframe/api/polars.DataFrame.item", "reference/dataframe/api/polars.DataFrame.iter_columns", "reference/dataframe/api/polars.DataFrame.iter_rows", "reference/dataframe/api/polars.DataFrame.iter_slices", "reference/dataframe/api/polars.DataFrame.join", "reference/dataframe/api/polars.DataFrame.join_asof", "reference/dataframe/api/polars.DataFrame.join_where", "reference/dataframe/api/polars.DataFrame.lazy", "reference/dataframe/api/polars.DataFrame.limit", "reference/dataframe/api/polars.DataFrame.map_rows", "reference/dataframe/api/polars.DataFrame.max", "reference/dataframe/api/polars.DataFrame.max_horizontal", "reference/dataframe/api/polars.DataFrame.mean", "reference/dataframe/api/polars.DataFrame.mean_horizontal", "reference/dataframe/api/polars.DataFrame.median", "reference/dataframe/api/polars.DataFrame.melt", "reference/dataframe/api/polars.DataFrame.merge_sorted", "reference/dataframe/api/polars.DataFrame.min", "reference/dataframe/api/polars.DataFrame.min_horizontal", "reference/dataframe/api/polars.DataFrame.n_chunks", "reference/dataframe/api/polars.DataFrame.n_unique", "reference/dataframe/api/polars.DataFrame.null_count", "reference/dataframe/api/polars.DataFrame.partition_by", "reference/dataframe/api/polars.DataFrame.pipe", "reference/dataframe/api/polars.DataFrame.pivot", "reference/dataframe/api/polars.DataFrame.product", "reference/dataframe/api/polars.DataFrame.quantile", "reference/dataframe/api/polars.DataFrame.rechunk", "reference/dataframe/api/polars.DataFrame.rename", "reference/dataframe/api/polars.DataFrame.replace_column", "reference/dataframe/api/polars.DataFrame.reverse", "reference/dataframe/api/polars.DataFrame.rolling", "reference/dataframe/api/polars.DataFrame.row", "reference/dataframe/api/polars.DataFrame.rows", "reference/dataframe/api/polars.DataFrame.rows_by_key", "reference/dataframe/api/polars.DataFrame.sample", "reference/dataframe/api/polars.DataFrame.schema", "reference/dataframe/api/polars.DataFrame.select", "reference/dataframe/api/polars.DataFrame.select_seq", "reference/dataframe/api/polars.DataFrame.serialize", "reference/dataframe/api/polars.DataFrame.set_sorted", "reference/dataframe/api/polars.DataFrame.shape", "reference/dataframe/api/polars.DataFrame.shift", "reference/dataframe/api/polars.DataFrame.shrink_to_fit", "reference/dataframe/api/polars.DataFrame.slice", "reference/dataframe/api/polars.DataFrame.sort", "reference/dataframe/api/polars.DataFrame.sql", "reference/dataframe/api/polars.DataFrame.std", "reference/dataframe/api/polars.DataFrame.sum", "reference/dataframe/api/polars.DataFrame.sum_horizontal", "reference/dataframe/api/polars.DataFrame.tail", "reference/dataframe/api/polars.DataFrame.to_arrow", "reference/dataframe/api/polars.DataFrame.to_dict", "reference/dataframe/api/polars.DataFrame.to_dicts", "reference/dataframe/api/polars.DataFrame.to_dummies", "reference/dataframe/api/polars.DataFrame.to_init_repr", "reference/dataframe/api/polars.DataFrame.to_jax", "reference/dataframe/api/polars.DataFrame.to_numpy", "reference/dataframe/api/polars.DataFrame.to_pandas", "reference/dataframe/api/polars.DataFrame.to_series", "reference/dataframe/api/polars.DataFrame.to_struct", "reference/dataframe/api/polars.DataFrame.to_torch", "reference/dataframe/api/polars.DataFrame.top_k", "reference/dataframe/api/polars.DataFrame.transpose", "reference/dataframe/api/polars.DataFrame.unique", "reference/dataframe/api/polars.DataFrame.unnest", "reference/dataframe/api/polars.DataFrame.unpivot", "reference/dataframe/api/polars.DataFrame.unstack", "reference/dataframe/api/polars.DataFrame.update", "reference/dataframe/api/polars.DataFrame.upsample", "reference/dataframe/api/polars.DataFrame.var", "reference/dataframe/api/polars.DataFrame.vstack", "reference/dataframe/api/polars.DataFrame.width", "reference/dataframe/api/polars.DataFrame.with_columns", "reference/dataframe/api/polars.DataFrame.with_columns_seq", "reference/dataframe/api/polars.DataFrame.with_row_count", "reference/dataframe/api/polars.DataFrame.with_row_index", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.__iter__", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.agg", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.all", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.count", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.first", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.head", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.last", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.len", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.map_groups", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.max", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.mean", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.median", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.min", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.n_unique", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.quantile", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.sum", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.tail", "reference/dataframe/attributes", "reference/dataframe/computation", "reference/dataframe/descriptive", "reference/dataframe/export", "reference/dataframe/group_by", "reference/dataframe/index", "reference/dataframe/miscellaneous", "reference/dataframe/modify_select", "reference/dataframe/plot", "reference/dataframe/style", "reference/datatypes", "reference/exceptions", "reference/expressions/aggregation", "reference/expressions/api/polars.Expr.abs", "reference/expressions/api/polars.Expr.add", "reference/expressions/api/polars.Expr.agg_groups", "reference/expressions/api/polars.Expr.alias", "reference/expressions/api/polars.Expr.all", "reference/expressions/api/polars.Expr.and_", "reference/expressions/api/polars.Expr.any", "reference/expressions/api/polars.Expr.append", "reference/expressions/api/polars.Expr.approx_n_unique", "reference/expressions/api/polars.Expr.arccos", "reference/expressions/api/polars.Expr.arccosh", "reference/expressions/api/polars.Expr.arcsin", "reference/expressions/api/polars.Expr.arcsinh", "reference/expressions/api/polars.Expr.arctan", "reference/expressions/api/polars.Expr.arctanh", "reference/expressions/api/polars.Expr.arg_max", "reference/expressions/api/polars.Expr.arg_min", "reference/expressions/api/polars.Expr.arg_sort", "reference/expressions/api/polars.Expr.arg_true", "reference/expressions/api/polars.Expr.arg_unique", "reference/expressions/api/polars.Expr.arr.all", "reference/expressions/api/polars.Expr.arr.any", "reference/expressions/api/polars.Expr.arr.arg_max", "reference/expressions/api/polars.Expr.arr.arg_min", "reference/expressions/api/polars.Expr.arr.contains", "reference/expressions/api/polars.Expr.arr.count_matches", "reference/expressions/api/polars.Expr.arr.explode", "reference/expressions/api/polars.Expr.arr.first", "reference/expressions/api/polars.Expr.arr.get", "reference/expressions/api/polars.Expr.arr.join", "reference/expressions/api/polars.Expr.arr.last", "reference/expressions/api/polars.Expr.arr.max", "reference/expressions/api/polars.Expr.arr.median", "reference/expressions/api/polars.Expr.arr.min", "reference/expressions/api/polars.Expr.arr.n_unique", "reference/expressions/api/polars.Expr.arr.reverse", "reference/expressions/api/polars.Expr.arr.shift", "reference/expressions/api/polars.Expr.arr.sort", "reference/expressions/api/polars.Expr.arr.std", "reference/expressions/api/polars.Expr.arr.sum", "reference/expressions/api/polars.Expr.arr.to_list", "reference/expressions/api/polars.Expr.arr.to_struct", "reference/expressions/api/polars.Expr.arr.unique", "reference/expressions/api/polars.Expr.arr.var", "reference/expressions/api/polars.Expr.backward_fill", "reference/expressions/api/polars.Expr.bin.contains", "reference/expressions/api/polars.Expr.bin.decode", "reference/expressions/api/polars.Expr.bin.encode", "reference/expressions/api/polars.Expr.bin.ends_with", "reference/expressions/api/polars.Expr.bin.size", "reference/expressions/api/polars.Expr.bin.starts_with", "reference/expressions/api/polars.Expr.bitwise_and", "reference/expressions/api/polars.Expr.bitwise_count_ones", "reference/expressions/api/polars.Expr.bitwise_count_zeros", "reference/expressions/api/polars.Expr.bitwise_leading_ones", "reference/expressions/api/polars.Expr.bitwise_leading_zeros", "reference/expressions/api/polars.Expr.bitwise_or", "reference/expressions/api/polars.Expr.bitwise_trailing_ones", "reference/expressions/api/polars.Expr.bitwise_trailing_zeros", "reference/expressions/api/polars.Expr.bitwise_xor", "reference/expressions/api/polars.Expr.bottom_k", "reference/expressions/api/polars.Expr.bottom_k_by", "reference/expressions/api/polars.Expr.cast", "reference/expressions/api/polars.Expr.cat.get_categories", "reference/expressions/api/polars.Expr.cat.len_bytes", "reference/expressions/api/polars.Expr.cat.len_chars", "reference/expressions/api/polars.Expr.cbrt", "reference/expressions/api/polars.Expr.ceil", "reference/expressions/api/polars.Expr.clip", "reference/expressions/api/polars.Expr.cos", "reference/expressions/api/polars.Expr.cosh", "reference/expressions/api/polars.Expr.cot", "reference/expressions/api/polars.Expr.count", "reference/expressions/api/polars.Expr.cum_count", "reference/expressions/api/polars.Expr.cum_max", "reference/expressions/api/polars.Expr.cum_min", "reference/expressions/api/polars.Expr.cum_prod", "reference/expressions/api/polars.Expr.cum_sum", "reference/expressions/api/polars.Expr.cumulative_eval", "reference/expressions/api/polars.Expr.cut", "reference/expressions/api/polars.Expr.degrees", "reference/expressions/api/polars.Expr.deserialize", "reference/expressions/api/polars.Expr.diff", "reference/expressions/api/polars.Expr.dot", "reference/expressions/api/polars.Expr.drop_nans", "reference/expressions/api/polars.Expr.drop_nulls", "reference/expressions/api/polars.Expr.dt.add_business_days", "reference/expressions/api/polars.Expr.dt.base_utc_offset", "reference/expressions/api/polars.Expr.dt.cast_time_unit", "reference/expressions/api/polars.Expr.dt.century", "reference/expressions/api/polars.Expr.dt.combine", "reference/expressions/api/polars.Expr.dt.convert_time_zone", "reference/expressions/api/polars.Expr.dt.date", "reference/expressions/api/polars.Expr.dt.datetime", "reference/expressions/api/polars.Expr.dt.day", "reference/expressions/api/polars.Expr.dt.dst_offset", "reference/expressions/api/polars.Expr.dt.epoch", "reference/expressions/api/polars.Expr.dt.hour", "reference/expressions/api/polars.Expr.dt.is_leap_year", "reference/expressions/api/polars.Expr.dt.iso_year", "reference/expressions/api/polars.Expr.dt.microsecond", "reference/expressions/api/polars.Expr.dt.millennium", "reference/expressions/api/polars.Expr.dt.millisecond", "reference/expressions/api/polars.Expr.dt.minute", "reference/expressions/api/polars.Expr.dt.month", "reference/expressions/api/polars.Expr.dt.month_end", "reference/expressions/api/polars.Expr.dt.month_start", "reference/expressions/api/polars.Expr.dt.nanosecond", "reference/expressions/api/polars.Expr.dt.offset_by", "reference/expressions/api/polars.Expr.dt.ordinal_day", "reference/expressions/api/polars.Expr.dt.quarter", "reference/expressions/api/polars.Expr.dt.replace_time_zone", "reference/expressions/api/polars.Expr.dt.round", "reference/expressions/api/polars.Expr.dt.second", "reference/expressions/api/polars.Expr.dt.strftime", "reference/expressions/api/polars.Expr.dt.time", "reference/expressions/api/polars.Expr.dt.timestamp", "reference/expressions/api/polars.Expr.dt.to_string", "reference/expressions/api/polars.Expr.dt.total_days", "reference/expressions/api/polars.Expr.dt.total_hours", "reference/expressions/api/polars.Expr.dt.total_microseconds", "reference/expressions/api/polars.Expr.dt.total_milliseconds", "reference/expressions/api/polars.Expr.dt.total_minutes", "reference/expressions/api/polars.Expr.dt.total_nanoseconds", "reference/expressions/api/polars.Expr.dt.total_seconds", "reference/expressions/api/polars.Expr.dt.truncate", "reference/expressions/api/polars.Expr.dt.week", "reference/expressions/api/polars.Expr.dt.weekday", "reference/expressions/api/polars.Expr.dt.with_time_unit", "reference/expressions/api/polars.Expr.dt.year", "reference/expressions/api/polars.Expr.entropy", "reference/expressions/api/polars.Expr.eq", "reference/expressions/api/polars.Expr.eq_missing", "reference/expressions/api/polars.Expr.ewm_mean", "reference/expressions/api/polars.Expr.ewm_mean_by", "reference/expressions/api/polars.Expr.ewm_std", "reference/expressions/api/polars.Expr.ewm_var", "reference/expressions/api/polars.Expr.exclude", "reference/expressions/api/polars.Expr.exp", "reference/expressions/api/polars.Expr.explode", "reference/expressions/api/polars.Expr.extend_constant", "reference/expressions/api/polars.Expr.fill_nan", "reference/expressions/api/polars.Expr.fill_null", "reference/expressions/api/polars.Expr.filter", "reference/expressions/api/polars.Expr.first", "reference/expressions/api/polars.Expr.flatten", "reference/expressions/api/polars.Expr.floor", "reference/expressions/api/polars.Expr.floordiv", "reference/expressions/api/polars.Expr.forward_fill", "reference/expressions/api/polars.Expr.from_json", "reference/expressions/api/polars.Expr.gather", "reference/expressions/api/polars.Expr.gather_every", "reference/expressions/api/polars.Expr.ge", "reference/expressions/api/polars.Expr.get", "reference/expressions/api/polars.Expr.gt", "reference/expressions/api/polars.Expr.has_nulls", "reference/expressions/api/polars.Expr.hash", "reference/expressions/api/polars.Expr.head", "reference/expressions/api/polars.Expr.hist", "reference/expressions/api/polars.Expr.implode", "reference/expressions/api/polars.Expr.inspect", "reference/expressions/api/polars.Expr.interpolate", "reference/expressions/api/polars.Expr.interpolate_by", "reference/expressions/api/polars.Expr.is_between", "reference/expressions/api/polars.Expr.is_duplicated", "reference/expressions/api/polars.Expr.is_finite", "reference/expressions/api/polars.Expr.is_first_distinct", "reference/expressions/api/polars.Expr.is_in", "reference/expressions/api/polars.Expr.is_infinite", "reference/expressions/api/polars.Expr.is_last_distinct", "reference/expressions/api/polars.Expr.is_nan", "reference/expressions/api/polars.Expr.is_not_nan", "reference/expressions/api/polars.Expr.is_not_null", "reference/expressions/api/polars.Expr.is_null", "reference/expressions/api/polars.Expr.is_unique", "reference/expressions/api/polars.Expr.kurtosis", "reference/expressions/api/polars.Expr.last", "reference/expressions/api/polars.Expr.le", "reference/expressions/api/polars.Expr.len", "reference/expressions/api/polars.Expr.limit", "reference/expressions/api/polars.Expr.list.all", "reference/expressions/api/polars.Expr.list.any", "reference/expressions/api/polars.Expr.list.arg_max", "reference/expressions/api/polars.Expr.list.arg_min", "reference/expressions/api/polars.Expr.list.concat", "reference/expressions/api/polars.Expr.list.contains", "reference/expressions/api/polars.Expr.list.count_matches", "reference/expressions/api/polars.Expr.list.diff", "reference/expressions/api/polars.Expr.list.drop_nulls", "reference/expressions/api/polars.Expr.list.eval", "reference/expressions/api/polars.Expr.list.explode", "reference/expressions/api/polars.Expr.list.first", "reference/expressions/api/polars.Expr.list.gather", "reference/expressions/api/polars.Expr.list.gather_every", "reference/expressions/api/polars.Expr.list.get", "reference/expressions/api/polars.Expr.list.head", "reference/expressions/api/polars.Expr.list.join", "reference/expressions/api/polars.Expr.list.last", "reference/expressions/api/polars.Expr.list.len", "reference/expressions/api/polars.Expr.list.max", "reference/expressions/api/polars.Expr.list.mean", "reference/expressions/api/polars.Expr.list.median", "reference/expressions/api/polars.Expr.list.min", "reference/expressions/api/polars.Expr.list.n_unique", "reference/expressions/api/polars.Expr.list.reverse", "reference/expressions/api/polars.Expr.list.sample", "reference/expressions/api/polars.Expr.list.set_difference", "reference/expressions/api/polars.Expr.list.set_intersection", "reference/expressions/api/polars.Expr.list.set_symmetric_difference", "reference/expressions/api/polars.Expr.list.set_union", "reference/expressions/api/polars.Expr.list.shift", "reference/expressions/api/polars.Expr.list.slice", "reference/expressions/api/polars.Expr.list.sort", "reference/expressions/api/polars.Expr.list.std", "reference/expressions/api/polars.Expr.list.sum", "reference/expressions/api/polars.Expr.list.tail", "reference/expressions/api/polars.Expr.list.to_array", "reference/expressions/api/polars.Expr.list.to_struct", "reference/expressions/api/polars.Expr.list.unique", "reference/expressions/api/polars.Expr.list.var", "reference/expressions/api/polars.Expr.log", "reference/expressions/api/polars.Expr.log10", "reference/expressions/api/polars.Expr.log1p", "reference/expressions/api/polars.Expr.lower_bound", "reference/expressions/api/polars.Expr.lt", "reference/expressions/api/polars.Expr.map_batches", "reference/expressions/api/polars.Expr.map_elements", "reference/expressions/api/polars.Expr.max", "reference/expressions/api/polars.Expr.mean", "reference/expressions/api/polars.Expr.median", "reference/expressions/api/polars.Expr.meta.eq", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs", "reference/expressions/api/polars.Expr.meta.is_column", "reference/expressions/api/polars.Expr.meta.is_column_selection", "reference/expressions/api/polars.Expr.meta.is_literal", "reference/expressions/api/polars.Expr.meta.is_regex_projection", "reference/expressions/api/polars.Expr.meta.ne", "reference/expressions/api/polars.Expr.meta.output_name", "reference/expressions/api/polars.Expr.meta.pop", "reference/expressions/api/polars.Expr.meta.root_names", "reference/expressions/api/polars.Expr.meta.serialize", "reference/expressions/api/polars.Expr.meta.show_graph", "reference/expressions/api/polars.Expr.meta.tree_format", "reference/expressions/api/polars.Expr.meta.undo_aliases", "reference/expressions/api/polars.Expr.meta.write_json", "reference/expressions/api/polars.Expr.min", "reference/expressions/api/polars.Expr.mod", "reference/expressions/api/polars.Expr.mode", "reference/expressions/api/polars.Expr.mul", "reference/expressions/api/polars.Expr.n_unique", "reference/expressions/api/polars.Expr.name.keep", "reference/expressions/api/polars.Expr.name.map", "reference/expressions/api/polars.Expr.name.map_fields", "reference/expressions/api/polars.Expr.name.prefix", "reference/expressions/api/polars.Expr.name.prefix_fields", "reference/expressions/api/polars.Expr.name.suffix", "reference/expressions/api/polars.Expr.name.suffix_fields", "reference/expressions/api/polars.Expr.name.to_lowercase", "reference/expressions/api/polars.Expr.name.to_uppercase", "reference/expressions/api/polars.Expr.nan_max", "reference/expressions/api/polars.Expr.nan_min", "reference/expressions/api/polars.Expr.ne", "reference/expressions/api/polars.Expr.ne_missing", "reference/expressions/api/polars.Expr.neg", "reference/expressions/api/polars.Expr.not_", "reference/expressions/api/polars.Expr.null_count", "reference/expressions/api/polars.Expr.or_", "reference/expressions/api/polars.Expr.over", "reference/expressions/api/polars.Expr.pct_change", "reference/expressions/api/polars.Expr.peak_max", "reference/expressions/api/polars.Expr.peak_min", "reference/expressions/api/polars.Expr.pipe", "reference/expressions/api/polars.Expr.pow", "reference/expressions/api/polars.Expr.product", "reference/expressions/api/polars.Expr.qcut", "reference/expressions/api/polars.Expr.quantile", "reference/expressions/api/polars.Expr.radians", "reference/expressions/api/polars.Expr.rank", "reference/expressions/api/polars.Expr.rechunk", "reference/expressions/api/polars.Expr.reinterpret", "reference/expressions/api/polars.Expr.repeat_by", "reference/expressions/api/polars.Expr.replace", "reference/expressions/api/polars.Expr.replace_strict", "reference/expressions/api/polars.Expr.reshape", "reference/expressions/api/polars.Expr.reverse", "reference/expressions/api/polars.Expr.rle", "reference/expressions/api/polars.Expr.rle_id", "reference/expressions/api/polars.Expr.rolling", "reference/expressions/api/polars.Expr.rolling_map", "reference/expressions/api/polars.Expr.rolling_max", "reference/expressions/api/polars.Expr.rolling_max_by", "reference/expressions/api/polars.Expr.rolling_mean", "reference/expressions/api/polars.Expr.rolling_mean_by", "reference/expressions/api/polars.Expr.rolling_median", "reference/expressions/api/polars.Expr.rolling_median_by", "reference/expressions/api/polars.Expr.rolling_min", "reference/expressions/api/polars.Expr.rolling_min_by", "reference/expressions/api/polars.Expr.rolling_quantile", "reference/expressions/api/polars.Expr.rolling_quantile_by", "reference/expressions/api/polars.Expr.rolling_skew", "reference/expressions/api/polars.Expr.rolling_std", "reference/expressions/api/polars.Expr.rolling_std_by", "reference/expressions/api/polars.Expr.rolling_sum", "reference/expressions/api/polars.Expr.rolling_sum_by", "reference/expressions/api/polars.Expr.rolling_var", "reference/expressions/api/polars.Expr.rolling_var_by", "reference/expressions/api/polars.Expr.round", "reference/expressions/api/polars.Expr.round_sig_figs", "reference/expressions/api/polars.Expr.sample", "reference/expressions/api/polars.Expr.search_sorted", "reference/expressions/api/polars.Expr.set_sorted", "reference/expressions/api/polars.Expr.shift", "reference/expressions/api/polars.Expr.shrink_dtype", "reference/expressions/api/polars.Expr.shuffle", "reference/expressions/api/polars.Expr.sign", "reference/expressions/api/polars.Expr.sin", "reference/expressions/api/polars.Expr.sinh", "reference/expressions/api/polars.Expr.skew", "reference/expressions/api/polars.Expr.slice", "reference/expressions/api/polars.Expr.sort", "reference/expressions/api/polars.Expr.sort_by", "reference/expressions/api/polars.Expr.sqrt", "reference/expressions/api/polars.Expr.std", "reference/expressions/api/polars.Expr.str.concat", "reference/expressions/api/polars.Expr.str.contains", "reference/expressions/api/polars.Expr.str.contains_any", "reference/expressions/api/polars.Expr.str.count_matches", "reference/expressions/api/polars.Expr.str.decode", "reference/expressions/api/polars.Expr.str.encode", "reference/expressions/api/polars.Expr.str.ends_with", "reference/expressions/api/polars.Expr.str.escape_regex", "reference/expressions/api/polars.Expr.str.explode", "reference/expressions/api/polars.Expr.str.extract", "reference/expressions/api/polars.Expr.str.extract_all", "reference/expressions/api/polars.Expr.str.extract_groups", "reference/expressions/api/polars.Expr.str.extract_many", "reference/expressions/api/polars.Expr.str.find", "reference/expressions/api/polars.Expr.str.find_many", "reference/expressions/api/polars.Expr.str.head", "reference/expressions/api/polars.Expr.str.join", "reference/expressions/api/polars.Expr.str.json_decode", "reference/expressions/api/polars.Expr.str.json_path_match", "reference/expressions/api/polars.Expr.str.len_bytes", "reference/expressions/api/polars.Expr.str.len_chars", "reference/expressions/api/polars.Expr.str.pad_end", "reference/expressions/api/polars.Expr.str.pad_start", "reference/expressions/api/polars.Expr.str.replace", "reference/expressions/api/polars.Expr.str.replace_all", "reference/expressions/api/polars.Expr.str.replace_many", "reference/expressions/api/polars.Expr.str.reverse", "reference/expressions/api/polars.Expr.str.slice", "reference/expressions/api/polars.Expr.str.split", "reference/expressions/api/polars.Expr.str.split_exact", "reference/expressions/api/polars.Expr.str.splitn", "reference/expressions/api/polars.Expr.str.starts_with", "reference/expressions/api/polars.Expr.str.strip_chars", "reference/expressions/api/polars.Expr.str.strip_chars_end", "reference/expressions/api/polars.Expr.str.strip_chars_start", "reference/expressions/api/polars.Expr.str.strip_prefix", "reference/expressions/api/polars.Expr.str.strip_suffix", "reference/expressions/api/polars.Expr.str.strptime", "reference/expressions/api/polars.Expr.str.tail", "reference/expressions/api/polars.Expr.str.to_date", "reference/expressions/api/polars.Expr.str.to_datetime", "reference/expressions/api/polars.Expr.str.to_decimal", "reference/expressions/api/polars.Expr.str.to_integer", "reference/expressions/api/polars.Expr.str.to_lowercase", "reference/expressions/api/polars.Expr.str.to_time", "reference/expressions/api/polars.Expr.str.to_titlecase", "reference/expressions/api/polars.Expr.str.to_uppercase", "reference/expressions/api/polars.Expr.str.zfill", "reference/expressions/api/polars.Expr.struct.field", "reference/expressions/api/polars.Expr.struct.json_encode", "reference/expressions/api/polars.Expr.struct.rename_fields", "reference/expressions/api/polars.Expr.struct.unnest", "reference/expressions/api/polars.Expr.struct.with_fields", "reference/expressions/api/polars.Expr.sub", "reference/expressions/api/polars.Expr.sum", "reference/expressions/api/polars.Expr.tail", "reference/expressions/api/polars.Expr.tan", "reference/expressions/api/polars.Expr.tanh", "reference/expressions/api/polars.Expr.to_physical", "reference/expressions/api/polars.Expr.top_k", "reference/expressions/api/polars.Expr.top_k_by", "reference/expressions/api/polars.Expr.truediv", "reference/expressions/api/polars.Expr.unique", "reference/expressions/api/polars.Expr.unique_counts", "reference/expressions/api/polars.Expr.upper_bound", "reference/expressions/api/polars.Expr.value_counts", "reference/expressions/api/polars.Expr.var", "reference/expressions/api/polars.Expr.where", "reference/expressions/api/polars.Expr.xor", "reference/expressions/api/polars.all", "reference/expressions/api/polars.all_horizontal", "reference/expressions/api/polars.any", "reference/expressions/api/polars.any_horizontal", "reference/expressions/api/polars.approx_n_unique", "reference/expressions/api/polars.arange", "reference/expressions/api/polars.arctan2", "reference/expressions/api/polars.arctan2d", "reference/expressions/api/polars.arg_sort_by", "reference/expressions/api/polars.arg_where", "reference/expressions/api/polars.business_day_count", "reference/expressions/api/polars.coalesce", "reference/expressions/api/polars.concat_arr", "reference/expressions/api/polars.concat_list", "reference/expressions/api/polars.concat_str", "reference/expressions/api/polars.corr", "reference/expressions/api/polars.count", "reference/expressions/api/polars.cov", "reference/expressions/api/polars.cum_count", "reference/expressions/api/polars.cum_fold", "reference/expressions/api/polars.cum_reduce", "reference/expressions/api/polars.cum_sum", "reference/expressions/api/polars.cum_sum_horizontal", "reference/expressions/api/polars.date", "reference/expressions/api/polars.date_range", "reference/expressions/api/polars.date_ranges", "reference/expressions/api/polars.datetime", "reference/expressions/api/polars.datetime_range", "reference/expressions/api/polars.datetime_ranges", "reference/expressions/api/polars.duration", "reference/expressions/api/polars.element", "reference/expressions/api/polars.exclude", "reference/expressions/api/polars.first", "reference/expressions/api/polars.fold", "reference/expressions/api/polars.format", "reference/expressions/api/polars.from_epoch", "reference/expressions/api/polars.groups", "reference/expressions/api/polars.head", "reference/expressions/api/polars.implode", "reference/expressions/api/polars.int_range", "reference/expressions/api/polars.int_ranges", "reference/expressions/api/polars.last", "reference/expressions/api/polars.len", "reference/expressions/api/polars.lit", "reference/expressions/api/polars.map_batches", "reference/expressions/api/polars.map_groups", "reference/expressions/api/polars.max", "reference/expressions/api/polars.max_horizontal", "reference/expressions/api/polars.mean", "reference/expressions/api/polars.mean_horizontal", "reference/expressions/api/polars.median", "reference/expressions/api/polars.min", "reference/expressions/api/polars.min_horizontal", "reference/expressions/api/polars.n_unique", "reference/expressions/api/polars.nth", "reference/expressions/api/polars.ones", "reference/expressions/api/polars.quantile", "reference/expressions/api/polars.reduce", "reference/expressions/api/polars.repeat", "reference/expressions/api/polars.rolling_corr", "reference/expressions/api/polars.rolling_cov", "reference/expressions/api/polars.select", "reference/expressions/api/polars.sql", "reference/expressions/api/polars.sql_expr", "reference/expressions/api/polars.std", "reference/expressions/api/polars.struct", "reference/expressions/api/polars.sum", "reference/expressions/api/polars.sum_horizontal", "reference/expressions/api/polars.tail", "reference/expressions/api/polars.time", "reference/expressions/api/polars.time_range", "reference/expressions/api/polars.time_ranges", "reference/expressions/api/polars.var", "reference/expressions/api/polars.when", "reference/expressions/api/polars.zeros", "reference/expressions/array", "reference/expressions/binary", "reference/expressions/boolean", "reference/expressions/categories", "reference/expressions/col", "reference/expressions/columns", "reference/expressions/computation", "reference/expressions/functions", "reference/expressions/index", "reference/expressions/list", "reference/expressions/meta", "reference/expressions/miscellaneous", "reference/expressions/modify_select", "reference/expressions/name", "reference/expressions/operators", "reference/expressions/string", "reference/expressions/struct", "reference/expressions/temporal", "reference/expressions/window", "reference/functions", "reference/index", "reference/io", "reference/lazyframe/aggregation", "reference/lazyframe/api/polars.LazyFrame.approx_n_unique", "reference/lazyframe/api/polars.LazyFrame.bottom_k", "reference/lazyframe/api/polars.LazyFrame.cache", "reference/lazyframe/api/polars.LazyFrame.cast", "reference/lazyframe/api/polars.LazyFrame.clear", "reference/lazyframe/api/polars.LazyFrame.clone", "reference/lazyframe/api/polars.LazyFrame.collect", "reference/lazyframe/api/polars.LazyFrame.collect_async", "reference/lazyframe/api/polars.LazyFrame.collect_schema", "reference/lazyframe/api/polars.LazyFrame.columns", "reference/lazyframe/api/polars.LazyFrame.count", "reference/lazyframe/api/polars.LazyFrame.describe", "reference/lazyframe/api/polars.LazyFrame.deserialize", "reference/lazyframe/api/polars.LazyFrame.drop", "reference/lazyframe/api/polars.LazyFrame.drop_nans", "reference/lazyframe/api/polars.LazyFrame.drop_nulls", "reference/lazyframe/api/polars.LazyFrame.dtypes", "reference/lazyframe/api/polars.LazyFrame.explain", "reference/lazyframe/api/polars.LazyFrame.explode", "reference/lazyframe/api/polars.LazyFrame.fill_nan", "reference/lazyframe/api/polars.LazyFrame.fill_null", "reference/lazyframe/api/polars.LazyFrame.filter", "reference/lazyframe/api/polars.LazyFrame.first", "reference/lazyframe/api/polars.LazyFrame.gather_every", "reference/lazyframe/api/polars.LazyFrame.group_by", "reference/lazyframe/api/polars.LazyFrame.group_by_dynamic", "reference/lazyframe/api/polars.LazyFrame.head", "reference/lazyframe/api/polars.LazyFrame.inspect", "reference/lazyframe/api/polars.LazyFrame.interpolate", "reference/lazyframe/api/polars.LazyFrame.join", "reference/lazyframe/api/polars.LazyFrame.join_asof", "reference/lazyframe/api/polars.LazyFrame.join_where", "reference/lazyframe/api/polars.LazyFrame.last", "reference/lazyframe/api/polars.LazyFrame.lazy", "reference/lazyframe/api/polars.LazyFrame.limit", "reference/lazyframe/api/polars.LazyFrame.map_batches", "reference/lazyframe/api/polars.LazyFrame.max", "reference/lazyframe/api/polars.LazyFrame.mean", "reference/lazyframe/api/polars.LazyFrame.median", "reference/lazyframe/api/polars.LazyFrame.melt", "reference/lazyframe/api/polars.LazyFrame.merge_sorted", "reference/lazyframe/api/polars.LazyFrame.min", "reference/lazyframe/api/polars.LazyFrame.null_count", "reference/lazyframe/api/polars.LazyFrame.pipe", "reference/lazyframe/api/polars.LazyFrame.profile", "reference/lazyframe/api/polars.LazyFrame.quantile", "reference/lazyframe/api/polars.LazyFrame.rename", "reference/lazyframe/api/polars.LazyFrame.reverse", "reference/lazyframe/api/polars.LazyFrame.rolling", "reference/lazyframe/api/polars.LazyFrame.schema", "reference/lazyframe/api/polars.LazyFrame.select", "reference/lazyframe/api/polars.LazyFrame.select_seq", "reference/lazyframe/api/polars.LazyFrame.serialize", "reference/lazyframe/api/polars.LazyFrame.set_sorted", "reference/lazyframe/api/polars.LazyFrame.shift", "reference/lazyframe/api/polars.LazyFrame.show_graph", "reference/lazyframe/api/polars.LazyFrame.slice", "reference/lazyframe/api/polars.LazyFrame.sort", "reference/lazyframe/api/polars.LazyFrame.sql", "reference/lazyframe/api/polars.LazyFrame.std", "reference/lazyframe/api/polars.LazyFrame.sum", "reference/lazyframe/api/polars.LazyFrame.tail", "reference/lazyframe/api/polars.LazyFrame.top_k", "reference/lazyframe/api/polars.LazyFrame.unique", "reference/lazyframe/api/polars.LazyFrame.unnest", "reference/lazyframe/api/polars.LazyFrame.unpivot", "reference/lazyframe/api/polars.LazyFrame.update", "reference/lazyframe/api/polars.LazyFrame.var", "reference/lazyframe/api/polars.LazyFrame.width", "reference/lazyframe/api/polars.LazyFrame.with_columns", "reference/lazyframe/api/polars.LazyFrame.with_columns_seq", "reference/lazyframe/api/polars.LazyFrame.with_context", "reference/lazyframe/api/polars.LazyFrame.with_row_count", "reference/lazyframe/api/polars.LazyFrame.with_row_index", "reference/lazyframe/api/polars.lazyframe.engine_config.GPUEngine", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.agg", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.all", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.count", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.first", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.head", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.last", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.len", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.map_groups", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.max", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.mean", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.median", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.min", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.n_unique", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.quantile", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.sum", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.tail", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.cancel", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.fetch", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.fetch_blocking", "reference/lazyframe/attributes", "reference/lazyframe/descriptive", "reference/lazyframe/gpu_engine", "reference/lazyframe/group_by", "reference/lazyframe/in_process", "reference/lazyframe/index", "reference/lazyframe/miscellaneous", "reference/lazyframe/modify_select", "reference/metadata", "reference/plugins", "reference/schema/index", "reference/selectors", "reference/series/aggregation", "reference/series/api/polars.Series.__array__", "reference/series/api/polars.Series.__arrow_c_stream__", "reference/series/api/polars.Series.__getitem__", "reference/series/api/polars.Series.abs", "reference/series/api/polars.Series.alias", "reference/series/api/polars.Series.all", "reference/series/api/polars.Series.any", "reference/series/api/polars.Series.append", "reference/series/api/polars.Series.approx_n_unique", "reference/series/api/polars.Series.arccos", "reference/series/api/polars.Series.arccosh", "reference/series/api/polars.Series.arcsin", "reference/series/api/polars.Series.arcsinh", "reference/series/api/polars.Series.arctan", "reference/series/api/polars.Series.arctanh", "reference/series/api/polars.Series.arg_max", "reference/series/api/polars.Series.arg_min", "reference/series/api/polars.Series.arg_sort", "reference/series/api/polars.Series.arg_true", "reference/series/api/polars.Series.arg_unique", "reference/series/api/polars.Series.arr.all", "reference/series/api/polars.Series.arr.any", "reference/series/api/polars.Series.arr.arg_max", "reference/series/api/polars.Series.arr.arg_min", "reference/series/api/polars.Series.arr.contains", "reference/series/api/polars.Series.arr.count_matches", "reference/series/api/polars.Series.arr.explode", "reference/series/api/polars.Series.arr.first", "reference/series/api/polars.Series.arr.get", "reference/series/api/polars.Series.arr.join", "reference/series/api/polars.Series.arr.last", "reference/series/api/polars.Series.arr.max", "reference/series/api/polars.Series.arr.median", "reference/series/api/polars.Series.arr.min", "reference/series/api/polars.Series.arr.n_unique", "reference/series/api/polars.Series.arr.reverse", "reference/series/api/polars.Series.arr.shift", "reference/series/api/polars.Series.arr.sort", "reference/series/api/polars.Series.arr.std", "reference/series/api/polars.Series.arr.sum", "reference/series/api/polars.Series.arr.to_list", "reference/series/api/polars.Series.arr.to_struct", "reference/series/api/polars.Series.arr.unique", "reference/series/api/polars.Series.arr.var", "reference/series/api/polars.Series.bin.contains", "reference/series/api/polars.Series.bin.decode", "reference/series/api/polars.Series.bin.encode", "reference/series/api/polars.Series.bin.ends_with", "reference/series/api/polars.Series.bin.size", "reference/series/api/polars.Series.bin.starts_with", "reference/series/api/polars.Series.bitwise_and", "reference/series/api/polars.Series.bitwise_count_ones", "reference/series/api/polars.Series.bitwise_count_zeros", "reference/series/api/polars.Series.bitwise_leading_ones", "reference/series/api/polars.Series.bitwise_leading_zeros", "reference/series/api/polars.Series.bitwise_or", "reference/series/api/polars.Series.bitwise_trailing_ones", "reference/series/api/polars.Series.bitwise_trailing_zeros", "reference/series/api/polars.Series.bitwise_xor", "reference/series/api/polars.Series.bottom_k", "reference/series/api/polars.Series.cast", "reference/series/api/polars.Series.cat.get_categories", "reference/series/api/polars.Series.cat.is_local", "reference/series/api/polars.Series.cat.len_bytes", "reference/series/api/polars.Series.cat.len_chars", "reference/series/api/polars.Series.cat.to_local", "reference/series/api/polars.Series.cat.uses_lexical_ordering", "reference/series/api/polars.Series.cbrt", "reference/series/api/polars.Series.ceil", "reference/series/api/polars.Series.chunk_lengths", "reference/series/api/polars.Series.clear", "reference/series/api/polars.Series.clip", "reference/series/api/polars.Series.clone", "reference/series/api/polars.Series.cos", "reference/series/api/polars.Series.cosh", "reference/series/api/polars.Series.cot", "reference/series/api/polars.Series.count", "reference/series/api/polars.Series.cum_count", "reference/series/api/polars.Series.cum_max", "reference/series/api/polars.Series.cum_min", "reference/series/api/polars.Series.cum_prod", "reference/series/api/polars.Series.cum_sum", "reference/series/api/polars.Series.cumulative_eval", "reference/series/api/polars.Series.cut", "reference/series/api/polars.Series.describe", "reference/series/api/polars.Series.diff", "reference/series/api/polars.Series.dot", "reference/series/api/polars.Series.drop_nans", "reference/series/api/polars.Series.drop_nulls", "reference/series/api/polars.Series.dt.add_business_days", "reference/series/api/polars.Series.dt.base_utc_offset", "reference/series/api/polars.Series.dt.cast_time_unit", "reference/series/api/polars.Series.dt.century", "reference/series/api/polars.Series.dt.combine", "reference/series/api/polars.Series.dt.convert_time_zone", "reference/series/api/polars.Series.dt.date", "reference/series/api/polars.Series.dt.datetime", "reference/series/api/polars.Series.dt.day", "reference/series/api/polars.Series.dt.dst_offset", "reference/series/api/polars.Series.dt.epoch", "reference/series/api/polars.Series.dt.hour", "reference/series/api/polars.Series.dt.is_leap_year", "reference/series/api/polars.Series.dt.iso_year", "reference/series/api/polars.Series.dt.max", "reference/series/api/polars.Series.dt.mean", "reference/series/api/polars.Series.dt.median", "reference/series/api/polars.Series.dt.microsecond", "reference/series/api/polars.Series.dt.millennium", "reference/series/api/polars.Series.dt.millisecond", "reference/series/api/polars.Series.dt.min", "reference/series/api/polars.Series.dt.minute", "reference/series/api/polars.Series.dt.month", "reference/series/api/polars.Series.dt.month_end", "reference/series/api/polars.Series.dt.month_start", "reference/series/api/polars.Series.dt.nanosecond", "reference/series/api/polars.Series.dt.offset_by", "reference/series/api/polars.Series.dt.ordinal_day", "reference/series/api/polars.Series.dt.quarter", "reference/series/api/polars.Series.dt.replace_time_zone", "reference/series/api/polars.Series.dt.round", "reference/series/api/polars.Series.dt.second", "reference/series/api/polars.Series.dt.strftime", "reference/series/api/polars.Series.dt.time", "reference/series/api/polars.Series.dt.timestamp", "reference/series/api/polars.Series.dt.to_string", "reference/series/api/polars.Series.dt.total_days", "reference/series/api/polars.Series.dt.total_hours", "reference/series/api/polars.Series.dt.total_microseconds", "reference/series/api/polars.Series.dt.total_milliseconds", "reference/series/api/polars.Series.dt.total_minutes", "reference/series/api/polars.Series.dt.total_nanoseconds", "reference/series/api/polars.Series.dt.total_seconds", "reference/series/api/polars.Series.dt.truncate", "reference/series/api/polars.Series.dt.week", "reference/series/api/polars.Series.dt.weekday", "reference/series/api/polars.Series.dt.with_time_unit", "reference/series/api/polars.Series.dt.year", "reference/series/api/polars.Series.dtype", "reference/series/api/polars.Series.entropy", "reference/series/api/polars.Series.eq", "reference/series/api/polars.Series.eq_missing", "reference/series/api/polars.Series.equals", "reference/series/api/polars.Series.estimated_size", "reference/series/api/polars.Series.ewm_mean", "reference/series/api/polars.Series.ewm_mean_by", "reference/series/api/polars.Series.ewm_std", "reference/series/api/polars.Series.ewm_var", "reference/series/api/polars.Series.exp", "reference/series/api/polars.Series.explode", "reference/series/api/polars.Series.extend", "reference/series/api/polars.Series.extend_constant", "reference/series/api/polars.Series.fill_nan", "reference/series/api/polars.Series.fill_null", "reference/series/api/polars.Series.filter", "reference/series/api/polars.Series.first", "reference/series/api/polars.Series.flags", "reference/series/api/polars.Series.floor", "reference/series/api/polars.Series.gather", "reference/series/api/polars.Series.gather_every", "reference/series/api/polars.Series.ge", "reference/series/api/polars.Series.get_chunks", "reference/series/api/polars.Series.gt", "reference/series/api/polars.Series.has_nulls", "reference/series/api/polars.Series.has_validity", "reference/series/api/polars.Series.hash", "reference/series/api/polars.Series.head", "reference/series/api/polars.Series.hist", "reference/series/api/polars.Series.implode", "reference/series/api/polars.Series.interpolate", "reference/series/api/polars.Series.interpolate_by", "reference/series/api/polars.Series.is_between", "reference/series/api/polars.Series.is_duplicated", "reference/series/api/polars.Series.is_empty", "reference/series/api/polars.Series.is_finite", "reference/series/api/polars.Series.is_first_distinct", "reference/series/api/polars.Series.is_in", "reference/series/api/polars.Series.is_infinite", "reference/series/api/polars.Series.is_last_distinct", "reference/series/api/polars.Series.is_nan", "reference/series/api/polars.Series.is_not_nan", "reference/series/api/polars.Series.is_not_null", "reference/series/api/polars.Series.is_null", "reference/series/api/polars.Series.is_sorted", "reference/series/api/polars.Series.is_unique", "reference/series/api/polars.Series.item", "reference/series/api/polars.Series.kurtosis", "reference/series/api/polars.Series.last", "reference/series/api/polars.Series.le", "reference/series/api/polars.Series.len", "reference/series/api/polars.Series.limit", "reference/series/api/polars.Series.list.all", "reference/series/api/polars.Series.list.any", "reference/series/api/polars.Series.list.arg_max", "reference/series/api/polars.Series.list.arg_min", "reference/series/api/polars.Series.list.concat", "reference/series/api/polars.Series.list.contains", "reference/series/api/polars.Series.list.count_matches", "reference/series/api/polars.Series.list.diff", "reference/series/api/polars.Series.list.drop_nulls", "reference/series/api/polars.Series.list.eval", "reference/series/api/polars.Series.list.explode", "reference/series/api/polars.Series.list.first", "reference/series/api/polars.Series.list.gather", "reference/series/api/polars.Series.list.gather_every", "reference/series/api/polars.Series.list.get", "reference/series/api/polars.Series.list.head", "reference/series/api/polars.Series.list.join", "reference/series/api/polars.Series.list.last", "reference/series/api/polars.Series.list.len", "reference/series/api/polars.Series.list.max", "reference/series/api/polars.Series.list.mean", "reference/series/api/polars.Series.list.median", "reference/series/api/polars.Series.list.min", "reference/series/api/polars.Series.list.n_unique", "reference/series/api/polars.Series.list.reverse", "reference/series/api/polars.Series.list.sample", "reference/series/api/polars.Series.list.set_difference", "reference/series/api/polars.Series.list.set_intersection", "reference/series/api/polars.Series.list.set_symmetric_difference", "reference/series/api/polars.Series.list.set_union", "reference/series/api/polars.Series.list.shift", "reference/series/api/polars.Series.list.slice", "reference/series/api/polars.Series.list.sort", "reference/series/api/polars.Series.list.std", "reference/series/api/polars.Series.list.sum", "reference/series/api/polars.Series.list.tail", "reference/series/api/polars.Series.list.to_array", "reference/series/api/polars.Series.list.to_struct", "reference/series/api/polars.Series.list.unique", "reference/series/api/polars.Series.list.var", "reference/series/api/polars.Series.log", "reference/series/api/polars.Series.log10", "reference/series/api/polars.Series.log1p", "reference/series/api/polars.Series.lower_bound", "reference/series/api/polars.Series.lt", "reference/series/api/polars.Series.map_elements", "reference/series/api/polars.Series.max", "reference/series/api/polars.Series.mean", "reference/series/api/polars.Series.median", "reference/series/api/polars.Series.min", "reference/series/api/polars.Series.mode", "reference/series/api/polars.Series.n_chunks", "reference/series/api/polars.Series.n_unique", "reference/series/api/polars.Series.name", "reference/series/api/polars.Series.nan_max", "reference/series/api/polars.Series.nan_min", "reference/series/api/polars.Series.ne", "reference/series/api/polars.Series.ne_missing", "reference/series/api/polars.Series.new_from_index", "reference/series/api/polars.Series.not_", "reference/series/api/polars.Series.null_count", "reference/series/api/polars.Series.pct_change", "reference/series/api/polars.Series.peak_max", "reference/series/api/polars.Series.peak_min", "reference/series/api/polars.Series.pow", "reference/series/api/polars.Series.product", "reference/series/api/polars.Series.qcut", "reference/series/api/polars.Series.quantile", "reference/series/api/polars.Series.rank", "reference/series/api/polars.Series.rechunk", "reference/series/api/polars.Series.reinterpret", "reference/series/api/polars.Series.rename", "reference/series/api/polars.Series.replace", "reference/series/api/polars.Series.replace_strict", "reference/series/api/polars.Series.reshape", "reference/series/api/polars.Series.reverse", "reference/series/api/polars.Series.rle", "reference/series/api/polars.Series.rle_id", "reference/series/api/polars.Series.rolling_map", "reference/series/api/polars.Series.rolling_max", "reference/series/api/polars.Series.rolling_mean", "reference/series/api/polars.Series.rolling_median", "reference/series/api/polars.Series.rolling_min", "reference/series/api/polars.Series.rolling_quantile", "reference/series/api/polars.Series.rolling_skew", "reference/series/api/polars.Series.rolling_std", "reference/series/api/polars.Series.rolling_sum", "reference/series/api/polars.Series.rolling_var", "reference/series/api/polars.Series.round", "reference/series/api/polars.Series.round_sig_figs", "reference/series/api/polars.Series.sample", "reference/series/api/polars.Series.scatter", "reference/series/api/polars.Series.search_sorted", "reference/series/api/polars.Series.set", "reference/series/api/polars.Series.set_sorted", "reference/series/api/polars.Series.shape", "reference/series/api/polars.Series.shift", "reference/series/api/polars.Series.shrink_dtype", "reference/series/api/polars.Series.shrink_to_fit", "reference/series/api/polars.Series.shuffle", "reference/series/api/polars.Series.sign", "reference/series/api/polars.Series.sin", "reference/series/api/polars.Series.sinh", "reference/series/api/polars.Series.skew", "reference/series/api/polars.Series.slice", "reference/series/api/polars.Series.sort", "reference/series/api/polars.Series.sqrt", "reference/series/api/polars.Series.std", "reference/series/api/polars.Series.str.concat", "reference/series/api/polars.Series.str.contains", "reference/series/api/polars.Series.str.contains_any", "reference/series/api/polars.Series.str.count_matches", "reference/series/api/polars.Series.str.decode", "reference/series/api/polars.Series.str.encode", "reference/series/api/polars.Series.str.ends_with", "reference/series/api/polars.Series.str.escape_regex", "reference/series/api/polars.Series.str.explode", "reference/series/api/polars.Series.str.extract", "reference/series/api/polars.Series.str.extract_all", "reference/series/api/polars.Series.str.extract_groups", "reference/series/api/polars.Series.str.extract_many", "reference/series/api/polars.Series.str.find", "reference/series/api/polars.Series.str.find_many", "reference/series/api/polars.Series.str.head", "reference/series/api/polars.Series.str.join", "reference/series/api/polars.Series.str.json_decode", "reference/series/api/polars.Series.str.json_path_match", "reference/series/api/polars.Series.str.len_bytes", "reference/series/api/polars.Series.str.len_chars", "reference/series/api/polars.Series.str.pad_end", "reference/series/api/polars.Series.str.pad_start", "reference/series/api/polars.Series.str.replace", "reference/series/api/polars.Series.str.replace_all", "reference/series/api/polars.Series.str.replace_many", "reference/series/api/polars.Series.str.reverse", "reference/series/api/polars.Series.str.slice", "reference/series/api/polars.Series.str.split", "reference/series/api/polars.Series.str.split_exact", "reference/series/api/polars.Series.str.splitn", "reference/series/api/polars.Series.str.starts_with", "reference/series/api/polars.Series.str.strip_chars", "reference/series/api/polars.Series.str.strip_chars_end", "reference/series/api/polars.Series.str.strip_chars_start", "reference/series/api/polars.Series.str.strip_prefix", "reference/series/api/polars.Series.str.strip_suffix", "reference/series/api/polars.Series.str.strptime", "reference/series/api/polars.Series.str.tail", "reference/series/api/polars.Series.str.to_date", "reference/series/api/polars.Series.str.to_datetime", "reference/series/api/polars.Series.str.to_decimal", "reference/series/api/polars.Series.str.to_integer", "reference/series/api/polars.Series.str.to_lowercase", "reference/series/api/polars.Series.str.to_time", "reference/series/api/polars.Series.str.to_titlecase", "reference/series/api/polars.Series.str.to_uppercase", "reference/series/api/polars.Series.str.zfill", "reference/series/api/polars.Series.struct.field", "reference/series/api/polars.Series.struct.fields", "reference/series/api/polars.Series.struct.json_encode", "reference/series/api/polars.Series.struct.rename_fields", "reference/series/api/polars.Series.struct.schema", "reference/series/api/polars.Series.struct.unnest", "reference/series/api/polars.Series.sum", "reference/series/api/polars.Series.tail", "reference/series/api/polars.Series.tan", "reference/series/api/polars.Series.tanh", "reference/series/api/polars.Series.to_arrow", "reference/series/api/polars.Series.to_dummies", "reference/series/api/polars.Series.to_frame", "reference/series/api/polars.Series.to_init_repr", "reference/series/api/polars.Series.to_jax", "reference/series/api/polars.Series.to_list", "reference/series/api/polars.Series.to_numpy", "reference/series/api/polars.Series.to_pandas", "reference/series/api/polars.Series.to_physical", "reference/series/api/polars.Series.to_torch", "reference/series/api/polars.Series.top_k", "reference/series/api/polars.Series.unique", "reference/series/api/polars.Series.unique_counts", "reference/series/api/polars.Series.upper_bound", "reference/series/api/polars.Series.value_counts", "reference/series/api/polars.Series.var", "reference/series/api/polars.Series.zip_with", "reference/series/array", "reference/series/attributes", "reference/series/binary", "reference/series/boolean", "reference/series/categories", "reference/series/computation", "reference/series/descriptive", "reference/series/export", "reference/series/index", "reference/series/list", "reference/series/miscellaneous", "reference/series/modify_select", "reference/series/operators", "reference/series/plot", "reference/series/string", "reference/series/struct", "reference/series/temporal", "reference/sql/api/polars.SQLContext.execute", "reference/sql/api/polars.SQLContext.execute_global", "reference/sql/api/polars.SQLContext.register", "reference/sql/api/polars.SQLContext.register_globals", "reference/sql/api/polars.SQLContext.register_many", "reference/sql/api/polars.SQLContext.tables", "reference/sql/api/polars.SQLContext.unregister", "reference/sql/clauses", "reference/sql/functions/aggregate", "reference/sql/functions/array", "reference/sql/functions/bitwise", "reference/sql/functions/conditional", "reference/sql/functions/index", "reference/sql/functions/math", "reference/sql/functions/string", "reference/sql/functions/temporal", "reference/sql/functions/trigonometry", "reference/sql/functions/types", "reference/sql/index", "reference/sql/python_api", "reference/sql/set_operations", "reference/sql/table_operations", "reference/testing"], "envversion": {"sphinx": 64, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1}, "filenames": ["index.rst", "reference/api.rst", "reference/api/polars.Config.load.rst", "reference/api/polars.Config.load_from_file.rst", "reference/api/polars.Config.restore_defaults.rst", "reference/api/polars.Config.save.rst", "reference/api/polars.Config.save_to_file.rst", "reference/api/polars.Config.set_ascii_tables.rst", "reference/api/polars.Config.set_auto_structify.rst", "reference/api/polars.Config.set_decimal_separator.rst", "reference/api/polars.Config.set_float_precision.rst", "reference/api/polars.Config.set_fmt_float.rst", "reference/api/polars.Config.set_fmt_str_lengths.rst", "reference/api/polars.Config.set_fmt_table_cell_list_len.rst", "reference/api/polars.Config.set_streaming_chunk_size.rst", "reference/api/polars.Config.set_tbl_cell_alignment.rst", "reference/api/polars.Config.set_tbl_cell_numeric_alignment.rst", "reference/api/polars.Config.set_tbl_cols.rst", "reference/api/polars.Config.set_tbl_column_data_type_inline.rst", "reference/api/polars.Config.set_tbl_dataframe_shape_below.rst", "reference/api/polars.Config.set_tbl_formatting.rst", "reference/api/polars.Config.set_tbl_hide_column_data_types.rst", "reference/api/polars.Config.set_tbl_hide_column_names.rst", "reference/api/polars.Config.set_tbl_hide_dataframe_shape.rst", "reference/api/polars.Config.set_tbl_hide_dtype_separator.rst", "reference/api/polars.Config.set_tbl_rows.rst", "reference/api/polars.Config.set_tbl_width_chars.rst", "reference/api/polars.Config.set_thousands_separator.rst", "reference/api/polars.Config.set_trim_decimal_zeros.rst", "reference/api/polars.Config.set_verbose.rst", "reference/api/polars.Config.state.rst", "reference/api/polars.CredentialProvider.rst", "reference/api/polars.CredentialProviderAWS.rst", "reference/api/polars.CredentialProviderGCP.rst", "reference/api/polars.DataFrame.write_avro.rst", "reference/api/polars.DataFrame.write_clipboard.rst", "reference/api/polars.DataFrame.write_csv.rst", "reference/api/polars.DataFrame.write_database.rst", "reference/api/polars.DataFrame.write_delta.rst", "reference/api/polars.DataFrame.write_excel.rst", "reference/api/polars.DataFrame.write_ipc.rst", "reference/api/polars.DataFrame.write_ipc_stream.rst", "reference/api/polars.DataFrame.write_json.rst", "reference/api/polars.DataFrame.write_ndjson.rst", "reference/api/polars.DataFrame.write_parquet.rst", "reference/api/polars.LazyFrame.sink_csv.rst", "reference/api/polars.LazyFrame.sink_ipc.rst", "reference/api/polars.LazyFrame.sink_ndjson.rst", "reference/api/polars.LazyFrame.sink_parquet.rst", "reference/api/polars.StringCache.rst", "reference/api/polars.align_frames.rst", "reference/api/polars.api.register_dataframe_namespace.rst", "reference/api/polars.api.register_expr_namespace.rst", "reference/api/polars.api.register_lazyframe_namespace.rst", "reference/api/polars.api.register_series_namespace.rst", "reference/api/polars.build_info.rst", "reference/api/polars.collect_all.rst", "reference/api/polars.collect_all_async.rst", "reference/api/polars.concat.rst", "reference/api/polars.datatypes.Array.rst", "reference/api/polars.datatypes.Binary.rst", "reference/api/polars.datatypes.Boolean.rst", "reference/api/polars.datatypes.Categorical.rst", "reference/api/polars.datatypes.DataType.rst", "reference/api/polars.datatypes.Date.rst", "reference/api/polars.datatypes.Datetime.rst", "reference/api/polars.datatypes.Decimal.rst", "reference/api/polars.datatypes.Duration.rst", "reference/api/polars.datatypes.Enum.rst", "reference/api/polars.datatypes.Float32.rst", "reference/api/polars.datatypes.Float64.rst", "reference/api/polars.datatypes.Int128.rst", "reference/api/polars.datatypes.Int16.rst", "reference/api/polars.datatypes.Int32.rst", "reference/api/polars.datatypes.Int64.rst", "reference/api/polars.datatypes.Int8.rst", "reference/api/polars.datatypes.List.rst", "reference/api/polars.datatypes.Null.rst", "reference/api/polars.datatypes.Object.rst", "reference/api/polars.datatypes.String.rst", "reference/api/polars.datatypes.Struct.rst", "reference/api/polars.datatypes.Time.rst", "reference/api/polars.datatypes.UInt16.rst", "reference/api/polars.datatypes.UInt32.rst", "reference/api/polars.datatypes.UInt64.rst", "reference/api/polars.datatypes.UInt8.rst", "reference/api/polars.datatypes.Unknown.rst", "reference/api/polars.datatypes.Utf8.rst", "reference/api/polars.disable_string_cache.rst", "reference/api/polars.enable_string_cache.rst", "reference/api/polars.escape_regex.rst", "reference/api/polars.exceptions.CategoricalRemappingWarning.rst", "reference/api/polars.exceptions.ChronoFormatWarning.rst", "reference/api/polars.exceptions.ColumnNotFoundError.rst", "reference/api/polars.exceptions.ComputeError.rst", "reference/api/polars.exceptions.CustomUFuncWarning.rst", "reference/api/polars.exceptions.DataOrientationWarning.rst", "reference/api/polars.exceptions.DuplicateError.rst", "reference/api/polars.exceptions.InvalidOperationError.rst", "reference/api/polars.exceptions.MapWithoutReturnDtypeWarning.rst", "reference/api/polars.exceptions.ModuleUpgradeRequiredError.rst", "reference/api/polars.exceptions.NoDataError.rst", "reference/api/polars.exceptions.NoRowsReturnedError.rst", "reference/api/polars.exceptions.OutOfBoundsError.rst", "reference/api/polars.exceptions.PanicException.rst", "reference/api/polars.exceptions.ParameterCollisionError.rst", "reference/api/polars.exceptions.PerformanceWarning.rst", "reference/api/polars.exceptions.PolarsError.rst", "reference/api/polars.exceptions.PolarsInefficientMapWarning.rst", "reference/api/polars.exceptions.PolarsWarning.rst", "reference/api/polars.exceptions.RowsError.rst", "reference/api/polars.exceptions.SQLInterfaceError.rst", "reference/api/polars.exceptions.SQLSyntaxError.rst", "reference/api/polars.exceptions.SchemaError.rst", "reference/api/polars.exceptions.SchemaFieldNotFoundError.rst", "reference/api/polars.exceptions.ShapeError.rst", "reference/api/polars.exceptions.StringCacheMismatchError.rst", "reference/api/polars.exceptions.StructFieldNotFoundError.rst", "reference/api/polars.exceptions.TooManyRowsReturnedError.rst", "reference/api/polars.exceptions.UnstableWarning.rst", "reference/api/polars.exceptions.UnsuitableSQLError.rst", "reference/api/polars.from_arrow.rst", "reference/api/polars.from_dataframe.rst", "reference/api/polars.from_dict.rst", "reference/api/polars.from_dicts.rst", "reference/api/polars.from_numpy.rst", "reference/api/polars.from_pandas.rst", "reference/api/polars.from_records.rst", "reference/api/polars.from_repr.rst", "reference/api/polars.get_index_type.rst", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches.rst", "reference/api/polars.json_normalize.rst", "reference/api/polars.read_avro.rst", "reference/api/polars.read_clipboard.rst", "reference/api/polars.read_csv.rst", "reference/api/polars.read_csv_batched.rst", "reference/api/polars.read_database.rst", "reference/api/polars.read_database_uri.rst", "reference/api/polars.read_delta.rst", "reference/api/polars.read_excel.rst", "reference/api/polars.read_ipc.rst", "reference/api/polars.read_ipc_schema.rst", "reference/api/polars.read_ipc_stream.rst", "reference/api/polars.read_json.rst", "reference/api/polars.read_ndjson.rst", "reference/api/polars.read_ods.rst", "reference/api/polars.read_parquet.rst", "reference/api/polars.read_parquet_schema.rst", "reference/api/polars.scan_csv.rst", "reference/api/polars.scan_delta.rst", "reference/api/polars.scan_iceberg.rst", "reference/api/polars.scan_ipc.rst", "reference/api/polars.scan_ndjson.rst", "reference/api/polars.scan_parquet.rst", "reference/api/polars.scan_pyarrow_dataset.rst", "reference/api/polars.set_random_seed.rst", "reference/api/polars.show_versions.rst", "reference/api/polars.testing.assert_frame_equal.rst", "reference/api/polars.testing.assert_frame_not_equal.rst", "reference/api/polars.testing.assert_series_equal.rst", "reference/api/polars.testing.assert_series_not_equal.rst", "reference/api/polars.testing.parametric.column.rst", "reference/api/polars.testing.parametric.columns.rst", "reference/api/polars.testing.parametric.create_list_strategy.rst", "reference/api/polars.testing.parametric.dataframes.rst", "reference/api/polars.testing.parametric.dtypes.rst", "reference/api/polars.testing.parametric.lists.rst", "reference/api/polars.testing.parametric.load_profile.rst", "reference/api/polars.testing.parametric.series.rst", "reference/api/polars.testing.parametric.set_profile.rst", "reference/api/polars.thread_pool_size.rst", "reference/api/polars.threadpool_size.rst", "reference/api/polars.using_string_cache.rst", "reference/config.rst", "reference/dataframe/aggregation.rst", "reference/dataframe/api/polars.DataFrame.__array__.rst", "reference/dataframe/api/polars.DataFrame.__arrow_c_stream__.rst", "reference/dataframe/api/polars.DataFrame.__dataframe__.rst", "reference/dataframe/api/polars.DataFrame.__getitem__.rst", "reference/dataframe/api/polars.DataFrame.approx_n_unique.rst", "reference/dataframe/api/polars.DataFrame.bottom_k.rst", "reference/dataframe/api/polars.DataFrame.cast.rst", "reference/dataframe/api/polars.DataFrame.clear.rst", "reference/dataframe/api/polars.DataFrame.clone.rst", "reference/dataframe/api/polars.DataFrame.collect_schema.rst", "reference/dataframe/api/polars.DataFrame.columns.rst", "reference/dataframe/api/polars.DataFrame.corr.rst", "reference/dataframe/api/polars.DataFrame.count.rst", "reference/dataframe/api/polars.DataFrame.describe.rst", "reference/dataframe/api/polars.DataFrame.deserialize.rst", "reference/dataframe/api/polars.DataFrame.drop.rst", "reference/dataframe/api/polars.DataFrame.drop_in_place.rst", "reference/dataframe/api/polars.DataFrame.drop_nans.rst", "reference/dataframe/api/polars.DataFrame.drop_nulls.rst", "reference/dataframe/api/polars.DataFrame.dtypes.rst", "reference/dataframe/api/polars.DataFrame.equals.rst", "reference/dataframe/api/polars.DataFrame.estimated_size.rst", "reference/dataframe/api/polars.DataFrame.explode.rst", "reference/dataframe/api/polars.DataFrame.extend.rst", "reference/dataframe/api/polars.DataFrame.fill_nan.rst", "reference/dataframe/api/polars.DataFrame.fill_null.rst", "reference/dataframe/api/polars.DataFrame.filter.rst", "reference/dataframe/api/polars.DataFrame.flags.rst", "reference/dataframe/api/polars.DataFrame.fold.rst", "reference/dataframe/api/polars.DataFrame.gather_every.rst", "reference/dataframe/api/polars.DataFrame.get_column.rst", "reference/dataframe/api/polars.DataFrame.get_column_index.rst", "reference/dataframe/api/polars.DataFrame.get_columns.rst", "reference/dataframe/api/polars.DataFrame.glimpse.rst", "reference/dataframe/api/polars.DataFrame.group_by.rst", "reference/dataframe/api/polars.DataFrame.group_by_dynamic.rst", "reference/dataframe/api/polars.DataFrame.hash_rows.rst", "reference/dataframe/api/polars.DataFrame.head.rst", "reference/dataframe/api/polars.DataFrame.height.rst", "reference/dataframe/api/polars.DataFrame.hstack.rst", "reference/dataframe/api/polars.DataFrame.insert_column.rst", "reference/dataframe/api/polars.DataFrame.interpolate.rst", "reference/dataframe/api/polars.DataFrame.is_duplicated.rst", "reference/dataframe/api/polars.DataFrame.is_empty.rst", "reference/dataframe/api/polars.DataFrame.is_unique.rst", "reference/dataframe/api/polars.DataFrame.item.rst", "reference/dataframe/api/polars.DataFrame.iter_columns.rst", "reference/dataframe/api/polars.DataFrame.iter_rows.rst", "reference/dataframe/api/polars.DataFrame.iter_slices.rst", "reference/dataframe/api/polars.DataFrame.join.rst", "reference/dataframe/api/polars.DataFrame.join_asof.rst", "reference/dataframe/api/polars.DataFrame.join_where.rst", "reference/dataframe/api/polars.DataFrame.lazy.rst", "reference/dataframe/api/polars.DataFrame.limit.rst", "reference/dataframe/api/polars.DataFrame.map_rows.rst", "reference/dataframe/api/polars.DataFrame.max.rst", "reference/dataframe/api/polars.DataFrame.max_horizontal.rst", "reference/dataframe/api/polars.DataFrame.mean.rst", "reference/dataframe/api/polars.DataFrame.mean_horizontal.rst", "reference/dataframe/api/polars.DataFrame.median.rst", "reference/dataframe/api/polars.DataFrame.melt.rst", "reference/dataframe/api/polars.DataFrame.merge_sorted.rst", "reference/dataframe/api/polars.DataFrame.min.rst", "reference/dataframe/api/polars.DataFrame.min_horizontal.rst", "reference/dataframe/api/polars.DataFrame.n_chunks.rst", "reference/dataframe/api/polars.DataFrame.n_unique.rst", "reference/dataframe/api/polars.DataFrame.null_count.rst", "reference/dataframe/api/polars.DataFrame.partition_by.rst", "reference/dataframe/api/polars.DataFrame.pipe.rst", "reference/dataframe/api/polars.DataFrame.pivot.rst", "reference/dataframe/api/polars.DataFrame.product.rst", "reference/dataframe/api/polars.DataFrame.quantile.rst", "reference/dataframe/api/polars.DataFrame.rechunk.rst", "reference/dataframe/api/polars.DataFrame.rename.rst", "reference/dataframe/api/polars.DataFrame.replace_column.rst", "reference/dataframe/api/polars.DataFrame.reverse.rst", "reference/dataframe/api/polars.DataFrame.rolling.rst", "reference/dataframe/api/polars.DataFrame.row.rst", "reference/dataframe/api/polars.DataFrame.rows.rst", "reference/dataframe/api/polars.DataFrame.rows_by_key.rst", "reference/dataframe/api/polars.DataFrame.sample.rst", "reference/dataframe/api/polars.DataFrame.schema.rst", "reference/dataframe/api/polars.DataFrame.select.rst", "reference/dataframe/api/polars.DataFrame.select_seq.rst", "reference/dataframe/api/polars.DataFrame.serialize.rst", "reference/dataframe/api/polars.DataFrame.set_sorted.rst", "reference/dataframe/api/polars.DataFrame.shape.rst", "reference/dataframe/api/polars.DataFrame.shift.rst", "reference/dataframe/api/polars.DataFrame.shrink_to_fit.rst", "reference/dataframe/api/polars.DataFrame.slice.rst", "reference/dataframe/api/polars.DataFrame.sort.rst", "reference/dataframe/api/polars.DataFrame.sql.rst", "reference/dataframe/api/polars.DataFrame.std.rst", "reference/dataframe/api/polars.DataFrame.sum.rst", "reference/dataframe/api/polars.DataFrame.sum_horizontal.rst", "reference/dataframe/api/polars.DataFrame.tail.rst", "reference/dataframe/api/polars.DataFrame.to_arrow.rst", "reference/dataframe/api/polars.DataFrame.to_dict.rst", "reference/dataframe/api/polars.DataFrame.to_dicts.rst", "reference/dataframe/api/polars.DataFrame.to_dummies.rst", "reference/dataframe/api/polars.DataFrame.to_init_repr.rst", "reference/dataframe/api/polars.DataFrame.to_jax.rst", "reference/dataframe/api/polars.DataFrame.to_numpy.rst", "reference/dataframe/api/polars.DataFrame.to_pandas.rst", "reference/dataframe/api/polars.DataFrame.to_series.rst", "reference/dataframe/api/polars.DataFrame.to_struct.rst", "reference/dataframe/api/polars.DataFrame.to_torch.rst", "reference/dataframe/api/polars.DataFrame.top_k.rst", "reference/dataframe/api/polars.DataFrame.transpose.rst", "reference/dataframe/api/polars.DataFrame.unique.rst", "reference/dataframe/api/polars.DataFrame.unnest.rst", "reference/dataframe/api/polars.DataFrame.unpivot.rst", "reference/dataframe/api/polars.DataFrame.unstack.rst", "reference/dataframe/api/polars.DataFrame.update.rst", "reference/dataframe/api/polars.DataFrame.upsample.rst", "reference/dataframe/api/polars.DataFrame.var.rst", "reference/dataframe/api/polars.DataFrame.vstack.rst", "reference/dataframe/api/polars.DataFrame.width.rst", "reference/dataframe/api/polars.DataFrame.with_columns.rst", "reference/dataframe/api/polars.DataFrame.with_columns_seq.rst", "reference/dataframe/api/polars.DataFrame.with_row_count.rst", "reference/dataframe/api/polars.DataFrame.with_row_index.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.__iter__.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.agg.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.all.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.count.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.first.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.head.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.last.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.len.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.map_groups.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.max.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.mean.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.median.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.min.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.n_unique.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.quantile.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.sum.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.tail.rst", "reference/dataframe/attributes.rst", "reference/dataframe/computation.rst", "reference/dataframe/descriptive.rst", "reference/dataframe/export.rst", "reference/dataframe/group_by.rst", "reference/dataframe/index.rst", "reference/dataframe/miscellaneous.rst", "reference/dataframe/modify_select.rst", "reference/dataframe/plot.rst", "reference/dataframe/style.rst", "reference/datatypes.rst", "reference/exceptions.rst", "reference/expressions/aggregation.rst", "reference/expressions/api/polars.Expr.abs.rst", "reference/expressions/api/polars.Expr.add.rst", "reference/expressions/api/polars.Expr.agg_groups.rst", "reference/expressions/api/polars.Expr.alias.rst", "reference/expressions/api/polars.Expr.all.rst", "reference/expressions/api/polars.Expr.and_.rst", "reference/expressions/api/polars.Expr.any.rst", "reference/expressions/api/polars.Expr.append.rst", "reference/expressions/api/polars.Expr.approx_n_unique.rst", "reference/expressions/api/polars.Expr.arccos.rst", "reference/expressions/api/polars.Expr.arccosh.rst", "reference/expressions/api/polars.Expr.arcsin.rst", "reference/expressions/api/polars.Expr.arcsinh.rst", "reference/expressions/api/polars.Expr.arctan.rst", "reference/expressions/api/polars.Expr.arctanh.rst", "reference/expressions/api/polars.Expr.arg_max.rst", "reference/expressions/api/polars.Expr.arg_min.rst", "reference/expressions/api/polars.Expr.arg_sort.rst", "reference/expressions/api/polars.Expr.arg_true.rst", "reference/expressions/api/polars.Expr.arg_unique.rst", "reference/expressions/api/polars.Expr.arr.all.rst", "reference/expressions/api/polars.Expr.arr.any.rst", "reference/expressions/api/polars.Expr.arr.arg_max.rst", "reference/expressions/api/polars.Expr.arr.arg_min.rst", "reference/expressions/api/polars.Expr.arr.contains.rst", "reference/expressions/api/polars.Expr.arr.count_matches.rst", "reference/expressions/api/polars.Expr.arr.explode.rst", "reference/expressions/api/polars.Expr.arr.first.rst", "reference/expressions/api/polars.Expr.arr.get.rst", "reference/expressions/api/polars.Expr.arr.join.rst", "reference/expressions/api/polars.Expr.arr.last.rst", "reference/expressions/api/polars.Expr.arr.max.rst", "reference/expressions/api/polars.Expr.arr.median.rst", "reference/expressions/api/polars.Expr.arr.min.rst", "reference/expressions/api/polars.Expr.arr.n_unique.rst", "reference/expressions/api/polars.Expr.arr.reverse.rst", "reference/expressions/api/polars.Expr.arr.shift.rst", "reference/expressions/api/polars.Expr.arr.sort.rst", "reference/expressions/api/polars.Expr.arr.std.rst", "reference/expressions/api/polars.Expr.arr.sum.rst", "reference/expressions/api/polars.Expr.arr.to_list.rst", "reference/expressions/api/polars.Expr.arr.to_struct.rst", "reference/expressions/api/polars.Expr.arr.unique.rst", "reference/expressions/api/polars.Expr.arr.var.rst", "reference/expressions/api/polars.Expr.backward_fill.rst", "reference/expressions/api/polars.Expr.bin.contains.rst", "reference/expressions/api/polars.Expr.bin.decode.rst", "reference/expressions/api/polars.Expr.bin.encode.rst", "reference/expressions/api/polars.Expr.bin.ends_with.rst", "reference/expressions/api/polars.Expr.bin.size.rst", "reference/expressions/api/polars.Expr.bin.starts_with.rst", "reference/expressions/api/polars.Expr.bitwise_and.rst", "reference/expressions/api/polars.Expr.bitwise_count_ones.rst", "reference/expressions/api/polars.Expr.bitwise_count_zeros.rst", "reference/expressions/api/polars.Expr.bitwise_leading_ones.rst", "reference/expressions/api/polars.Expr.bitwise_leading_zeros.rst", "reference/expressions/api/polars.Expr.bitwise_or.rst", "reference/expressions/api/polars.Expr.bitwise_trailing_ones.rst", "reference/expressions/api/polars.Expr.bitwise_trailing_zeros.rst", "reference/expressions/api/polars.Expr.bitwise_xor.rst", "reference/expressions/api/polars.Expr.bottom_k.rst", "reference/expressions/api/polars.Expr.bottom_k_by.rst", "reference/expressions/api/polars.Expr.cast.rst", "reference/expressions/api/polars.Expr.cat.get_categories.rst", "reference/expressions/api/polars.Expr.cat.len_bytes.rst", "reference/expressions/api/polars.Expr.cat.len_chars.rst", "reference/expressions/api/polars.Expr.cbrt.rst", "reference/expressions/api/polars.Expr.ceil.rst", "reference/expressions/api/polars.Expr.clip.rst", "reference/expressions/api/polars.Expr.cos.rst", "reference/expressions/api/polars.Expr.cosh.rst", "reference/expressions/api/polars.Expr.cot.rst", "reference/expressions/api/polars.Expr.count.rst", "reference/expressions/api/polars.Expr.cum_count.rst", "reference/expressions/api/polars.Expr.cum_max.rst", "reference/expressions/api/polars.Expr.cum_min.rst", "reference/expressions/api/polars.Expr.cum_prod.rst", "reference/expressions/api/polars.Expr.cum_sum.rst", "reference/expressions/api/polars.Expr.cumulative_eval.rst", "reference/expressions/api/polars.Expr.cut.rst", "reference/expressions/api/polars.Expr.degrees.rst", "reference/expressions/api/polars.Expr.deserialize.rst", "reference/expressions/api/polars.Expr.diff.rst", "reference/expressions/api/polars.Expr.dot.rst", "reference/expressions/api/polars.Expr.drop_nans.rst", "reference/expressions/api/polars.Expr.drop_nulls.rst", "reference/expressions/api/polars.Expr.dt.add_business_days.rst", "reference/expressions/api/polars.Expr.dt.base_utc_offset.rst", "reference/expressions/api/polars.Expr.dt.cast_time_unit.rst", "reference/expressions/api/polars.Expr.dt.century.rst", "reference/expressions/api/polars.Expr.dt.combine.rst", "reference/expressions/api/polars.Expr.dt.convert_time_zone.rst", "reference/expressions/api/polars.Expr.dt.date.rst", "reference/expressions/api/polars.Expr.dt.datetime.rst", "reference/expressions/api/polars.Expr.dt.day.rst", "reference/expressions/api/polars.Expr.dt.dst_offset.rst", "reference/expressions/api/polars.Expr.dt.epoch.rst", "reference/expressions/api/polars.Expr.dt.hour.rst", "reference/expressions/api/polars.Expr.dt.is_leap_year.rst", "reference/expressions/api/polars.Expr.dt.iso_year.rst", "reference/expressions/api/polars.Expr.dt.microsecond.rst", "reference/expressions/api/polars.Expr.dt.millennium.rst", "reference/expressions/api/polars.Expr.dt.millisecond.rst", "reference/expressions/api/polars.Expr.dt.minute.rst", "reference/expressions/api/polars.Expr.dt.month.rst", "reference/expressions/api/polars.Expr.dt.month_end.rst", "reference/expressions/api/polars.Expr.dt.month_start.rst", "reference/expressions/api/polars.Expr.dt.nanosecond.rst", "reference/expressions/api/polars.Expr.dt.offset_by.rst", "reference/expressions/api/polars.Expr.dt.ordinal_day.rst", "reference/expressions/api/polars.Expr.dt.quarter.rst", "reference/expressions/api/polars.Expr.dt.replace_time_zone.rst", "reference/expressions/api/polars.Expr.dt.round.rst", "reference/expressions/api/polars.Expr.dt.second.rst", "reference/expressions/api/polars.Expr.dt.strftime.rst", "reference/expressions/api/polars.Expr.dt.time.rst", "reference/expressions/api/polars.Expr.dt.timestamp.rst", "reference/expressions/api/polars.Expr.dt.to_string.rst", "reference/expressions/api/polars.Expr.dt.total_days.rst", "reference/expressions/api/polars.Expr.dt.total_hours.rst", "reference/expressions/api/polars.Expr.dt.total_microseconds.rst", "reference/expressions/api/polars.Expr.dt.total_milliseconds.rst", "reference/expressions/api/polars.Expr.dt.total_minutes.rst", "reference/expressions/api/polars.Expr.dt.total_nanoseconds.rst", "reference/expressions/api/polars.Expr.dt.total_seconds.rst", "reference/expressions/api/polars.Expr.dt.truncate.rst", "reference/expressions/api/polars.Expr.dt.week.rst", "reference/expressions/api/polars.Expr.dt.weekday.rst", "reference/expressions/api/polars.Expr.dt.with_time_unit.rst", "reference/expressions/api/polars.Expr.dt.year.rst", "reference/expressions/api/polars.Expr.entropy.rst", "reference/expressions/api/polars.Expr.eq.rst", "reference/expressions/api/polars.Expr.eq_missing.rst", "reference/expressions/api/polars.Expr.ewm_mean.rst", "reference/expressions/api/polars.Expr.ewm_mean_by.rst", "reference/expressions/api/polars.Expr.ewm_std.rst", "reference/expressions/api/polars.Expr.ewm_var.rst", "reference/expressions/api/polars.Expr.exclude.rst", "reference/expressions/api/polars.Expr.exp.rst", "reference/expressions/api/polars.Expr.explode.rst", "reference/expressions/api/polars.Expr.extend_constant.rst", "reference/expressions/api/polars.Expr.fill_nan.rst", "reference/expressions/api/polars.Expr.fill_null.rst", "reference/expressions/api/polars.Expr.filter.rst", "reference/expressions/api/polars.Expr.first.rst", "reference/expressions/api/polars.Expr.flatten.rst", "reference/expressions/api/polars.Expr.floor.rst", "reference/expressions/api/polars.Expr.floordiv.rst", "reference/expressions/api/polars.Expr.forward_fill.rst", "reference/expressions/api/polars.Expr.from_json.rst", "reference/expressions/api/polars.Expr.gather.rst", "reference/expressions/api/polars.Expr.gather_every.rst", "reference/expressions/api/polars.Expr.ge.rst", "reference/expressions/api/polars.Expr.get.rst", "reference/expressions/api/polars.Expr.gt.rst", "reference/expressions/api/polars.Expr.has_nulls.rst", "reference/expressions/api/polars.Expr.hash.rst", "reference/expressions/api/polars.Expr.head.rst", "reference/expressions/api/polars.Expr.hist.rst", "reference/expressions/api/polars.Expr.implode.rst", "reference/expressions/api/polars.Expr.inspect.rst", "reference/expressions/api/polars.Expr.interpolate.rst", "reference/expressions/api/polars.Expr.interpolate_by.rst", "reference/expressions/api/polars.Expr.is_between.rst", "reference/expressions/api/polars.Expr.is_duplicated.rst", "reference/expressions/api/polars.Expr.is_finite.rst", "reference/expressions/api/polars.Expr.is_first_distinct.rst", "reference/expressions/api/polars.Expr.is_in.rst", "reference/expressions/api/polars.Expr.is_infinite.rst", "reference/expressions/api/polars.Expr.is_last_distinct.rst", "reference/expressions/api/polars.Expr.is_nan.rst", "reference/expressions/api/polars.Expr.is_not_nan.rst", "reference/expressions/api/polars.Expr.is_not_null.rst", "reference/expressions/api/polars.Expr.is_null.rst", "reference/expressions/api/polars.Expr.is_unique.rst", "reference/expressions/api/polars.Expr.kurtosis.rst", "reference/expressions/api/polars.Expr.last.rst", "reference/expressions/api/polars.Expr.le.rst", "reference/expressions/api/polars.Expr.len.rst", "reference/expressions/api/polars.Expr.limit.rst", "reference/expressions/api/polars.Expr.list.all.rst", "reference/expressions/api/polars.Expr.list.any.rst", "reference/expressions/api/polars.Expr.list.arg_max.rst", "reference/expressions/api/polars.Expr.list.arg_min.rst", "reference/expressions/api/polars.Expr.list.concat.rst", "reference/expressions/api/polars.Expr.list.contains.rst", "reference/expressions/api/polars.Expr.list.count_matches.rst", "reference/expressions/api/polars.Expr.list.diff.rst", "reference/expressions/api/polars.Expr.list.drop_nulls.rst", "reference/expressions/api/polars.Expr.list.eval.rst", "reference/expressions/api/polars.Expr.list.explode.rst", "reference/expressions/api/polars.Expr.list.first.rst", "reference/expressions/api/polars.Expr.list.gather.rst", "reference/expressions/api/polars.Expr.list.gather_every.rst", "reference/expressions/api/polars.Expr.list.get.rst", "reference/expressions/api/polars.Expr.list.head.rst", "reference/expressions/api/polars.Expr.list.join.rst", "reference/expressions/api/polars.Expr.list.last.rst", "reference/expressions/api/polars.Expr.list.len.rst", "reference/expressions/api/polars.Expr.list.max.rst", "reference/expressions/api/polars.Expr.list.mean.rst", "reference/expressions/api/polars.Expr.list.median.rst", "reference/expressions/api/polars.Expr.list.min.rst", "reference/expressions/api/polars.Expr.list.n_unique.rst", "reference/expressions/api/polars.Expr.list.reverse.rst", "reference/expressions/api/polars.Expr.list.sample.rst", "reference/expressions/api/polars.Expr.list.set_difference.rst", "reference/expressions/api/polars.Expr.list.set_intersection.rst", "reference/expressions/api/polars.Expr.list.set_symmetric_difference.rst", "reference/expressions/api/polars.Expr.list.set_union.rst", "reference/expressions/api/polars.Expr.list.shift.rst", "reference/expressions/api/polars.Expr.list.slice.rst", "reference/expressions/api/polars.Expr.list.sort.rst", "reference/expressions/api/polars.Expr.list.std.rst", "reference/expressions/api/polars.Expr.list.sum.rst", "reference/expressions/api/polars.Expr.list.tail.rst", "reference/expressions/api/polars.Expr.list.to_array.rst", "reference/expressions/api/polars.Expr.list.to_struct.rst", "reference/expressions/api/polars.Expr.list.unique.rst", "reference/expressions/api/polars.Expr.list.var.rst", "reference/expressions/api/polars.Expr.log.rst", "reference/expressions/api/polars.Expr.log10.rst", "reference/expressions/api/polars.Expr.log1p.rst", "reference/expressions/api/polars.Expr.lower_bound.rst", "reference/expressions/api/polars.Expr.lt.rst", "reference/expressions/api/polars.Expr.map_batches.rst", "reference/expressions/api/polars.Expr.map_elements.rst", "reference/expressions/api/polars.Expr.max.rst", "reference/expressions/api/polars.Expr.mean.rst", "reference/expressions/api/polars.Expr.median.rst", "reference/expressions/api/polars.Expr.meta.eq.rst", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs.rst", "reference/expressions/api/polars.Expr.meta.is_column.rst", "reference/expressions/api/polars.Expr.meta.is_column_selection.rst", "reference/expressions/api/polars.Expr.meta.is_literal.rst", "reference/expressions/api/polars.Expr.meta.is_regex_projection.rst", "reference/expressions/api/polars.Expr.meta.ne.rst", "reference/expressions/api/polars.Expr.meta.output_name.rst", "reference/expressions/api/polars.Expr.meta.pop.rst", "reference/expressions/api/polars.Expr.meta.root_names.rst", "reference/expressions/api/polars.Expr.meta.serialize.rst", "reference/expressions/api/polars.Expr.meta.show_graph.rst", "reference/expressions/api/polars.Expr.meta.tree_format.rst", "reference/expressions/api/polars.Expr.meta.undo_aliases.rst", "reference/expressions/api/polars.Expr.meta.write_json.rst", "reference/expressions/api/polars.Expr.min.rst", "reference/expressions/api/polars.Expr.mod.rst", "reference/expressions/api/polars.Expr.mode.rst", "reference/expressions/api/polars.Expr.mul.rst", "reference/expressions/api/polars.Expr.n_unique.rst", "reference/expressions/api/polars.Expr.name.keep.rst", "reference/expressions/api/polars.Expr.name.map.rst", "reference/expressions/api/polars.Expr.name.map_fields.rst", "reference/expressions/api/polars.Expr.name.prefix.rst", "reference/expressions/api/polars.Expr.name.prefix_fields.rst", "reference/expressions/api/polars.Expr.name.suffix.rst", "reference/expressions/api/polars.Expr.name.suffix_fields.rst", "reference/expressions/api/polars.Expr.name.to_lowercase.rst", "reference/expressions/api/polars.Expr.name.to_uppercase.rst", "reference/expressions/api/polars.Expr.nan_max.rst", "reference/expressions/api/polars.Expr.nan_min.rst", "reference/expressions/api/polars.Expr.ne.rst", "reference/expressions/api/polars.Expr.ne_missing.rst", "reference/expressions/api/polars.Expr.neg.rst", "reference/expressions/api/polars.Expr.not_.rst", "reference/expressions/api/polars.Expr.null_count.rst", "reference/expressions/api/polars.Expr.or_.rst", "reference/expressions/api/polars.Expr.over.rst", "reference/expressions/api/polars.Expr.pct_change.rst", "reference/expressions/api/polars.Expr.peak_max.rst", "reference/expressions/api/polars.Expr.peak_min.rst", "reference/expressions/api/polars.Expr.pipe.rst", "reference/expressions/api/polars.Expr.pow.rst", "reference/expressions/api/polars.Expr.product.rst", "reference/expressions/api/polars.Expr.qcut.rst", "reference/expressions/api/polars.Expr.quantile.rst", "reference/expressions/api/polars.Expr.radians.rst", "reference/expressions/api/polars.Expr.rank.rst", "reference/expressions/api/polars.Expr.rechunk.rst", "reference/expressions/api/polars.Expr.reinterpret.rst", "reference/expressions/api/polars.Expr.repeat_by.rst", "reference/expressions/api/polars.Expr.replace.rst", "reference/expressions/api/polars.Expr.replace_strict.rst", "reference/expressions/api/polars.Expr.reshape.rst", "reference/expressions/api/polars.Expr.reverse.rst", "reference/expressions/api/polars.Expr.rle.rst", "reference/expressions/api/polars.Expr.rle_id.rst", "reference/expressions/api/polars.Expr.rolling.rst", "reference/expressions/api/polars.Expr.rolling_map.rst", "reference/expressions/api/polars.Expr.rolling_max.rst", "reference/expressions/api/polars.Expr.rolling_max_by.rst", "reference/expressions/api/polars.Expr.rolling_mean.rst", "reference/expressions/api/polars.Expr.rolling_mean_by.rst", "reference/expressions/api/polars.Expr.rolling_median.rst", "reference/expressions/api/polars.Expr.rolling_median_by.rst", "reference/expressions/api/polars.Expr.rolling_min.rst", "reference/expressions/api/polars.Expr.rolling_min_by.rst", "reference/expressions/api/polars.Expr.rolling_quantile.rst", "reference/expressions/api/polars.Expr.rolling_quantile_by.rst", "reference/expressions/api/polars.Expr.rolling_skew.rst", "reference/expressions/api/polars.Expr.rolling_std.rst", "reference/expressions/api/polars.Expr.rolling_std_by.rst", "reference/expressions/api/polars.Expr.rolling_sum.rst", "reference/expressions/api/polars.Expr.rolling_sum_by.rst", "reference/expressions/api/polars.Expr.rolling_var.rst", "reference/expressions/api/polars.Expr.rolling_var_by.rst", "reference/expressions/api/polars.Expr.round.rst", "reference/expressions/api/polars.Expr.round_sig_figs.rst", "reference/expressions/api/polars.Expr.sample.rst", "reference/expressions/api/polars.Expr.search_sorted.rst", "reference/expressions/api/polars.Expr.set_sorted.rst", "reference/expressions/api/polars.Expr.shift.rst", "reference/expressions/api/polars.Expr.shrink_dtype.rst", "reference/expressions/api/polars.Expr.shuffle.rst", "reference/expressions/api/polars.Expr.sign.rst", "reference/expressions/api/polars.Expr.sin.rst", "reference/expressions/api/polars.Expr.sinh.rst", "reference/expressions/api/polars.Expr.skew.rst", "reference/expressions/api/polars.Expr.slice.rst", "reference/expressions/api/polars.Expr.sort.rst", "reference/expressions/api/polars.Expr.sort_by.rst", "reference/expressions/api/polars.Expr.sqrt.rst", "reference/expressions/api/polars.Expr.std.rst", "reference/expressions/api/polars.Expr.str.concat.rst", "reference/expressions/api/polars.Expr.str.contains.rst", "reference/expressions/api/polars.Expr.str.contains_any.rst", "reference/expressions/api/polars.Expr.str.count_matches.rst", "reference/expressions/api/polars.Expr.str.decode.rst", "reference/expressions/api/polars.Expr.str.encode.rst", "reference/expressions/api/polars.Expr.str.ends_with.rst", "reference/expressions/api/polars.Expr.str.escape_regex.rst", "reference/expressions/api/polars.Expr.str.explode.rst", "reference/expressions/api/polars.Expr.str.extract.rst", "reference/expressions/api/polars.Expr.str.extract_all.rst", "reference/expressions/api/polars.Expr.str.extract_groups.rst", "reference/expressions/api/polars.Expr.str.extract_many.rst", "reference/expressions/api/polars.Expr.str.find.rst", "reference/expressions/api/polars.Expr.str.find_many.rst", "reference/expressions/api/polars.Expr.str.head.rst", "reference/expressions/api/polars.Expr.str.join.rst", "reference/expressions/api/polars.Expr.str.json_decode.rst", "reference/expressions/api/polars.Expr.str.json_path_match.rst", "reference/expressions/api/polars.Expr.str.len_bytes.rst", "reference/expressions/api/polars.Expr.str.len_chars.rst", "reference/expressions/api/polars.Expr.str.pad_end.rst", "reference/expressions/api/polars.Expr.str.pad_start.rst", "reference/expressions/api/polars.Expr.str.replace.rst", "reference/expressions/api/polars.Expr.str.replace_all.rst", "reference/expressions/api/polars.Expr.str.replace_many.rst", "reference/expressions/api/polars.Expr.str.reverse.rst", "reference/expressions/api/polars.Expr.str.slice.rst", "reference/expressions/api/polars.Expr.str.split.rst", "reference/expressions/api/polars.Expr.str.split_exact.rst", "reference/expressions/api/polars.Expr.str.splitn.rst", "reference/expressions/api/polars.Expr.str.starts_with.rst", "reference/expressions/api/polars.Expr.str.strip_chars.rst", "reference/expressions/api/polars.Expr.str.strip_chars_end.rst", "reference/expressions/api/polars.Expr.str.strip_chars_start.rst", "reference/expressions/api/polars.Expr.str.strip_prefix.rst", "reference/expressions/api/polars.Expr.str.strip_suffix.rst", "reference/expressions/api/polars.Expr.str.strptime.rst", "reference/expressions/api/polars.Expr.str.tail.rst", "reference/expressions/api/polars.Expr.str.to_date.rst", "reference/expressions/api/polars.Expr.str.to_datetime.rst", "reference/expressions/api/polars.Expr.str.to_decimal.rst", "reference/expressions/api/polars.Expr.str.to_integer.rst", "reference/expressions/api/polars.Expr.str.to_lowercase.rst", "reference/expressions/api/polars.Expr.str.to_time.rst", "reference/expressions/api/polars.Expr.str.to_titlecase.rst", "reference/expressions/api/polars.Expr.str.to_uppercase.rst", "reference/expressions/api/polars.Expr.str.zfill.rst", "reference/expressions/api/polars.Expr.struct.field.rst", "reference/expressions/api/polars.Expr.struct.json_encode.rst", "reference/expressions/api/polars.Expr.struct.rename_fields.rst", "reference/expressions/api/polars.Expr.struct.unnest.rst", "reference/expressions/api/polars.Expr.struct.with_fields.rst", "reference/expressions/api/polars.Expr.sub.rst", "reference/expressions/api/polars.Expr.sum.rst", "reference/expressions/api/polars.Expr.tail.rst", "reference/expressions/api/polars.Expr.tan.rst", "reference/expressions/api/polars.Expr.tanh.rst", "reference/expressions/api/polars.Expr.to_physical.rst", "reference/expressions/api/polars.Expr.top_k.rst", "reference/expressions/api/polars.Expr.top_k_by.rst", "reference/expressions/api/polars.Expr.truediv.rst", "reference/expressions/api/polars.Expr.unique.rst", "reference/expressions/api/polars.Expr.unique_counts.rst", "reference/expressions/api/polars.Expr.upper_bound.rst", "reference/expressions/api/polars.Expr.value_counts.rst", "reference/expressions/api/polars.Expr.var.rst", "reference/expressions/api/polars.Expr.where.rst", "reference/expressions/api/polars.Expr.xor.rst", "reference/expressions/api/polars.all.rst", "reference/expressions/api/polars.all_horizontal.rst", "reference/expressions/api/polars.any.rst", "reference/expressions/api/polars.any_horizontal.rst", "reference/expressions/api/polars.approx_n_unique.rst", "reference/expressions/api/polars.arange.rst", "reference/expressions/api/polars.arctan2.rst", "reference/expressions/api/polars.arctan2d.rst", "reference/expressions/api/polars.arg_sort_by.rst", "reference/expressions/api/polars.arg_where.rst", "reference/expressions/api/polars.business_day_count.rst", "reference/expressions/api/polars.coalesce.rst", "reference/expressions/api/polars.concat_arr.rst", "reference/expressions/api/polars.concat_list.rst", "reference/expressions/api/polars.concat_str.rst", "reference/expressions/api/polars.corr.rst", "reference/expressions/api/polars.count.rst", "reference/expressions/api/polars.cov.rst", "reference/expressions/api/polars.cum_count.rst", "reference/expressions/api/polars.cum_fold.rst", "reference/expressions/api/polars.cum_reduce.rst", "reference/expressions/api/polars.cum_sum.rst", "reference/expressions/api/polars.cum_sum_horizontal.rst", "reference/expressions/api/polars.date.rst", "reference/expressions/api/polars.date_range.rst", "reference/expressions/api/polars.date_ranges.rst", "reference/expressions/api/polars.datetime.rst", "reference/expressions/api/polars.datetime_range.rst", "reference/expressions/api/polars.datetime_ranges.rst", "reference/expressions/api/polars.duration.rst", "reference/expressions/api/polars.element.rst", "reference/expressions/api/polars.exclude.rst", "reference/expressions/api/polars.first.rst", "reference/expressions/api/polars.fold.rst", "reference/expressions/api/polars.format.rst", "reference/expressions/api/polars.from_epoch.rst", "reference/expressions/api/polars.groups.rst", "reference/expressions/api/polars.head.rst", "reference/expressions/api/polars.implode.rst", "reference/expressions/api/polars.int_range.rst", "reference/expressions/api/polars.int_ranges.rst", "reference/expressions/api/polars.last.rst", "reference/expressions/api/polars.len.rst", "reference/expressions/api/polars.lit.rst", "reference/expressions/api/polars.map_batches.rst", "reference/expressions/api/polars.map_groups.rst", "reference/expressions/api/polars.max.rst", "reference/expressions/api/polars.max_horizontal.rst", "reference/expressions/api/polars.mean.rst", "reference/expressions/api/polars.mean_horizontal.rst", "reference/expressions/api/polars.median.rst", "reference/expressions/api/polars.min.rst", "reference/expressions/api/polars.min_horizontal.rst", "reference/expressions/api/polars.n_unique.rst", "reference/expressions/api/polars.nth.rst", "reference/expressions/api/polars.ones.rst", "reference/expressions/api/polars.quantile.rst", "reference/expressions/api/polars.reduce.rst", "reference/expressions/api/polars.repeat.rst", "reference/expressions/api/polars.rolling_corr.rst", "reference/expressions/api/polars.rolling_cov.rst", "reference/expressions/api/polars.select.rst", "reference/expressions/api/polars.sql.rst", "reference/expressions/api/polars.sql_expr.rst", "reference/expressions/api/polars.std.rst", "reference/expressions/api/polars.struct.rst", "reference/expressions/api/polars.sum.rst", "reference/expressions/api/polars.sum_horizontal.rst", "reference/expressions/api/polars.tail.rst", "reference/expressions/api/polars.time.rst", "reference/expressions/api/polars.time_range.rst", "reference/expressions/api/polars.time_ranges.rst", "reference/expressions/api/polars.var.rst", "reference/expressions/api/polars.when.rst", "reference/expressions/api/polars.zeros.rst", "reference/expressions/array.rst", "reference/expressions/binary.rst", "reference/expressions/boolean.rst", "reference/expressions/categories.rst", "reference/expressions/col.rst", "reference/expressions/columns.rst", "reference/expressions/computation.rst", "reference/expressions/functions.rst", "reference/expressions/index.rst", "reference/expressions/list.rst", "reference/expressions/meta.rst", "reference/expressions/miscellaneous.rst", "reference/expressions/modify_select.rst", "reference/expressions/name.rst", "reference/expressions/operators.rst", "reference/expressions/string.rst", "reference/expressions/struct.rst", "reference/expressions/temporal.rst", "reference/expressions/window.rst", "reference/functions.rst", "reference/index.rst", "reference/io.rst", "reference/lazyframe/aggregation.rst", "reference/lazyframe/api/polars.LazyFrame.approx_n_unique.rst", "reference/lazyframe/api/polars.LazyFrame.bottom_k.rst", "reference/lazyframe/api/polars.LazyFrame.cache.rst", "reference/lazyframe/api/polars.LazyFrame.cast.rst", "reference/lazyframe/api/polars.LazyFrame.clear.rst", "reference/lazyframe/api/polars.LazyFrame.clone.rst", "reference/lazyframe/api/polars.LazyFrame.collect.rst", "reference/lazyframe/api/polars.LazyFrame.collect_async.rst", "reference/lazyframe/api/polars.LazyFrame.collect_schema.rst", "reference/lazyframe/api/polars.LazyFrame.columns.rst", "reference/lazyframe/api/polars.LazyFrame.count.rst", "reference/lazyframe/api/polars.LazyFrame.describe.rst", "reference/lazyframe/api/polars.LazyFrame.deserialize.rst", "reference/lazyframe/api/polars.LazyFrame.drop.rst", "reference/lazyframe/api/polars.LazyFrame.drop_nans.rst", "reference/lazyframe/api/polars.LazyFrame.drop_nulls.rst", "reference/lazyframe/api/polars.LazyFrame.dtypes.rst", "reference/lazyframe/api/polars.LazyFrame.explain.rst", "reference/lazyframe/api/polars.LazyFrame.explode.rst", "reference/lazyframe/api/polars.LazyFrame.fill_nan.rst", "reference/lazyframe/api/polars.LazyFrame.fill_null.rst", "reference/lazyframe/api/polars.LazyFrame.filter.rst", "reference/lazyframe/api/polars.LazyFrame.first.rst", "reference/lazyframe/api/polars.LazyFrame.gather_every.rst", "reference/lazyframe/api/polars.LazyFrame.group_by.rst", "reference/lazyframe/api/polars.LazyFrame.group_by_dynamic.rst", "reference/lazyframe/api/polars.LazyFrame.head.rst", "reference/lazyframe/api/polars.LazyFrame.inspect.rst", "reference/lazyframe/api/polars.LazyFrame.interpolate.rst", "reference/lazyframe/api/polars.LazyFrame.join.rst", "reference/lazyframe/api/polars.LazyFrame.join_asof.rst", "reference/lazyframe/api/polars.LazyFrame.join_where.rst", "reference/lazyframe/api/polars.LazyFrame.last.rst", "reference/lazyframe/api/polars.LazyFrame.lazy.rst", "reference/lazyframe/api/polars.LazyFrame.limit.rst", "reference/lazyframe/api/polars.LazyFrame.map_batches.rst", "reference/lazyframe/api/polars.LazyFrame.max.rst", "reference/lazyframe/api/polars.LazyFrame.mean.rst", "reference/lazyframe/api/polars.LazyFrame.median.rst", "reference/lazyframe/api/polars.LazyFrame.melt.rst", "reference/lazyframe/api/polars.LazyFrame.merge_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.min.rst", "reference/lazyframe/api/polars.LazyFrame.null_count.rst", "reference/lazyframe/api/polars.LazyFrame.pipe.rst", "reference/lazyframe/api/polars.LazyFrame.profile.rst", "reference/lazyframe/api/polars.LazyFrame.quantile.rst", "reference/lazyframe/api/polars.LazyFrame.rename.rst", "reference/lazyframe/api/polars.LazyFrame.reverse.rst", "reference/lazyframe/api/polars.LazyFrame.rolling.rst", "reference/lazyframe/api/polars.LazyFrame.schema.rst", "reference/lazyframe/api/polars.LazyFrame.select.rst", "reference/lazyframe/api/polars.LazyFrame.select_seq.rst", "reference/lazyframe/api/polars.LazyFrame.serialize.rst", "reference/lazyframe/api/polars.LazyFrame.set_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.shift.rst", "reference/lazyframe/api/polars.LazyFrame.show_graph.rst", "reference/lazyframe/api/polars.LazyFrame.slice.rst", "reference/lazyframe/api/polars.LazyFrame.sort.rst", "reference/lazyframe/api/polars.LazyFrame.sql.rst", "reference/lazyframe/api/polars.LazyFrame.std.rst", "reference/lazyframe/api/polars.LazyFrame.sum.rst", "reference/lazyframe/api/polars.LazyFrame.tail.rst", "reference/lazyframe/api/polars.LazyFrame.top_k.rst", "reference/lazyframe/api/polars.LazyFrame.unique.rst", "reference/lazyframe/api/polars.LazyFrame.unnest.rst", "reference/lazyframe/api/polars.LazyFrame.unpivot.rst", "reference/lazyframe/api/polars.LazyFrame.update.rst", "reference/lazyframe/api/polars.LazyFrame.var.rst", "reference/lazyframe/api/polars.LazyFrame.width.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns_seq.rst", "reference/lazyframe/api/polars.LazyFrame.with_context.rst", "reference/lazyframe/api/polars.LazyFrame.with_row_count.rst", "reference/lazyframe/api/polars.LazyFrame.with_row_index.rst", "reference/lazyframe/api/polars.lazyframe.engine_config.GPUEngine.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.agg.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.all.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.count.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.first.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.head.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.last.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.len.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.map_groups.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.max.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.mean.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.median.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.min.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.n_unique.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.quantile.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.sum.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.tail.rst", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.cancel.rst", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.fetch.rst", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.fetch_blocking.rst", "reference/lazyframe/attributes.rst", "reference/lazyframe/descriptive.rst", "reference/lazyframe/gpu_engine.rst", "reference/lazyframe/group_by.rst", "reference/lazyframe/in_process.rst", "reference/lazyframe/index.rst", "reference/lazyframe/miscellaneous.rst", "reference/lazyframe/modify_select.rst", "reference/metadata.rst", "reference/plugins.rst", "reference/schema/index.rst", "reference/selectors.rst", "reference/series/aggregation.rst", "reference/series/api/polars.Series.__array__.rst", "reference/series/api/polars.Series.__arrow_c_stream__.rst", "reference/series/api/polars.Series.__getitem__.rst", "reference/series/api/polars.Series.abs.rst", "reference/series/api/polars.Series.alias.rst", "reference/series/api/polars.Series.all.rst", "reference/series/api/polars.Series.any.rst", "reference/series/api/polars.Series.append.rst", "reference/series/api/polars.Series.approx_n_unique.rst", "reference/series/api/polars.Series.arccos.rst", "reference/series/api/polars.Series.arccosh.rst", "reference/series/api/polars.Series.arcsin.rst", "reference/series/api/polars.Series.arcsinh.rst", "reference/series/api/polars.Series.arctan.rst", "reference/series/api/polars.Series.arctanh.rst", "reference/series/api/polars.Series.arg_max.rst", "reference/series/api/polars.Series.arg_min.rst", "reference/series/api/polars.Series.arg_sort.rst", "reference/series/api/polars.Series.arg_true.rst", "reference/series/api/polars.Series.arg_unique.rst", "reference/series/api/polars.Series.arr.all.rst", "reference/series/api/polars.Series.arr.any.rst", "reference/series/api/polars.Series.arr.arg_max.rst", "reference/series/api/polars.Series.arr.arg_min.rst", "reference/series/api/polars.Series.arr.contains.rst", "reference/series/api/polars.Series.arr.count_matches.rst", "reference/series/api/polars.Series.arr.explode.rst", "reference/series/api/polars.Series.arr.first.rst", "reference/series/api/polars.Series.arr.get.rst", "reference/series/api/polars.Series.arr.join.rst", "reference/series/api/polars.Series.arr.last.rst", "reference/series/api/polars.Series.arr.max.rst", "reference/series/api/polars.Series.arr.median.rst", "reference/series/api/polars.Series.arr.min.rst", "reference/series/api/polars.Series.arr.n_unique.rst", "reference/series/api/polars.Series.arr.reverse.rst", "reference/series/api/polars.Series.arr.shift.rst", "reference/series/api/polars.Series.arr.sort.rst", "reference/series/api/polars.Series.arr.std.rst", "reference/series/api/polars.Series.arr.sum.rst", "reference/series/api/polars.Series.arr.to_list.rst", "reference/series/api/polars.Series.arr.to_struct.rst", "reference/series/api/polars.Series.arr.unique.rst", "reference/series/api/polars.Series.arr.var.rst", "reference/series/api/polars.Series.bin.contains.rst", "reference/series/api/polars.Series.bin.decode.rst", "reference/series/api/polars.Series.bin.encode.rst", "reference/series/api/polars.Series.bin.ends_with.rst", "reference/series/api/polars.Series.bin.size.rst", "reference/series/api/polars.Series.bin.starts_with.rst", "reference/series/api/polars.Series.bitwise_and.rst", "reference/series/api/polars.Series.bitwise_count_ones.rst", "reference/series/api/polars.Series.bitwise_count_zeros.rst", "reference/series/api/polars.Series.bitwise_leading_ones.rst", "reference/series/api/polars.Series.bitwise_leading_zeros.rst", "reference/series/api/polars.Series.bitwise_or.rst", "reference/series/api/polars.Series.bitwise_trailing_ones.rst", "reference/series/api/polars.Series.bitwise_trailing_zeros.rst", "reference/series/api/polars.Series.bitwise_xor.rst", "reference/series/api/polars.Series.bottom_k.rst", "reference/series/api/polars.Series.cast.rst", "reference/series/api/polars.Series.cat.get_categories.rst", "reference/series/api/polars.Series.cat.is_local.rst", "reference/series/api/polars.Series.cat.len_bytes.rst", "reference/series/api/polars.Series.cat.len_chars.rst", "reference/series/api/polars.Series.cat.to_local.rst", "reference/series/api/polars.Series.cat.uses_lexical_ordering.rst", "reference/series/api/polars.Series.cbrt.rst", "reference/series/api/polars.Series.ceil.rst", "reference/series/api/polars.Series.chunk_lengths.rst", "reference/series/api/polars.Series.clear.rst", "reference/series/api/polars.Series.clip.rst", "reference/series/api/polars.Series.clone.rst", "reference/series/api/polars.Series.cos.rst", "reference/series/api/polars.Series.cosh.rst", "reference/series/api/polars.Series.cot.rst", "reference/series/api/polars.Series.count.rst", "reference/series/api/polars.Series.cum_count.rst", "reference/series/api/polars.Series.cum_max.rst", "reference/series/api/polars.Series.cum_min.rst", "reference/series/api/polars.Series.cum_prod.rst", "reference/series/api/polars.Series.cum_sum.rst", "reference/series/api/polars.Series.cumulative_eval.rst", "reference/series/api/polars.Series.cut.rst", "reference/series/api/polars.Series.describe.rst", "reference/series/api/polars.Series.diff.rst", "reference/series/api/polars.Series.dot.rst", "reference/series/api/polars.Series.drop_nans.rst", "reference/series/api/polars.Series.drop_nulls.rst", "reference/series/api/polars.Series.dt.add_business_days.rst", "reference/series/api/polars.Series.dt.base_utc_offset.rst", "reference/series/api/polars.Series.dt.cast_time_unit.rst", "reference/series/api/polars.Series.dt.century.rst", "reference/series/api/polars.Series.dt.combine.rst", "reference/series/api/polars.Series.dt.convert_time_zone.rst", "reference/series/api/polars.Series.dt.date.rst", "reference/series/api/polars.Series.dt.datetime.rst", "reference/series/api/polars.Series.dt.day.rst", "reference/series/api/polars.Series.dt.dst_offset.rst", "reference/series/api/polars.Series.dt.epoch.rst", "reference/series/api/polars.Series.dt.hour.rst", "reference/series/api/polars.Series.dt.is_leap_year.rst", "reference/series/api/polars.Series.dt.iso_year.rst", "reference/series/api/polars.Series.dt.max.rst", "reference/series/api/polars.Series.dt.mean.rst", "reference/series/api/polars.Series.dt.median.rst", "reference/series/api/polars.Series.dt.microsecond.rst", "reference/series/api/polars.Series.dt.millennium.rst", "reference/series/api/polars.Series.dt.millisecond.rst", "reference/series/api/polars.Series.dt.min.rst", "reference/series/api/polars.Series.dt.minute.rst", "reference/series/api/polars.Series.dt.month.rst", "reference/series/api/polars.Series.dt.month_end.rst", "reference/series/api/polars.Series.dt.month_start.rst", "reference/series/api/polars.Series.dt.nanosecond.rst", "reference/series/api/polars.Series.dt.offset_by.rst", "reference/series/api/polars.Series.dt.ordinal_day.rst", "reference/series/api/polars.Series.dt.quarter.rst", "reference/series/api/polars.Series.dt.replace_time_zone.rst", "reference/series/api/polars.Series.dt.round.rst", "reference/series/api/polars.Series.dt.second.rst", "reference/series/api/polars.Series.dt.strftime.rst", "reference/series/api/polars.Series.dt.time.rst", "reference/series/api/polars.Series.dt.timestamp.rst", "reference/series/api/polars.Series.dt.to_string.rst", "reference/series/api/polars.Series.dt.total_days.rst", "reference/series/api/polars.Series.dt.total_hours.rst", "reference/series/api/polars.Series.dt.total_microseconds.rst", "reference/series/api/polars.Series.dt.total_milliseconds.rst", "reference/series/api/polars.Series.dt.total_minutes.rst", "reference/series/api/polars.Series.dt.total_nanoseconds.rst", "reference/series/api/polars.Series.dt.total_seconds.rst", "reference/series/api/polars.Series.dt.truncate.rst", "reference/series/api/polars.Series.dt.week.rst", "reference/series/api/polars.Series.dt.weekday.rst", "reference/series/api/polars.Series.dt.with_time_unit.rst", "reference/series/api/polars.Series.dt.year.rst", "reference/series/api/polars.Series.dtype.rst", "reference/series/api/polars.Series.entropy.rst", "reference/series/api/polars.Series.eq.rst", "reference/series/api/polars.Series.eq_missing.rst", "reference/series/api/polars.Series.equals.rst", "reference/series/api/polars.Series.estimated_size.rst", "reference/series/api/polars.Series.ewm_mean.rst", "reference/series/api/polars.Series.ewm_mean_by.rst", "reference/series/api/polars.Series.ewm_std.rst", "reference/series/api/polars.Series.ewm_var.rst", "reference/series/api/polars.Series.exp.rst", "reference/series/api/polars.Series.explode.rst", "reference/series/api/polars.Series.extend.rst", "reference/series/api/polars.Series.extend_constant.rst", "reference/series/api/polars.Series.fill_nan.rst", "reference/series/api/polars.Series.fill_null.rst", "reference/series/api/polars.Series.filter.rst", "reference/series/api/polars.Series.first.rst", "reference/series/api/polars.Series.flags.rst", "reference/series/api/polars.Series.floor.rst", "reference/series/api/polars.Series.gather.rst", "reference/series/api/polars.Series.gather_every.rst", "reference/series/api/polars.Series.ge.rst", "reference/series/api/polars.Series.get_chunks.rst", "reference/series/api/polars.Series.gt.rst", "reference/series/api/polars.Series.has_nulls.rst", "reference/series/api/polars.Series.has_validity.rst", "reference/series/api/polars.Series.hash.rst", "reference/series/api/polars.Series.head.rst", "reference/series/api/polars.Series.hist.rst", "reference/series/api/polars.Series.implode.rst", "reference/series/api/polars.Series.interpolate.rst", "reference/series/api/polars.Series.interpolate_by.rst", "reference/series/api/polars.Series.is_between.rst", "reference/series/api/polars.Series.is_duplicated.rst", "reference/series/api/polars.Series.is_empty.rst", "reference/series/api/polars.Series.is_finite.rst", "reference/series/api/polars.Series.is_first_distinct.rst", "reference/series/api/polars.Series.is_in.rst", "reference/series/api/polars.Series.is_infinite.rst", "reference/series/api/polars.Series.is_last_distinct.rst", "reference/series/api/polars.Series.is_nan.rst", "reference/series/api/polars.Series.is_not_nan.rst", "reference/series/api/polars.Series.is_not_null.rst", "reference/series/api/polars.Series.is_null.rst", "reference/series/api/polars.Series.is_sorted.rst", "reference/series/api/polars.Series.is_unique.rst", "reference/series/api/polars.Series.item.rst", "reference/series/api/polars.Series.kurtosis.rst", "reference/series/api/polars.Series.last.rst", "reference/series/api/polars.Series.le.rst", "reference/series/api/polars.Series.len.rst", "reference/series/api/polars.Series.limit.rst", "reference/series/api/polars.Series.list.all.rst", "reference/series/api/polars.Series.list.any.rst", "reference/series/api/polars.Series.list.arg_max.rst", "reference/series/api/polars.Series.list.arg_min.rst", "reference/series/api/polars.Series.list.concat.rst", "reference/series/api/polars.Series.list.contains.rst", "reference/series/api/polars.Series.list.count_matches.rst", "reference/series/api/polars.Series.list.diff.rst", "reference/series/api/polars.Series.list.drop_nulls.rst", "reference/series/api/polars.Series.list.eval.rst", "reference/series/api/polars.Series.list.explode.rst", "reference/series/api/polars.Series.list.first.rst", "reference/series/api/polars.Series.list.gather.rst", "reference/series/api/polars.Series.list.gather_every.rst", "reference/series/api/polars.Series.list.get.rst", "reference/series/api/polars.Series.list.head.rst", "reference/series/api/polars.Series.list.join.rst", "reference/series/api/polars.Series.list.last.rst", "reference/series/api/polars.Series.list.len.rst", "reference/series/api/polars.Series.list.max.rst", "reference/series/api/polars.Series.list.mean.rst", "reference/series/api/polars.Series.list.median.rst", "reference/series/api/polars.Series.list.min.rst", "reference/series/api/polars.Series.list.n_unique.rst", "reference/series/api/polars.Series.list.reverse.rst", "reference/series/api/polars.Series.list.sample.rst", "reference/series/api/polars.Series.list.set_difference.rst", "reference/series/api/polars.Series.list.set_intersection.rst", "reference/series/api/polars.Series.list.set_symmetric_difference.rst", "reference/series/api/polars.Series.list.set_union.rst", "reference/series/api/polars.Series.list.shift.rst", "reference/series/api/polars.Series.list.slice.rst", "reference/series/api/polars.Series.list.sort.rst", "reference/series/api/polars.Series.list.std.rst", "reference/series/api/polars.Series.list.sum.rst", "reference/series/api/polars.Series.list.tail.rst", "reference/series/api/polars.Series.list.to_array.rst", "reference/series/api/polars.Series.list.to_struct.rst", "reference/series/api/polars.Series.list.unique.rst", "reference/series/api/polars.Series.list.var.rst", "reference/series/api/polars.Series.log.rst", "reference/series/api/polars.Series.log10.rst", "reference/series/api/polars.Series.log1p.rst", "reference/series/api/polars.Series.lower_bound.rst", "reference/series/api/polars.Series.lt.rst", "reference/series/api/polars.Series.map_elements.rst", "reference/series/api/polars.Series.max.rst", "reference/series/api/polars.Series.mean.rst", "reference/series/api/polars.Series.median.rst", "reference/series/api/polars.Series.min.rst", "reference/series/api/polars.Series.mode.rst", "reference/series/api/polars.Series.n_chunks.rst", "reference/series/api/polars.Series.n_unique.rst", "reference/series/api/polars.Series.name.rst", "reference/series/api/polars.Series.nan_max.rst", "reference/series/api/polars.Series.nan_min.rst", "reference/series/api/polars.Series.ne.rst", "reference/series/api/polars.Series.ne_missing.rst", "reference/series/api/polars.Series.new_from_index.rst", "reference/series/api/polars.Series.not_.rst", "reference/series/api/polars.Series.null_count.rst", "reference/series/api/polars.Series.pct_change.rst", "reference/series/api/polars.Series.peak_max.rst", "reference/series/api/polars.Series.peak_min.rst", "reference/series/api/polars.Series.pow.rst", "reference/series/api/polars.Series.product.rst", "reference/series/api/polars.Series.qcut.rst", "reference/series/api/polars.Series.quantile.rst", "reference/series/api/polars.Series.rank.rst", "reference/series/api/polars.Series.rechunk.rst", "reference/series/api/polars.Series.reinterpret.rst", "reference/series/api/polars.Series.rename.rst", "reference/series/api/polars.Series.replace.rst", "reference/series/api/polars.Series.replace_strict.rst", "reference/series/api/polars.Series.reshape.rst", "reference/series/api/polars.Series.reverse.rst", "reference/series/api/polars.Series.rle.rst", "reference/series/api/polars.Series.rle_id.rst", "reference/series/api/polars.Series.rolling_map.rst", "reference/series/api/polars.Series.rolling_max.rst", "reference/series/api/polars.Series.rolling_mean.rst", "reference/series/api/polars.Series.rolling_median.rst", "reference/series/api/polars.Series.rolling_min.rst", "reference/series/api/polars.Series.rolling_quantile.rst", "reference/series/api/polars.Series.rolling_skew.rst", "reference/series/api/polars.Series.rolling_std.rst", "reference/series/api/polars.Series.rolling_sum.rst", "reference/series/api/polars.Series.rolling_var.rst", "reference/series/api/polars.Series.round.rst", "reference/series/api/polars.Series.round_sig_figs.rst", "reference/series/api/polars.Series.sample.rst", "reference/series/api/polars.Series.scatter.rst", "reference/series/api/polars.Series.search_sorted.rst", "reference/series/api/polars.Series.set.rst", "reference/series/api/polars.Series.set_sorted.rst", "reference/series/api/polars.Series.shape.rst", "reference/series/api/polars.Series.shift.rst", "reference/series/api/polars.Series.shrink_dtype.rst", "reference/series/api/polars.Series.shrink_to_fit.rst", "reference/series/api/polars.Series.shuffle.rst", "reference/series/api/polars.Series.sign.rst", "reference/series/api/polars.Series.sin.rst", "reference/series/api/polars.Series.sinh.rst", "reference/series/api/polars.Series.skew.rst", "reference/series/api/polars.Series.slice.rst", "reference/series/api/polars.Series.sort.rst", "reference/series/api/polars.Series.sqrt.rst", "reference/series/api/polars.Series.std.rst", "reference/series/api/polars.Series.str.concat.rst", "reference/series/api/polars.Series.str.contains.rst", "reference/series/api/polars.Series.str.contains_any.rst", "reference/series/api/polars.Series.str.count_matches.rst", "reference/series/api/polars.Series.str.decode.rst", "reference/series/api/polars.Series.str.encode.rst", "reference/series/api/polars.Series.str.ends_with.rst", "reference/series/api/polars.Series.str.escape_regex.rst", "reference/series/api/polars.Series.str.explode.rst", "reference/series/api/polars.Series.str.extract.rst", "reference/series/api/polars.Series.str.extract_all.rst", "reference/series/api/polars.Series.str.extract_groups.rst", "reference/series/api/polars.Series.str.extract_many.rst", "reference/series/api/polars.Series.str.find.rst", "reference/series/api/polars.Series.str.find_many.rst", "reference/series/api/polars.Series.str.head.rst", "reference/series/api/polars.Series.str.join.rst", "reference/series/api/polars.Series.str.json_decode.rst", "reference/series/api/polars.Series.str.json_path_match.rst", "reference/series/api/polars.Series.str.len_bytes.rst", "reference/series/api/polars.Series.str.len_chars.rst", "reference/series/api/polars.Series.str.pad_end.rst", "reference/series/api/polars.Series.str.pad_start.rst", "reference/series/api/polars.Series.str.replace.rst", "reference/series/api/polars.Series.str.replace_all.rst", "reference/series/api/polars.Series.str.replace_many.rst", "reference/series/api/polars.Series.str.reverse.rst", "reference/series/api/polars.Series.str.slice.rst", "reference/series/api/polars.Series.str.split.rst", "reference/series/api/polars.Series.str.split_exact.rst", "reference/series/api/polars.Series.str.splitn.rst", "reference/series/api/polars.Series.str.starts_with.rst", "reference/series/api/polars.Series.str.strip_chars.rst", "reference/series/api/polars.Series.str.strip_chars_end.rst", "reference/series/api/polars.Series.str.strip_chars_start.rst", "reference/series/api/polars.Series.str.strip_prefix.rst", "reference/series/api/polars.Series.str.strip_suffix.rst", "reference/series/api/polars.Series.str.strptime.rst", "reference/series/api/polars.Series.str.tail.rst", "reference/series/api/polars.Series.str.to_date.rst", "reference/series/api/polars.Series.str.to_datetime.rst", "reference/series/api/polars.Series.str.to_decimal.rst", "reference/series/api/polars.Series.str.to_integer.rst", "reference/series/api/polars.Series.str.to_lowercase.rst", "reference/series/api/polars.Series.str.to_time.rst", "reference/series/api/polars.Series.str.to_titlecase.rst", "reference/series/api/polars.Series.str.to_uppercase.rst", "reference/series/api/polars.Series.str.zfill.rst", "reference/series/api/polars.Series.struct.field.rst", "reference/series/api/polars.Series.struct.fields.rst", "reference/series/api/polars.Series.struct.json_encode.rst", "reference/series/api/polars.Series.struct.rename_fields.rst", "reference/series/api/polars.Series.struct.schema.rst", "reference/series/api/polars.Series.struct.unnest.rst", "reference/series/api/polars.Series.sum.rst", "reference/series/api/polars.Series.tail.rst", "reference/series/api/polars.Series.tan.rst", "reference/series/api/polars.Series.tanh.rst", "reference/series/api/polars.Series.to_arrow.rst", "reference/series/api/polars.Series.to_dummies.rst", "reference/series/api/polars.Series.to_frame.rst", "reference/series/api/polars.Series.to_init_repr.rst", "reference/series/api/polars.Series.to_jax.rst", "reference/series/api/polars.Series.to_list.rst", "reference/series/api/polars.Series.to_numpy.rst", "reference/series/api/polars.Series.to_pandas.rst", "reference/series/api/polars.Series.to_physical.rst", "reference/series/api/polars.Series.to_torch.rst", "reference/series/api/polars.Series.top_k.rst", "reference/series/api/polars.Series.unique.rst", "reference/series/api/polars.Series.unique_counts.rst", "reference/series/api/polars.Series.upper_bound.rst", "reference/series/api/polars.Series.value_counts.rst", "reference/series/api/polars.Series.var.rst", "reference/series/api/polars.Series.zip_with.rst", "reference/series/array.rst", "reference/series/attributes.rst", "reference/series/binary.rst", "reference/series/boolean.rst", "reference/series/categories.rst", "reference/series/computation.rst", "reference/series/descriptive.rst", "reference/series/export.rst", "reference/series/index.rst", "reference/series/list.rst", "reference/series/miscellaneous.rst", "reference/series/modify_select.rst", "reference/series/operators.rst", "reference/series/plot.rst", "reference/series/string.rst", "reference/series/struct.rst", "reference/series/temporal.rst", "reference/sql/api/polars.SQLContext.execute.rst", "reference/sql/api/polars.SQLContext.execute_global.rst", "reference/sql/api/polars.SQLContext.register.rst", "reference/sql/api/polars.SQLContext.register_globals.rst", "reference/sql/api/polars.SQLContext.register_many.rst", "reference/sql/api/polars.SQLContext.tables.rst", "reference/sql/api/polars.SQLContext.unregister.rst", "reference/sql/clauses.rst", "reference/sql/functions/aggregate.rst", "reference/sql/functions/array.rst", "reference/sql/functions/bitwise.rst", "reference/sql/functions/conditional.rst", "reference/sql/functions/index.rst", "reference/sql/functions/math.rst", "reference/sql/functions/string.rst", "reference/sql/functions/temporal.rst", "reference/sql/functions/trigonometry.rst", "reference/sql/functions/types.rst", "reference/sql/index.rst", "reference/sql/python_api.rst", "reference/sql/set_operations.rst", "reference/sql/table_operations.rst", "reference/testing.rst"], "indexentries": {"__array__() (polars.dataframe method)": [[175, "polars.DataFrame.__array__", false]], "__array__() (polars.series method)": [[924, "polars.Series.__array__", false]], "__arrow_c_stream__() (polars.dataframe method)": [[176, "polars.DataFrame.__arrow_c_stream__", false]], "__arrow_c_stream__() (polars.series method)": [[925, "polars.Series.__arrow_c_stream__", false]], "__dataframe__() (polars.dataframe method)": [[177, "polars.DataFrame.__dataframe__", false]], "__enter__() (polars.sqlcontext method)": [[1333, "polars.SQLContext.__enter__", false]], "__exit__() (polars.sqlcontext method)": [[1333, "polars.SQLContext.__exit__", false]], "__getitem__() (polars.dataframe method)": [[178, "polars.DataFrame.__getitem__", false]], "__getitem__() (polars.series method)": [[926, "polars.Series.__getitem__", false]], "__init__() (polars.credentialprovider method)": [[31, "polars.CredentialProvider.__init__", false]], "__init__() (polars.credentialprovideraws method)": [[32, "polars.CredentialProviderAWS.__init__", false]], "__init__() (polars.credentialprovidergcp method)": [[33, "polars.CredentialProviderGCP.__init__", false]], "__init__() (polars.datatypes.array method)": [[59, "polars.datatypes.Array.__init__", false]], "__init__() (polars.datatypes.binary method)": [[60, "polars.datatypes.Binary.__init__", false]], "__init__() (polars.datatypes.boolean method)": [[61, "polars.datatypes.Boolean.__init__", false]], "__init__() (polars.datatypes.categorical method)": [[62, "polars.datatypes.Categorical.__init__", false]], "__init__() (polars.datatypes.datatype method)": [[63, "polars.datatypes.DataType.__init__", false]], "__init__() (polars.datatypes.date method)": [[64, "polars.datatypes.Date.__init__", false]], "__init__() (polars.datatypes.datetime method)": [[65, "polars.datatypes.Datetime.__init__", false]], "__init__() (polars.datatypes.decimal method)": [[66, "polars.datatypes.Decimal.__init__", false]], "__init__() (polars.datatypes.duration method)": [[67, "polars.datatypes.Duration.__init__", false]], "__init__() (polars.datatypes.enum method)": [[68, "polars.datatypes.Enum.__init__", false]], "__init__() (polars.datatypes.float32 method)": [[69, "polars.datatypes.Float32.__init__", false]], "__init__() (polars.datatypes.float64 method)": [[70, "polars.datatypes.Float64.__init__", false]], "__init__() (polars.datatypes.int128 method)": [[71, "polars.datatypes.Int128.__init__", false]], "__init__() (polars.datatypes.int16 method)": [[72, "polars.datatypes.Int16.__init__", false]], "__init__() (polars.datatypes.int32 method)": [[73, "polars.datatypes.Int32.__init__", false]], "__init__() (polars.datatypes.int64 method)": [[74, "polars.datatypes.Int64.__init__", false]], "__init__() (polars.datatypes.int8 method)": [[75, "polars.datatypes.Int8.__init__", false]], "__init__() (polars.datatypes.list method)": [[76, "polars.datatypes.List.__init__", false]], "__init__() (polars.datatypes.null method)": [[77, "polars.datatypes.Null.__init__", false]], "__init__() (polars.datatypes.object method)": [[78, "polars.datatypes.Object.__init__", false]], "__init__() (polars.datatypes.string method)": [[79, "polars.datatypes.String.__init__", false]], "__init__() (polars.datatypes.struct method)": [[80, "polars.datatypes.Struct.__init__", false]], "__init__() (polars.datatypes.time method)": [[81, "polars.datatypes.Time.__init__", false]], "__init__() (polars.datatypes.uint16 method)": [[82, "polars.datatypes.UInt16.__init__", false]], "__init__() (polars.datatypes.uint32 method)": [[83, "polars.datatypes.UInt32.__init__", false]], "__init__() (polars.datatypes.uint64 method)": [[84, "polars.datatypes.UInt64.__init__", false]], "__init__() (polars.datatypes.uint8 method)": [[85, "polars.datatypes.UInt8.__init__", false]], "__init__() (polars.datatypes.unknown method)": [[86, "polars.datatypes.Unknown.__init__", false]], "__init__() (polars.lazyframe.engine_config.gpuengine method)": [[891, "polars.lazyframe.engine_config.GPUEngine.__init__", false]], "__init__() (polars.sqlcontext method)": [[1333, "polars.SQLContext.__init__", false]], "__init__() (polars.stringcache method)": [[49, "polars.StringCache.__init__", false]], "__init__() (polars.testing.parametric.column method)": [[161, "polars.testing.parametric.column.__init__", false]], "__iter__() (polars.dataframe.group_by.groupby method)": [[297, "polars.dataframe.group_by.GroupBy.__iter__", false]], "abs() (polars.expr method)": [[327, "polars.Expr.abs", false]], "abs() (polars.series method)": [[927, "polars.Series.abs", false]], "add() (polars.expr method)": [[328, "polars.Expr.add", false]], "add_business_days() (polars.expr.dt method)": [[413, "polars.Expr.dt.add_business_days", false]], "add_business_days() (polars.series.dt method)": [[1013, "polars.Series.dt.add_business_days", false]], "agg() (polars.dataframe.group_by.groupby method)": [[298, "polars.dataframe.group_by.GroupBy.agg", false]], "agg() (polars.lazyframe.group_by.lazygroupby method)": [[892, "polars.lazyframe.group_by.LazyGroupBy.agg", false]], "agg_groups() (polars.expr method)": [[329, "polars.Expr.agg_groups", false]], "alias() (polars.expr method)": [[330, "polars.Expr.alias", false]], "alias() (polars.series method)": [[928, "polars.Series.alias", false]], "align_frames() (in module polars)": [[50, "polars.align_frames", false]], "all() (in module polars)": [[719, "polars.all", false]], "all() (in module polars.selectors)": [[922, "polars.selectors.all", false]], "all() (polars.dataframe.group_by.groupby method)": [[299, "polars.dataframe.group_by.GroupBy.all", false]], "all() (polars.expr method)": [[331, "polars.Expr.all", false]], "all() (polars.expr.arr method)": [[347, "polars.Expr.arr.all", false]], "all() (polars.expr.list method)": [[507, "polars.Expr.list.all", false]], "all() (polars.lazyframe.group_by.lazygroupby method)": [[893, "polars.lazyframe.group_by.LazyGroupBy.all", false]], "all() (polars.series method)": [[929, "polars.Series.all", false]], "all() (polars.series.arr method)": [[944, "polars.Series.arr.all", false]], "all() (polars.series.list method)": [[1114, "polars.Series.list.all", false]], "all_horizontal() (in module polars)": [[720, "polars.all_horizontal", false]], "alpha() (in module polars.selectors)": [[922, "polars.selectors.alpha", false]], "alphanumeric() (in module polars.selectors)": [[922, "polars.selectors.alphanumeric", false]], "and_() (polars.expr method)": [[332, "polars.Expr.and_", false]], "any() (in module polars)": [[721, "polars.any", false]], "any() (polars.expr method)": [[333, "polars.Expr.any", false]], "any() (polars.expr.arr method)": [[348, "polars.Expr.arr.any", false]], "any() (polars.expr.list method)": [[508, "polars.Expr.list.any", false]], "any() (polars.series method)": [[930, "polars.Series.any", false]], "any() (polars.series.arr method)": [[945, "polars.Series.arr.any", false]], "any() (polars.series.list method)": [[1115, "polars.Series.list.any", false]], "any_horizontal() (in module polars)": [[722, "polars.any_horizontal", false]], "append() (polars.expr method)": [[334, "polars.Expr.append", false]], "append() (polars.series method)": [[931, "polars.Series.append", false]], "approx_n_unique() (in module polars)": [[723, "polars.approx_n_unique", false]], "approx_n_unique() (polars.dataframe method)": [[179, "polars.DataFrame.approx_n_unique", false]], "approx_n_unique() (polars.expr method)": [[335, "polars.Expr.approx_n_unique", false]], "approx_n_unique() (polars.lazyframe method)": [[817, "polars.LazyFrame.approx_n_unique", false]], "approx_n_unique() (polars.series method)": [[932, "polars.Series.approx_n_unique", false]], "arange() (in module polars)": [[724, "polars.arange", false]], "arccos() (polars.expr method)": [[336, "polars.Expr.arccos", false]], "arccos() (polars.series method)": [[933, "polars.Series.arccos", false]], "arccosh() (polars.expr method)": [[337, "polars.Expr.arccosh", false]], "arccosh() (polars.series method)": [[934, "polars.Series.arccosh", false]], "arcsin() (polars.expr method)": [[338, "polars.Expr.arcsin", false]], "arcsin() (polars.series method)": [[935, "polars.Series.arcsin", false]], "arcsinh() (polars.expr method)": [[339, "polars.Expr.arcsinh", false]], "arcsinh() (polars.series method)": [[936, "polars.Series.arcsinh", false]], "arctan() (polars.expr method)": [[340, "polars.Expr.arctan", false]], "arctan() (polars.series method)": [[937, "polars.Series.arctan", false]], "arctan2() (in module polars)": [[725, "polars.arctan2", false]], "arctan2d() (in module polars)": [[726, "polars.arctan2d", false]], "arctanh() (polars.expr method)": [[341, "polars.Expr.arctanh", false]], "arctanh() (polars.series method)": [[938, "polars.Series.arctanh", false]], "arg_max() (polars.expr method)": [[342, "polars.Expr.arg_max", false]], "arg_max() (polars.expr.arr method)": [[349, "polars.Expr.arr.arg_max", false]], "arg_max() (polars.expr.list method)": [[509, "polars.Expr.list.arg_max", false]], "arg_max() (polars.series method)": [[939, "polars.Series.arg_max", false]], "arg_max() (polars.series.arr method)": [[946, "polars.Series.arr.arg_max", false]], "arg_max() (polars.series.list method)": [[1116, "polars.Series.list.arg_max", false]], "arg_min() (polars.expr method)": [[343, "polars.Expr.arg_min", false]], "arg_min() (polars.expr.arr method)": [[350, "polars.Expr.arr.arg_min", false]], "arg_min() (polars.expr.list method)": [[510, "polars.Expr.list.arg_min", false]], "arg_min() (polars.series method)": [[940, "polars.Series.arg_min", false]], "arg_min() (polars.series.arr method)": [[947, "polars.Series.arr.arg_min", false]], "arg_min() (polars.series.list method)": [[1117, "polars.Series.list.arg_min", false]], "arg_sort() (polars.expr method)": [[344, "polars.Expr.arg_sort", false]], "arg_sort() (polars.series method)": [[941, "polars.Series.arg_sort", false]], "arg_sort_by() (in module polars)": [[727, "polars.arg_sort_by", false]], "arg_true() (polars.expr method)": [[345, "polars.Expr.arg_true", false]], "arg_true() (polars.series method)": [[942, "polars.Series.arg_true", false]], "arg_unique() (polars.expr method)": [[346, "polars.Expr.arg_unique", false]], "arg_unique() (polars.series method)": [[943, "polars.Series.arg_unique", false]], "arg_where() (in module polars)": [[728, "polars.arg_where", false]], "array (class in polars.datatypes)": [[59, "polars.datatypes.Array", false]], "assert_frame_equal() (in module polars.testing)": [[157, "polars.testing.assert_frame_equal", false]], "assert_frame_not_equal() (in module polars.testing)": [[158, "polars.testing.assert_frame_not_equal", false]], "assert_series_equal() (in module polars.testing)": [[159, "polars.testing.assert_series_equal", false]], "assert_series_not_equal() (in module polars.testing)": [[160, "polars.testing.assert_series_not_equal", false]], "backward_fill() (polars.expr method)": [[371, "polars.Expr.backward_fill", false]], "base_utc_offset() (polars.expr.dt method)": [[414, "polars.Expr.dt.base_utc_offset", false]], "base_utc_offset() (polars.series.dt method)": [[1014, "polars.Series.dt.base_utc_offset", false]], "binary (class in polars.datatypes)": [[60, "polars.datatypes.Binary", false]], "binary() (in module polars.selectors)": [[922, "polars.selectors.binary", false]], "bitwise_and() (polars.expr method)": [[378, "polars.Expr.bitwise_and", false]], "bitwise_and() (polars.series method)": [[974, "polars.Series.bitwise_and", false]], "bitwise_count_ones() (polars.expr method)": [[379, "polars.Expr.bitwise_count_ones", false]], "bitwise_count_ones() (polars.series method)": [[975, "polars.Series.bitwise_count_ones", false]], "bitwise_count_zeros() (polars.expr method)": [[380, "polars.Expr.bitwise_count_zeros", false]], "bitwise_count_zeros() (polars.series method)": [[976, "polars.Series.bitwise_count_zeros", false]], "bitwise_leading_ones() (polars.expr method)": [[381, "polars.Expr.bitwise_leading_ones", false]], "bitwise_leading_ones() (polars.series method)": [[977, "polars.Series.bitwise_leading_ones", false]], "bitwise_leading_zeros() (polars.expr method)": [[382, "polars.Expr.bitwise_leading_zeros", false]], "bitwise_leading_zeros() (polars.series method)": [[978, "polars.Series.bitwise_leading_zeros", false]], "bitwise_or() (polars.expr method)": [[383, "polars.Expr.bitwise_or", false]], "bitwise_or() (polars.series method)": [[979, "polars.Series.bitwise_or", false]], "bitwise_trailing_ones() (polars.expr method)": [[384, "polars.Expr.bitwise_trailing_ones", false]], "bitwise_trailing_ones() (polars.series method)": [[980, "polars.Series.bitwise_trailing_ones", false]], "bitwise_trailing_zeros() (polars.expr method)": [[385, "polars.Expr.bitwise_trailing_zeros", false]], "bitwise_trailing_zeros() (polars.series method)": [[981, "polars.Series.bitwise_trailing_zeros", false]], "bitwise_xor() (polars.expr method)": [[386, "polars.Expr.bitwise_xor", false]], "bitwise_xor() (polars.series method)": [[982, "polars.Series.bitwise_xor", false]], "boolean (class in polars.datatypes)": [[61, "polars.datatypes.Boolean", false]], "boolean() (in module polars.selectors)": [[922, "polars.selectors.boolean", false]], "bottom_k() (polars.dataframe method)": [[180, "polars.DataFrame.bottom_k", false]], "bottom_k() (polars.expr method)": [[387, "polars.Expr.bottom_k", false]], "bottom_k() (polars.lazyframe method)": [[818, "polars.LazyFrame.bottom_k", false]], "bottom_k() (polars.series method)": [[983, "polars.Series.bottom_k", false]], "bottom_k_by() (polars.expr method)": [[388, "polars.Expr.bottom_k_by", false]], "build_info() (in module polars)": [[55, "polars.build_info", false]], "business_day_count() (in module polars)": [[729, "polars.business_day_count", false]], "by_dtype() (in module polars.selectors)": [[922, "polars.selectors.by_dtype", false]], "by_index() (in module polars.selectors)": [[922, "polars.selectors.by_index", false]], "by_name() (in module polars.selectors)": [[922, "polars.selectors.by_name", false]], "cache() (polars.lazyframe method)": [[819, "polars.LazyFrame.cache", false]], "cancel() (polars.lazyframe.in_process.inprocessquery method)": [[908, "polars.lazyframe.in_process.InProcessQuery.cancel", false]], "cast() (polars.dataframe method)": [[181, "polars.DataFrame.cast", false]], "cast() (polars.expr method)": [[389, "polars.Expr.cast", false]], "cast() (polars.lazyframe method)": [[820, "polars.LazyFrame.cast", false]], "cast() (polars.series method)": [[984, "polars.Series.cast", false]], "cast_time_unit() (polars.expr.dt method)": [[415, "polars.Expr.dt.cast_time_unit", false]], "cast_time_unit() (polars.series.dt method)": [[1015, "polars.Series.dt.cast_time_unit", false]], "categorical (class in polars.datatypes)": [[62, "polars.datatypes.Categorical", false]], "categorical() (in module polars.selectors)": [[922, "polars.selectors.categorical", false]], "categoricalremappingwarning": [[91, "polars.exceptions.CategoricalRemappingWarning", false]], "cbrt() (polars.expr method)": [[393, "polars.Expr.cbrt", false]], "cbrt() (polars.series method)": [[991, "polars.Series.cbrt", false]], "ceil() (polars.expr method)": [[394, "polars.Expr.ceil", false]], "ceil() (polars.series method)": [[992, "polars.Series.ceil", false]], "century() (polars.expr.dt method)": [[416, "polars.Expr.dt.century", false]], "century() (polars.series.dt method)": [[1016, "polars.Series.dt.century", false]], "chronoformatwarning": [[92, "polars.exceptions.ChronoFormatWarning", false]], "chunk_lengths() (polars.series method)": [[993, "polars.Series.chunk_lengths", false]], "clear() (polars.dataframe method)": [[182, "polars.DataFrame.clear", false]], "clear() (polars.lazyframe method)": [[821, "polars.LazyFrame.clear", false]], "clear() (polars.series method)": [[994, "polars.Series.clear", false]], "clip() (polars.expr method)": [[395, "polars.Expr.clip", false]], "clip() (polars.series method)": [[995, "polars.Series.clip", false]], "clone() (polars.dataframe method)": [[183, "polars.DataFrame.clone", false]], "clone() (polars.lazyframe method)": [[822, "polars.LazyFrame.clone", false]], "clone() (polars.series method)": [[996, "polars.Series.clone", false]], "coalesce() (in module polars)": [[730, "polars.coalesce", false]], "collect() (polars.lazyframe method)": [[823, "polars.LazyFrame.collect", false]], "collect_all() (in module polars)": [[56, "polars.collect_all", false]], "collect_all_async() (in module polars)": [[57, "polars.collect_all_async", false]], "collect_async() (polars.lazyframe method)": [[824, "polars.LazyFrame.collect_async", false]], "collect_schema() (polars.dataframe method)": [[184, "polars.DataFrame.collect_schema", false]], "collect_schema() (polars.lazyframe method)": [[825, "polars.LazyFrame.collect_schema", false]], "column (class in polars.testing.parametric)": [[161, "polars.testing.parametric.column", false]], "columnnotfounderror": [[93, "polars.exceptions.ColumnNotFoundError", false]], "columns (polars.dataframe property)": [[185, "polars.DataFrame.columns", false]], "columns (polars.lazyframe property)": [[826, "polars.LazyFrame.columns", false]], "columns() (in module polars.testing.parametric)": [[162, "polars.testing.parametric.columns", false]], "combine() (polars.expr.dt method)": [[417, "polars.Expr.dt.combine", false]], "combine() (polars.series.dt method)": [[1017, "polars.Series.dt.combine", false]], "computeerror": [[94, "polars.exceptions.ComputeError", false]], "concat() (in module polars)": [[58, "polars.concat", false]], "concat() (polars.expr.list method)": [[511, "polars.Expr.list.concat", false]], "concat() (polars.expr.str method)": [[650, "polars.Expr.str.concat", false]], "concat() (polars.series.list method)": [[1118, "polars.Series.list.concat", false]], "concat() (polars.series.str method)": [[1222, "polars.Series.str.concat", false]], "concat_arr() (in module polars)": [[731, "polars.concat_arr", false]], "concat_list() (in module polars)": [[732, "polars.concat_list", false]], "concat_str() (in module polars)": [[733, "polars.concat_str", false]], "contains() (in module polars.selectors)": [[922, "polars.selectors.contains", false]], "contains() (polars.expr.arr method)": [[351, "polars.Expr.arr.contains", false]], "contains() (polars.expr.bin method)": [[372, "polars.Expr.bin.contains", false]], "contains() (polars.expr.list method)": [[512, "polars.Expr.list.contains", false]], "contains() (polars.expr.str method)": [[651, "polars.Expr.str.contains", false]], "contains() (polars.series.arr method)": [[948, "polars.Series.arr.contains", false]], "contains() (polars.series.bin method)": [[968, "polars.Series.bin.contains", false]], "contains() (polars.series.list method)": [[1119, "polars.Series.list.contains", false]], "contains() (polars.series.str method)": [[1223, "polars.Series.str.contains", false]], "contains_any() (polars.expr.str method)": [[652, "polars.Expr.str.contains_any", false]], "contains_any() (polars.series.str method)": [[1224, "polars.Series.str.contains_any", false]], "convert_time_zone() (polars.expr.dt method)": [[418, "polars.Expr.dt.convert_time_zone", false]], "convert_time_zone() (polars.series.dt method)": [[1018, "polars.Series.dt.convert_time_zone", false]], "corr() (in module polars)": [[734, "polars.corr", false]], "corr() (polars.dataframe method)": [[186, "polars.DataFrame.corr", false]], "cos() (polars.expr method)": [[396, "polars.Expr.cos", false]], "cos() (polars.series method)": [[997, "polars.Series.cos", false]], "cosh() (polars.expr method)": [[397, "polars.Expr.cosh", false]], "cosh() (polars.series method)": [[998, "polars.Series.cosh", false]], "cot() (polars.expr method)": [[398, "polars.Expr.cot", false]], "cot() (polars.series method)": [[999, "polars.Series.cot", false]], "count() (in module polars)": [[735, "polars.count", false]], "count() (polars.dataframe method)": [[187, "polars.DataFrame.count", false]], "count() (polars.dataframe.group_by.groupby method)": [[300, "polars.dataframe.group_by.GroupBy.count", false]], "count() (polars.expr method)": [[399, "polars.Expr.count", false]], "count() (polars.lazyframe method)": [[827, "polars.LazyFrame.count", false]], "count() (polars.lazyframe.group_by.lazygroupby method)": [[894, "polars.lazyframe.group_by.LazyGroupBy.count", false]], "count() (polars.series method)": [[1000, "polars.Series.count", false]], "count_matches() (polars.expr.arr method)": [[352, "polars.Expr.arr.count_matches", false]], "count_matches() (polars.expr.list method)": [[513, "polars.Expr.list.count_matches", false]], "count_matches() (polars.expr.str method)": [[653, "polars.Expr.str.count_matches", false]], "count_matches() (polars.series.arr method)": [[949, "polars.Series.arr.count_matches", false]], "count_matches() (polars.series.list method)": [[1120, "polars.Series.list.count_matches", false]], "count_matches() (polars.series.str method)": [[1225, "polars.Series.str.count_matches", false]], "cov() (in module polars)": [[736, "polars.cov", false]], "create_list_strategy() (in module polars.testing.parametric)": [[163, "polars.testing.parametric.create_list_strategy", false]], "credentialprovider (class in polars)": [[31, "polars.CredentialProvider", false]], "credentialprovideraws (class in polars)": [[32, "polars.CredentialProviderAWS", false]], "credentialprovidergcp (class in polars)": [[33, "polars.CredentialProviderGCP", false]], "cum_count() (in module polars)": [[737, "polars.cum_count", false]], "cum_count() (polars.expr method)": [[400, "polars.Expr.cum_count", false]], "cum_count() (polars.series method)": [[1001, "polars.Series.cum_count", false]], "cum_fold() (in module polars)": [[738, "polars.cum_fold", false]], "cum_max() (polars.expr method)": [[401, "polars.Expr.cum_max", false]], "cum_max() (polars.series method)": [[1002, "polars.Series.cum_max", false]], "cum_min() (polars.expr method)": [[402, "polars.Expr.cum_min", false]], "cum_min() (polars.series method)": [[1003, "polars.Series.cum_min", false]], "cum_prod() (polars.expr method)": [[403, "polars.Expr.cum_prod", false]], "cum_prod() (polars.series method)": [[1004, "polars.Series.cum_prod", false]], "cum_reduce() (in module polars)": [[739, "polars.cum_reduce", false]], "cum_sum() (in module polars)": [[740, "polars.cum_sum", false]], "cum_sum() (polars.expr method)": [[404, "polars.Expr.cum_sum", false]], "cum_sum() (polars.series method)": [[1005, "polars.Series.cum_sum", false]], "cum_sum_horizontal() (in module polars)": [[741, "polars.cum_sum_horizontal", false]], "cumulative_eval() (polars.expr method)": [[405, "polars.Expr.cumulative_eval", false]], "cumulative_eval() (polars.series method)": [[1006, "polars.Series.cumulative_eval", false]], "customufuncwarning": [[95, "polars.exceptions.CustomUFuncWarning", false]], "cut() (polars.expr method)": [[406, "polars.Expr.cut", false]], "cut() (polars.series method)": [[1007, "polars.Series.cut", false]], "dataframes() (in module polars.testing.parametric)": [[164, "polars.testing.parametric.dataframes", false]], "dataorientationwarning": [[96, "polars.exceptions.DataOrientationWarning", false]], "datatype (class in polars.datatypes)": [[63, "polars.datatypes.DataType", false]], "date (class in polars.datatypes)": [[64, "polars.datatypes.Date", false]], "date() (in module polars)": [[742, "polars.date", false]], "date() (in module polars.selectors)": [[922, "polars.selectors.date", false]], "date() (polars.expr.dt method)": [[419, "polars.Expr.dt.date", false]], "date() (polars.series.dt method)": [[1019, "polars.Series.dt.date", false]], "date_range() (in module polars)": [[743, "polars.date_range", false]], "date_ranges() (in module polars)": [[744, "polars.date_ranges", false]], "datetime (class in polars.datatypes)": [[65, "polars.datatypes.Datetime", false]], "datetime() (in module polars)": [[745, "polars.datetime", false]], "datetime() (in module polars.selectors)": [[922, "polars.selectors.datetime", false]], "datetime() (polars.expr.dt method)": [[420, "polars.Expr.dt.datetime", false]], "datetime() (polars.series.dt method)": [[1020, "polars.Series.dt.datetime", false]], "datetime_range() (in module polars)": [[746, "polars.datetime_range", false]], "datetime_ranges() (in module polars)": [[747, "polars.datetime_ranges", false]], "day() (polars.expr.dt method)": [[421, "polars.Expr.dt.day", false]], "day() (polars.series.dt method)": [[1021, "polars.Series.dt.day", false]], "decimal (class in polars.datatypes)": [[66, "polars.datatypes.Decimal", false]], "decimal() (in module polars.selectors)": [[922, "polars.selectors.decimal", false]], "decode() (polars.expr.bin method)": [[373, "polars.Expr.bin.decode", false]], "decode() (polars.expr.str method)": [[654, "polars.Expr.str.decode", false]], "decode() (polars.series.bin method)": [[969, "polars.Series.bin.decode", false]], "decode() (polars.series.str method)": [[1226, "polars.Series.str.decode", false]], "degrees() (polars.expr method)": [[407, "polars.Expr.degrees", false]], "describe() (polars.dataframe method)": [[188, "polars.DataFrame.describe", false]], "describe() (polars.lazyframe method)": [[828, "polars.LazyFrame.describe", false]], "describe() (polars.series method)": [[1008, "polars.Series.describe", false]], "deserialize() (polars.dataframe class method)": [[189, "polars.DataFrame.deserialize", false]], "deserialize() (polars.expr class method)": [[408, "polars.Expr.deserialize", false]], "deserialize() (polars.lazyframe class method)": [[829, "polars.LazyFrame.deserialize", false]], "diff() (polars.expr method)": [[409, "polars.Expr.diff", false]], "diff() (polars.expr.list method)": [[514, "polars.Expr.list.diff", false]], "diff() (polars.series method)": [[1009, "polars.Series.diff", false]], "diff() (polars.series.list method)": [[1121, "polars.Series.list.diff", false]], "digit() (in module polars.selectors)": [[922, "polars.selectors.digit", false]], "disable_string_cache() (in module polars)": [[88, "polars.disable_string_cache", false]], "dot() (polars.expr method)": [[410, "polars.Expr.dot", false]], "dot() (polars.series method)": [[1010, "polars.Series.dot", false]], "drop() (polars.dataframe method)": [[190, "polars.DataFrame.drop", false]], "drop() (polars.lazyframe method)": [[830, "polars.LazyFrame.drop", false]], "drop_in_place() (polars.dataframe method)": [[191, "polars.DataFrame.drop_in_place", false]], "drop_nans() (polars.dataframe method)": [[192, "polars.DataFrame.drop_nans", false]], "drop_nans() (polars.expr method)": [[411, "polars.Expr.drop_nans", false]], "drop_nans() (polars.lazyframe method)": [[831, "polars.LazyFrame.drop_nans", false]], "drop_nans() (polars.series method)": [[1011, "polars.Series.drop_nans", false]], "drop_nulls() (polars.dataframe method)": [[193, "polars.DataFrame.drop_nulls", false]], "drop_nulls() (polars.expr method)": [[412, "polars.Expr.drop_nulls", false]], "drop_nulls() (polars.expr.list method)": [[515, "polars.Expr.list.drop_nulls", false]], "drop_nulls() (polars.lazyframe method)": [[832, "polars.LazyFrame.drop_nulls", false]], "drop_nulls() (polars.series method)": [[1012, "polars.Series.drop_nulls", false]], "drop_nulls() (polars.series.list method)": [[1122, "polars.Series.list.drop_nulls", false]], "dst_offset() (polars.expr.dt method)": [[422, "polars.Expr.dt.dst_offset", false]], "dst_offset() (polars.series.dt method)": [[1022, "polars.Series.dt.dst_offset", false]], "dtype (polars.series property)": [[1061, "polars.Series.dtype", false]], "dtypes (polars.dataframe property)": [[194, "polars.DataFrame.dtypes", false]], "dtypes (polars.lazyframe property)": [[833, "polars.LazyFrame.dtypes", false]], "dtypes() (in module polars.testing.parametric)": [[165, "polars.testing.parametric.dtypes", false]], "duplicateerror": [[97, "polars.exceptions.DuplicateError", false]], "duration (class in polars.datatypes)": [[67, "polars.datatypes.Duration", false]], "duration() (in module polars)": [[748, "polars.duration", false]], "duration() (in module polars.selectors)": [[922, "polars.selectors.duration", false]], "element() (in module polars)": [[749, "polars.element", false]], "enable_string_cache() (in module polars)": [[89, "polars.enable_string_cache", false]], "encode() (polars.expr.bin method)": [[374, "polars.Expr.bin.encode", false]], "encode() (polars.expr.str method)": [[655, "polars.Expr.str.encode", false]], "encode() (polars.series.bin method)": [[970, "polars.Series.bin.encode", false]], "encode() (polars.series.str method)": [[1227, "polars.Series.str.encode", false]], "ends_with() (in module polars.selectors)": [[922, "polars.selectors.ends_with", false]], "ends_with() (polars.expr.bin method)": [[375, "polars.Expr.bin.ends_with", false]], "ends_with() (polars.expr.str method)": [[656, "polars.Expr.str.ends_with", false]], "ends_with() (polars.series.bin method)": [[971, "polars.Series.bin.ends_with", false]], "ends_with() (polars.series.str method)": [[1228, "polars.Series.str.ends_with", false]], "entropy() (polars.expr method)": [[457, "polars.Expr.entropy", false]], "entropy() (polars.series method)": [[1062, "polars.Series.entropy", false]], "enum (class in polars.datatypes)": [[68, "polars.datatypes.Enum", false]], "epoch() (polars.expr.dt method)": [[423, "polars.Expr.dt.epoch", false]], "epoch() (polars.series.dt method)": [[1023, "polars.Series.dt.epoch", false]], "eq() (polars.expr method)": [[458, "polars.Expr.eq", false]], "eq() (polars.expr.meta method)": [[557, "polars.Expr.meta.eq", false]], "eq() (polars.series method)": [[1063, "polars.Series.eq", false]], "eq_missing() (polars.expr method)": [[459, "polars.Expr.eq_missing", false]], "eq_missing() (polars.series method)": [[1064, "polars.Series.eq_missing", false]], "equals() (polars.dataframe method)": [[195, "polars.DataFrame.equals", false]], "equals() (polars.series method)": [[1065, "polars.Series.equals", false]], "escape_regex() (in module polars)": [[90, "polars.escape_regex", false]], "escape_regex() (polars.expr.str method)": [[657, "polars.Expr.str.escape_regex", false]], "escape_regex() (polars.series.str method)": [[1229, "polars.Series.str.escape_regex", false]], "estimated_size() (polars.dataframe method)": [[196, "polars.DataFrame.estimated_size", false]], "estimated_size() (polars.series method)": [[1066, "polars.Series.estimated_size", false]], "eval() (polars.expr.list method)": [[516, "polars.Expr.list.eval", false]], "eval() (polars.series.list method)": [[1123, "polars.Series.list.eval", false]], "ewm_mean() (polars.expr method)": [[460, "polars.Expr.ewm_mean", false]], "ewm_mean() (polars.series method)": [[1067, "polars.Series.ewm_mean", false]], "ewm_mean_by() (polars.expr method)": [[461, "polars.Expr.ewm_mean_by", false]], "ewm_mean_by() (polars.series method)": [[1068, "polars.Series.ewm_mean_by", false]], "ewm_std() (polars.expr method)": [[462, "polars.Expr.ewm_std", false]], "ewm_std() (polars.series method)": [[1069, "polars.Series.ewm_std", false]], "ewm_var() (polars.expr method)": [[463, "polars.Expr.ewm_var", false]], "ewm_var() (polars.series method)": [[1070, "polars.Series.ewm_var", false]], "exclude() (in module polars)": [[750, "polars.exclude", false]], "exclude() (in module polars.selectors)": [[922, "polars.selectors.exclude", false]], "exclude() (polars.expr method)": [[464, "polars.Expr.exclude", false]], "execute() (polars.sqlcontext method)": [[1314, "polars.SQLContext.execute", false]], "execute_global() (polars.sqlcontext class method)": [[1315, "polars.SQLContext.execute_global", false]], "exp() (polars.expr method)": [[465, "polars.Expr.exp", false]], "exp() (polars.series method)": [[1071, "polars.Series.exp", false]], "expand_selector() (in module polars.selectors)": [[922, "polars.selectors.expand_selector", false]], "explain() (polars.lazyframe method)": [[834, "polars.LazyFrame.explain", false]], "explode() (polars.dataframe method)": [[197, "polars.DataFrame.explode", false]], "explode() (polars.expr method)": [[466, "polars.Expr.explode", false]], "explode() (polars.expr.arr method)": [[353, "polars.Expr.arr.explode", false]], "explode() (polars.expr.list method)": [[517, "polars.Expr.list.explode", false]], "explode() (polars.expr.str method)": [[658, "polars.Expr.str.explode", false]], "explode() (polars.lazyframe method)": [[835, "polars.LazyFrame.explode", false]], "explode() (polars.series method)": [[1072, "polars.Series.explode", false]], "explode() (polars.series.arr method)": [[950, "polars.Series.arr.explode", false]], "explode() (polars.series.list method)": [[1124, "polars.Series.list.explode", false]], "explode() (polars.series.str method)": [[1230, "polars.Series.str.explode", false]], "extend() (polars.dataframe method)": [[198, "polars.DataFrame.extend", false]], "extend() (polars.series method)": [[1073, "polars.Series.extend", false]], "extend_constant() (polars.expr method)": [[467, "polars.Expr.extend_constant", false]], "extend_constant() (polars.series method)": [[1074, "polars.Series.extend_constant", false]], "extract() (polars.expr.str method)": [[659, "polars.Expr.str.extract", false]], "extract() (polars.series.str method)": [[1231, "polars.Series.str.extract", false]], "extract_all() (polars.expr.str method)": [[660, "polars.Expr.str.extract_all", false]], "extract_all() (polars.series.str method)": [[1232, "polars.Series.str.extract_all", false]], "extract_groups() (polars.expr.str method)": [[661, "polars.Expr.str.extract_groups", false]], "extract_groups() (polars.series.str method)": [[1233, "polars.Series.str.extract_groups", false]], "extract_many() (polars.expr.str method)": [[662, "polars.Expr.str.extract_many", false]], "extract_many() (polars.series.str method)": [[1234, "polars.Series.str.extract_many", false]], "fetch() (polars.lazyframe.in_process.inprocessquery method)": [[909, "polars.lazyframe.in_process.InProcessQuery.fetch", false]], "fetch_blocking() (polars.lazyframe.in_process.inprocessquery method)": [[910, "polars.lazyframe.in_process.InProcessQuery.fetch_blocking", false]], "field() (polars.expr.struct method)": [[698, "polars.Expr.struct.field", false]], "field() (polars.series.struct method)": [[1270, "polars.Series.struct.field", false]], "fields (polars.series.struct attribute)": [[1271, "polars.Series.struct.fields", false]], "fill_nan() (polars.dataframe method)": [[199, "polars.DataFrame.fill_nan", false]], "fill_nan() (polars.expr method)": [[468, "polars.Expr.fill_nan", false]], "fill_nan() (polars.lazyframe method)": [[836, "polars.LazyFrame.fill_nan", false]], "fill_nan() (polars.series method)": [[1075, "polars.Series.fill_nan", false]], "fill_null() (polars.dataframe method)": [[200, "polars.DataFrame.fill_null", false]], "fill_null() (polars.expr method)": [[469, "polars.Expr.fill_null", false]], "fill_null() (polars.lazyframe method)": [[837, "polars.LazyFrame.fill_null", false]], "fill_null() (polars.series method)": [[1076, "polars.Series.fill_null", false]], "filter() (polars.dataframe method)": [[201, "polars.DataFrame.filter", false]], "filter() (polars.expr method)": [[470, "polars.Expr.filter", false]], "filter() (polars.lazyframe method)": [[838, "polars.LazyFrame.filter", false]], "filter() (polars.series method)": [[1077, "polars.Series.filter", false]], "find() (polars.expr.str method)": [[663, "polars.Expr.str.find", false]], "find() (polars.series.str method)": [[1235, "polars.Series.str.find", false]], "find_many() (polars.expr.str method)": [[664, "polars.Expr.str.find_many", false]], "find_many() (polars.series.str method)": [[1236, "polars.Series.str.find_many", false]], "first() (in module polars)": [[751, "polars.first", false]], "first() (in module polars.selectors)": [[922, "polars.selectors.first", false]], "first() (polars.dataframe.group_by.groupby method)": [[301, "polars.dataframe.group_by.GroupBy.first", false]], "first() (polars.expr method)": [[471, "polars.Expr.first", false]], "first() (polars.expr.arr method)": [[354, "polars.Expr.arr.first", false]], "first() (polars.expr.list method)": [[518, "polars.Expr.list.first", false]], "first() (polars.lazyframe method)": [[839, "polars.LazyFrame.first", false]], "first() (polars.lazyframe.group_by.lazygroupby method)": [[895, "polars.lazyframe.group_by.LazyGroupBy.first", false]], "first() (polars.series method)": [[1078, "polars.Series.first", false]], "first() (polars.series.arr method)": [[951, "polars.Series.arr.first", false]], "first() (polars.series.list method)": [[1125, "polars.Series.list.first", false]], "flags (polars.dataframe property)": [[202, "polars.DataFrame.flags", false]], "flags (polars.series property)": [[1079, "polars.Series.flags", false]], "flatten() (polars.expr method)": [[472, "polars.Expr.flatten", false]], "float() (in module polars.selectors)": [[922, "polars.selectors.float", false]], "float32 (class in polars.datatypes)": [[69, "polars.datatypes.Float32", false]], "float64 (class in polars.datatypes)": [[70, "polars.datatypes.Float64", false]], "floor() (polars.expr method)": [[473, "polars.Expr.floor", false]], "floor() (polars.series method)": [[1080, "polars.Series.floor", false]], "floordiv() (polars.expr method)": [[474, "polars.Expr.floordiv", false]], "fold() (in module polars)": [[752, "polars.fold", false]], "fold() (polars.dataframe method)": [[203, "polars.DataFrame.fold", false]], "format() (in module polars)": [[753, "polars.format", false]], "forward_fill() (polars.expr method)": [[475, "polars.Expr.forward_fill", false]], "from_arrow() (in module polars)": [[121, "polars.from_arrow", false]], "from_dataframe() (in module polars)": [[122, "polars.from_dataframe", false]], "from_dict() (in module polars)": [[123, "polars.from_dict", false]], "from_dicts() (in module polars)": [[124, "polars.from_dicts", false]], "from_epoch() (in module polars)": [[754, "polars.from_epoch", false]], "from_json() (polars.expr class method)": [[476, "polars.Expr.from_json", false]], "from_numpy() (in module polars)": [[125, "polars.from_numpy", false]], "from_pandas() (in module polars)": [[126, "polars.from_pandas", false]], "from_records() (in module polars)": [[127, "polars.from_records", false]], "from_repr() (in module polars)": [[128, "polars.from_repr", false]], "gather() (polars.expr method)": [[477, "polars.Expr.gather", false]], "gather() (polars.expr.list method)": [[519, "polars.Expr.list.gather", false]], "gather() (polars.series method)": [[1081, "polars.Series.gather", false]], "gather() (polars.series.list method)": [[1126, "polars.Series.list.gather", false]], "gather_every() (polars.dataframe method)": [[204, "polars.DataFrame.gather_every", false]], "gather_every() (polars.expr method)": [[478, "polars.Expr.gather_every", false]], "gather_every() (polars.expr.list method)": [[520, "polars.Expr.list.gather_every", false]], "gather_every() (polars.lazyframe method)": [[840, "polars.LazyFrame.gather_every", false]], "gather_every() (polars.series method)": [[1082, "polars.Series.gather_every", false]], "gather_every() (polars.series.list method)": [[1127, "polars.Series.list.gather_every", false]], "ge() (polars.expr method)": [[479, "polars.Expr.ge", false]], "ge() (polars.series method)": [[1083, "polars.Series.ge", false]], "get() (polars.expr method)": [[480, "polars.Expr.get", false]], "get() (polars.expr.arr method)": [[355, "polars.Expr.arr.get", false]], "get() (polars.expr.list method)": [[521, "polars.Expr.list.get", false]], "get() (polars.series.arr method)": [[952, "polars.Series.arr.get", false]], "get() (polars.series.list method)": [[1128, "polars.Series.list.get", false]], "get_categories() (polars.expr.cat method)": [[390, "polars.Expr.cat.get_categories", false]], "get_categories() (polars.series.cat method)": [[985, "polars.Series.cat.get_categories", false]], "get_chunks() (polars.series method)": [[1084, "polars.Series.get_chunks", false]], "get_column() (polars.dataframe method)": [[205, "polars.DataFrame.get_column", false]], "get_column_index() (polars.dataframe method)": [[206, "polars.DataFrame.get_column_index", false]], "get_columns() (polars.dataframe method)": [[207, "polars.DataFrame.get_columns", false]], "get_index_type() (in module polars)": [[129, "polars.get_index_type", false]], "glimpse() (polars.dataframe method)": [[208, "polars.DataFrame.glimpse", false]], "gpuengine (class in polars.lazyframe.engine_config)": [[891, "polars.lazyframe.engine_config.GPUEngine", false]], "group_by() (polars.dataframe method)": [[209, "polars.DataFrame.group_by", false]], "group_by() (polars.lazyframe method)": [[841, "polars.LazyFrame.group_by", false]], "group_by_dynamic() (polars.dataframe method)": [[210, "polars.DataFrame.group_by_dynamic", false]], "group_by_dynamic() (polars.lazyframe method)": [[842, "polars.LazyFrame.group_by_dynamic", false]], "groups() (in module polars)": [[755, "polars.groups", false]], "gt() (polars.expr method)": [[481, "polars.Expr.gt", false]], "gt() (polars.series method)": [[1085, "polars.Series.gt", false]], "has_multiple_outputs() (polars.expr.meta method)": [[558, "polars.Expr.meta.has_multiple_outputs", false]], "has_nulls() (polars.expr method)": [[482, "polars.Expr.has_nulls", false]], "has_nulls() (polars.series method)": [[1086, "polars.Series.has_nulls", false]], "has_validity() (polars.series method)": [[1087, "polars.Series.has_validity", false]], "hash() (polars.expr method)": [[483, "polars.Expr.hash", false]], "hash() (polars.series method)": [[1088, "polars.Series.hash", false]], "hash_rows() (polars.dataframe method)": [[211, "polars.DataFrame.hash_rows", false]], "head() (in module polars)": [[756, "polars.head", false]], "head() (polars.dataframe method)": [[212, "polars.DataFrame.head", false]], "head() (polars.dataframe.group_by.groupby method)": [[302, "polars.dataframe.group_by.GroupBy.head", false]], "head() (polars.expr method)": [[484, "polars.Expr.head", false]], "head() (polars.expr.list method)": [[522, "polars.Expr.list.head", false]], "head() (polars.expr.str method)": [[665, "polars.Expr.str.head", false]], "head() (polars.lazyframe method)": [[843, "polars.LazyFrame.head", false]], "head() (polars.lazyframe.group_by.lazygroupby method)": [[896, "polars.lazyframe.group_by.LazyGroupBy.head", false]], "head() (polars.series method)": [[1089, "polars.Series.head", false]], "head() (polars.series.list method)": [[1129, "polars.Series.list.head", false]], "head() (polars.series.str method)": [[1237, "polars.Series.str.head", false]], "height (polars.dataframe property)": [[213, "polars.DataFrame.height", false]], "hist() (polars.expr method)": [[485, "polars.Expr.hist", false]], "hist() (polars.series method)": [[1090, "polars.Series.hist", false]], "hour() (polars.expr.dt method)": [[424, "polars.Expr.dt.hour", false]], "hour() (polars.series.dt method)": [[1024, "polars.Series.dt.hour", false]], "hstack() (polars.dataframe method)": [[214, "polars.DataFrame.hstack", false]], "implode() (in module polars)": [[757, "polars.implode", false]], "implode() (polars.expr method)": [[486, "polars.Expr.implode", false]], "implode() (polars.series method)": [[1091, "polars.Series.implode", false]], "insert_column() (polars.dataframe method)": [[215, "polars.DataFrame.insert_column", false]], "inspect() (polars.expr method)": [[487, "polars.Expr.inspect", false]], "inspect() (polars.lazyframe method)": [[844, "polars.LazyFrame.inspect", false]], "int128 (class in polars.datatypes)": [[71, "polars.datatypes.Int128", false]], "int16 (class in polars.datatypes)": [[72, "polars.datatypes.Int16", false]], "int32 (class in polars.datatypes)": [[73, "polars.datatypes.Int32", false]], "int64 (class in polars.datatypes)": [[74, "polars.datatypes.Int64", false]], "int8 (class in polars.datatypes)": [[75, "polars.datatypes.Int8", false]], "int_range() (in module polars)": [[758, "polars.int_range", false]], "int_ranges() (in module polars)": [[759, "polars.int_ranges", false]], "integer() (in module polars.selectors)": [[922, "polars.selectors.integer", false]], "interpolate() (polars.dataframe method)": [[216, "polars.DataFrame.interpolate", false]], "interpolate() (polars.expr method)": [[488, "polars.Expr.interpolate", false]], "interpolate() (polars.lazyframe method)": [[845, "polars.LazyFrame.interpolate", false]], "interpolate() (polars.series method)": [[1092, "polars.Series.interpolate", false]], "interpolate_by() (polars.expr method)": [[489, "polars.Expr.interpolate_by", false]], "interpolate_by() (polars.series method)": [[1093, "polars.Series.interpolate_by", false]], "invalidoperationerror": [[98, "polars.exceptions.InvalidOperationError", false]], "is_between() (polars.expr method)": [[490, "polars.Expr.is_between", false]], "is_between() (polars.series method)": [[1094, "polars.Series.is_between", false]], "is_column() (polars.expr.meta method)": [[559, "polars.Expr.meta.is_column", false]], "is_column_selection() (polars.expr.meta method)": [[560, "polars.Expr.meta.is_column_selection", false]], "is_duplicated() (polars.dataframe method)": [[217, "polars.DataFrame.is_duplicated", false]], "is_duplicated() (polars.expr method)": [[491, "polars.Expr.is_duplicated", false]], "is_duplicated() (polars.series method)": [[1095, "polars.Series.is_duplicated", false]], "is_empty() (polars.dataframe method)": [[218, "polars.DataFrame.is_empty", false]], "is_empty() (polars.series method)": [[1096, "polars.Series.is_empty", false]], "is_finite() (polars.expr method)": [[492, "polars.Expr.is_finite", false]], "is_finite() (polars.series method)": [[1097, "polars.Series.is_finite", false]], "is_first_distinct() (polars.expr method)": [[493, "polars.Expr.is_first_distinct", false]], "is_first_distinct() (polars.series method)": [[1098, "polars.Series.is_first_distinct", false]], "is_in() (polars.expr method)": [[494, "polars.Expr.is_in", false]], "is_in() (polars.series method)": [[1099, "polars.Series.is_in", false]], "is_infinite() (polars.expr method)": [[495, "polars.Expr.is_infinite", false]], "is_infinite() (polars.series method)": [[1100, "polars.Series.is_infinite", false]], "is_last_distinct() (polars.expr method)": [[496, "polars.Expr.is_last_distinct", false]], "is_last_distinct() (polars.series method)": [[1101, "polars.Series.is_last_distinct", false]], "is_leap_year() (polars.expr.dt method)": [[425, "polars.Expr.dt.is_leap_year", false]], "is_leap_year() (polars.series.dt method)": [[1025, "polars.Series.dt.is_leap_year", false]], "is_literal() (polars.expr.meta method)": [[561, "polars.Expr.meta.is_literal", false]], "is_local() (polars.series.cat method)": [[986, "polars.Series.cat.is_local", false]], "is_nan() (polars.expr method)": [[497, "polars.Expr.is_nan", false]], "is_nan() (polars.series method)": [[1102, "polars.Series.is_nan", false]], "is_not_nan() (polars.expr method)": [[498, "polars.Expr.is_not_nan", false]], "is_not_nan() (polars.series method)": [[1103, "polars.Series.is_not_nan", false]], "is_not_null() (polars.expr method)": [[499, "polars.Expr.is_not_null", false]], "is_not_null() (polars.series method)": [[1104, "polars.Series.is_not_null", false]], "is_null() (polars.expr method)": [[500, "polars.Expr.is_null", false]], "is_null() (polars.series method)": [[1105, "polars.Series.is_null", false]], "is_regex_projection() (polars.expr.meta method)": [[562, "polars.Expr.meta.is_regex_projection", false]], "is_selector() (in module polars.selectors)": [[922, "polars.selectors.is_selector", false]], "is_sorted() (polars.series method)": [[1106, "polars.Series.is_sorted", false]], "is_unique() (polars.dataframe method)": [[219, "polars.DataFrame.is_unique", false]], "is_unique() (polars.expr method)": [[501, "polars.Expr.is_unique", false]], "is_unique() (polars.series method)": [[1107, "polars.Series.is_unique", false]], "iso_year() (polars.expr.dt method)": [[426, "polars.Expr.dt.iso_year", false]], "iso_year() (polars.series.dt method)": [[1026, "polars.Series.dt.iso_year", false]], "item() (polars.dataframe method)": [[220, "polars.DataFrame.item", false]], "item() (polars.series method)": [[1108, "polars.Series.item", false]], "iter_columns() (polars.dataframe method)": [[221, "polars.DataFrame.iter_columns", false]], "iter_rows() (polars.dataframe method)": [[222, "polars.DataFrame.iter_rows", false]], "iter_slices() (polars.dataframe method)": [[223, "polars.DataFrame.iter_slices", false]], "join() (polars.dataframe method)": [[224, "polars.DataFrame.join", false]], "join() (polars.expr.arr method)": [[356, "polars.Expr.arr.join", false]], "join() (polars.expr.list method)": [[523, "polars.Expr.list.join", false]], "join() (polars.expr.str method)": [[666, "polars.Expr.str.join", false]], "join() (polars.lazyframe method)": [[846, "polars.LazyFrame.join", false]], "join() (polars.series.arr method)": [[953, "polars.Series.arr.join", false]], "join() (polars.series.list method)": [[1130, "polars.Series.list.join", false]], "join() (polars.series.str method)": [[1238, "polars.Series.str.join", false]], "join_asof() (polars.dataframe method)": [[225, "polars.DataFrame.join_asof", false]], "join_asof() (polars.lazyframe method)": [[847, "polars.LazyFrame.join_asof", false]], "join_where() (polars.dataframe method)": [[226, "polars.DataFrame.join_where", false]], "join_where() (polars.lazyframe method)": [[848, "polars.LazyFrame.join_where", false]], "json_decode() (polars.expr.str method)": [[667, "polars.Expr.str.json_decode", false]], "json_decode() (polars.series.str method)": [[1239, "polars.Series.str.json_decode", false]], "json_encode() (polars.expr.struct method)": [[699, "polars.Expr.struct.json_encode", false]], "json_encode() (polars.series.struct method)": [[1272, "polars.Series.struct.json_encode", false]], "json_normalize() (in module polars)": [[131, "polars.json_normalize", false]], "json_path_match() (polars.expr.str method)": [[668, "polars.Expr.str.json_path_match", false]], "json_path_match() (polars.series.str method)": [[1240, "polars.Series.str.json_path_match", false]], "keep() (polars.expr.name method)": [[577, "polars.Expr.name.keep", false]], "kurtosis() (polars.expr method)": [[502, "polars.Expr.kurtosis", false]], "kurtosis() (polars.series method)": [[1109, "polars.Series.kurtosis", false]], "last() (in module polars)": [[760, "polars.last", false]], "last() (in module polars.selectors)": [[922, "polars.selectors.last", false]], "last() (polars.dataframe.group_by.groupby method)": [[303, "polars.dataframe.group_by.GroupBy.last", false]], "last() (polars.expr method)": [[503, "polars.Expr.last", false]], "last() (polars.expr.arr method)": [[357, "polars.Expr.arr.last", false]], "last() (polars.expr.list method)": [[524, "polars.Expr.list.last", false]], "last() (polars.lazyframe method)": [[849, "polars.LazyFrame.last", false]], "last() (polars.lazyframe.group_by.lazygroupby method)": [[897, "polars.lazyframe.group_by.LazyGroupBy.last", false]], "last() (polars.series method)": [[1110, "polars.Series.last", false]], "last() (polars.series.arr method)": [[954, "polars.Series.arr.last", false]], "last() (polars.series.list method)": [[1131, "polars.Series.list.last", false]], "lazy() (polars.dataframe method)": [[227, "polars.DataFrame.lazy", false]], "lazy() (polars.lazyframe method)": [[850, "polars.LazyFrame.lazy", false]], "le() (polars.expr method)": [[504, "polars.Expr.le", false]], "le() (polars.series method)": [[1111, "polars.Series.le", false]], "len() (in module polars)": [[761, "polars.len", false]], "len() (polars.dataframe.group_by.groupby method)": [[304, "polars.dataframe.group_by.GroupBy.len", false]], "len() (polars.expr method)": [[505, "polars.Expr.len", false]], "len() (polars.expr.list method)": [[525, "polars.Expr.list.len", false]], "len() (polars.lazyframe.group_by.lazygroupby method)": [[898, "polars.lazyframe.group_by.LazyGroupBy.len", false]], "len() (polars.series method)": [[1112, "polars.Series.len", false]], "len() (polars.series.list method)": [[1132, "polars.Series.list.len", false]], "len_bytes() (polars.expr.cat method)": [[391, "polars.Expr.cat.len_bytes", false]], "len_bytes() (polars.expr.str method)": [[669, "polars.Expr.str.len_bytes", false]], "len_bytes() (polars.series.cat method)": [[987, "polars.Series.cat.len_bytes", false]], "len_bytes() (polars.series.str method)": [[1241, "polars.Series.str.len_bytes", false]], "len_chars() (polars.expr.cat method)": [[392, "polars.Expr.cat.len_chars", false]], "len_chars() (polars.expr.str method)": [[670, "polars.Expr.str.len_chars", false]], "len_chars() (polars.series.cat method)": [[988, "polars.Series.cat.len_chars", false]], "len_chars() (polars.series.str method)": [[1242, "polars.Series.str.len_chars", false]], "limit() (polars.dataframe method)": [[228, "polars.DataFrame.limit", false]], "limit() (polars.expr method)": [[506, "polars.Expr.limit", false]], "limit() (polars.lazyframe method)": [[851, "polars.LazyFrame.limit", false]], "limit() (polars.series method)": [[1113, "polars.Series.limit", false]], "list (class in polars.datatypes)": [[76, "polars.datatypes.List", false]], "lists() (in module polars.testing.parametric)": [[166, "polars.testing.parametric.lists", false]], "lit() (in module polars)": [[762, "polars.lit", false]], "load() (polars.config class method)": [[2, "polars.Config.load", false]], "load_from_file() (polars.config class method)": [[3, "polars.Config.load_from_file", false]], "load_profile() (in module polars.testing.parametric)": [[167, "polars.testing.parametric.load_profile", false]], "log() (polars.expr method)": [[547, "polars.Expr.log", false]], "log() (polars.series method)": [[1154, "polars.Series.log", false]], "log10() (polars.expr method)": [[548, "polars.Expr.log10", false]], "log10() (polars.series method)": [[1155, "polars.Series.log10", false]], "log1p() (polars.expr method)": [[549, "polars.Expr.log1p", false]], "log1p() (polars.series method)": [[1156, "polars.Series.log1p", false]], "lower_bound() (polars.expr method)": [[550, "polars.Expr.lower_bound", false]], "lower_bound() (polars.series method)": [[1157, "polars.Series.lower_bound", false]], "lt() (polars.expr method)": [[551, "polars.Expr.lt", false]], "lt() (polars.series method)": [[1158, "polars.Series.lt", false]], "map() (polars.expr.name method)": [[578, "polars.Expr.name.map", false]], "map_batches() (in module polars)": [[763, "polars.map_batches", false]], "map_batches() (polars.expr method)": [[552, "polars.Expr.map_batches", false]], "map_batches() (polars.lazyframe method)": [[852, "polars.LazyFrame.map_batches", false]], "map_elements() (polars.expr method)": [[553, "polars.Expr.map_elements", false]], "map_elements() (polars.series method)": [[1159, "polars.Series.map_elements", false]], "map_fields() (polars.expr.name method)": [[579, "polars.Expr.name.map_fields", false]], "map_groups() (in module polars)": [[764, "polars.map_groups", false]], "map_groups() (polars.dataframe.group_by.groupby method)": [[305, "polars.dataframe.group_by.GroupBy.map_groups", false]], "map_groups() (polars.lazyframe.group_by.lazygroupby method)": [[899, "polars.lazyframe.group_by.LazyGroupBy.map_groups", false]], "map_rows() (polars.dataframe method)": [[229, "polars.DataFrame.map_rows", false]], "mapwithoutreturndtypewarning": [[99, "polars.exceptions.MapWithoutReturnDtypeWarning", false]], "matches() (in module polars.selectors)": [[922, "polars.selectors.matches", false]], "max() (in module polars)": [[765, "polars.max", false]], "max() (polars.dataframe method)": [[230, "polars.DataFrame.max", false]], "max() (polars.dataframe.group_by.groupby method)": [[306, "polars.dataframe.group_by.GroupBy.max", false]], "max() (polars.expr method)": [[554, "polars.Expr.max", false]], "max() (polars.expr.arr method)": [[358, "polars.Expr.arr.max", false]], "max() (polars.expr.list method)": [[526, "polars.Expr.list.max", false]], "max() (polars.lazyframe method)": [[853, "polars.LazyFrame.max", false]], "max() (polars.lazyframe.group_by.lazygroupby method)": [[900, "polars.lazyframe.group_by.LazyGroupBy.max", false]], "max() (polars.series method)": [[1160, "polars.Series.max", false]], "max() (polars.series.arr method)": [[955, "polars.Series.arr.max", false]], "max() (polars.series.dt method)": [[1027, "polars.Series.dt.max", false]], "max() (polars.series.list method)": [[1133, "polars.Series.list.max", false]], "max_horizontal() (in module polars)": [[766, "polars.max_horizontal", false]], "max_horizontal() (polars.dataframe method)": [[231, "polars.DataFrame.max_horizontal", false]], "mean() (in module polars)": [[767, "polars.mean", false]], "mean() (polars.dataframe method)": [[232, "polars.DataFrame.mean", false]], "mean() (polars.dataframe.group_by.groupby method)": [[307, "polars.dataframe.group_by.GroupBy.mean", false]], "mean() (polars.expr method)": [[555, "polars.Expr.mean", false]], "mean() (polars.expr.list method)": [[527, "polars.Expr.list.mean", false]], "mean() (polars.lazyframe method)": [[854, "polars.LazyFrame.mean", false]], "mean() (polars.lazyframe.group_by.lazygroupby method)": [[901, "polars.lazyframe.group_by.LazyGroupBy.mean", false]], "mean() (polars.series method)": [[1161, "polars.Series.mean", false]], "mean() (polars.series.dt method)": [[1028, "polars.Series.dt.mean", false]], "mean() (polars.series.list method)": [[1134, "polars.Series.list.mean", false]], "mean_horizontal() (in module polars)": [[768, "polars.mean_horizontal", false]], "mean_horizontal() (polars.dataframe method)": [[233, "polars.DataFrame.mean_horizontal", false]], "median() (in module polars)": [[769, "polars.median", false]], "median() (polars.dataframe method)": [[234, "polars.DataFrame.median", false]], "median() (polars.dataframe.group_by.groupby method)": [[308, "polars.dataframe.group_by.GroupBy.median", false]], "median() (polars.expr method)": [[556, "polars.Expr.median", false]], "median() (polars.expr.arr method)": [[359, "polars.Expr.arr.median", false]], "median() (polars.expr.list method)": [[528, "polars.Expr.list.median", false]], "median() (polars.lazyframe method)": [[855, "polars.LazyFrame.median", false]], "median() (polars.lazyframe.group_by.lazygroupby method)": [[902, "polars.lazyframe.group_by.LazyGroupBy.median", false]], "median() (polars.series method)": [[1162, "polars.Series.median", false]], "median() (polars.series.arr method)": [[956, "polars.Series.arr.median", false]], "median() (polars.series.dt method)": [[1029, "polars.Series.dt.median", false]], "median() (polars.series.list method)": [[1135, "polars.Series.list.median", false]], "melt() (polars.dataframe method)": [[235, "polars.DataFrame.melt", false]], "melt() (polars.lazyframe method)": [[856, "polars.LazyFrame.melt", false]], "merge_sorted() (polars.dataframe method)": [[236, "polars.DataFrame.merge_sorted", false]], "merge_sorted() (polars.lazyframe method)": [[857, "polars.LazyFrame.merge_sorted", false]], "microsecond() (polars.expr.dt method)": [[427, "polars.Expr.dt.microsecond", false]], "microsecond() (polars.series.dt method)": [[1030, "polars.Series.dt.microsecond", false]], "millennium() (polars.expr.dt method)": [[428, "polars.Expr.dt.millennium", false]], "millennium() (polars.series.dt method)": [[1031, "polars.Series.dt.millennium", false]], "millisecond() (polars.expr.dt method)": [[429, "polars.Expr.dt.millisecond", false]], "millisecond() (polars.series.dt method)": [[1032, "polars.Series.dt.millisecond", false]], "min() (in module polars)": [[770, "polars.min", false]], "min() (polars.dataframe method)": [[237, "polars.DataFrame.min", false]], "min() (polars.dataframe.group_by.groupby method)": [[309, "polars.dataframe.group_by.GroupBy.min", false]], "min() (polars.expr method)": [[572, "polars.Expr.min", false]], "min() (polars.expr.arr method)": [[360, "polars.Expr.arr.min", false]], "min() (polars.expr.list method)": [[529, "polars.Expr.list.min", false]], "min() (polars.lazyframe method)": [[858, "polars.LazyFrame.min", false]], "min() (polars.lazyframe.group_by.lazygroupby method)": [[903, "polars.lazyframe.group_by.LazyGroupBy.min", false]], "min() (polars.series method)": [[1163, "polars.Series.min", false]], "min() (polars.series.arr method)": [[957, "polars.Series.arr.min", false]], "min() (polars.series.dt method)": [[1033, "polars.Series.dt.min", false]], "min() (polars.series.list method)": [[1136, "polars.Series.list.min", false]], "min_horizontal() (in module polars)": [[771, "polars.min_horizontal", false]], "min_horizontal() (polars.dataframe method)": [[238, "polars.DataFrame.min_horizontal", false]], "minute() (polars.expr.dt method)": [[430, "polars.Expr.dt.minute", false]], "minute() (polars.series.dt method)": [[1034, "polars.Series.dt.minute", false]], "mod() (polars.expr method)": [[573, "polars.Expr.mod", false]], "mode() (polars.expr method)": [[574, "polars.Expr.mode", false]], "mode() (polars.series method)": [[1164, "polars.Series.mode", false]], "module": [[920, "module-polars.plugins", false], [922, "module-polars.selectors", false]], "moduleupgraderequirederror": [[100, "polars.exceptions.ModuleUpgradeRequiredError", false]], "month() (polars.expr.dt method)": [[431, "polars.Expr.dt.month", false]], "month() (polars.series.dt method)": [[1035, "polars.Series.dt.month", false]], "month_end() (polars.expr.dt method)": [[432, "polars.Expr.dt.month_end", false]], "month_end() (polars.series.dt method)": [[1036, "polars.Series.dt.month_end", false]], "month_start() (polars.expr.dt method)": [[433, "polars.Expr.dt.month_start", false]], "month_start() (polars.series.dt method)": [[1037, "polars.Series.dt.month_start", false]], "mul() (polars.expr method)": [[575, "polars.Expr.mul", false]], "n_chunks() (polars.dataframe method)": [[239, "polars.DataFrame.n_chunks", false]], "n_chunks() (polars.series method)": [[1165, "polars.Series.n_chunks", false]], "n_unique() (in module polars)": [[772, "polars.n_unique", false]], "n_unique() (polars.dataframe method)": [[240, "polars.DataFrame.n_unique", false]], "n_unique() (polars.dataframe.group_by.groupby method)": [[310, "polars.dataframe.group_by.GroupBy.n_unique", false]], "n_unique() (polars.expr method)": [[576, "polars.Expr.n_unique", false]], "n_unique() (polars.expr.arr method)": [[361, "polars.Expr.arr.n_unique", false]], "n_unique() (polars.expr.list method)": [[530, "polars.Expr.list.n_unique", false]], "n_unique() (polars.lazyframe.group_by.lazygroupby method)": [[904, "polars.lazyframe.group_by.LazyGroupBy.n_unique", false]], "n_unique() (polars.series method)": [[1166, "polars.Series.n_unique", false]], "n_unique() (polars.series.arr method)": [[958, "polars.Series.arr.n_unique", false]], "n_unique() (polars.series.list method)": [[1137, "polars.Series.list.n_unique", false]], "name (polars.series property)": [[1167, "polars.Series.name", false]], "nan_max() (polars.expr method)": [[586, "polars.Expr.nan_max", false]], "nan_max() (polars.series method)": [[1168, "polars.Series.nan_max", false]], "nan_min() (polars.expr method)": [[587, "polars.Expr.nan_min", false]], "nan_min() (polars.series method)": [[1169, "polars.Series.nan_min", false]], "nanosecond() (polars.expr.dt method)": [[434, "polars.Expr.dt.nanosecond", false]], "nanosecond() (polars.series.dt method)": [[1038, "polars.Series.dt.nanosecond", false]], "ne() (polars.expr method)": [[588, "polars.Expr.ne", false]], "ne() (polars.expr.meta method)": [[563, "polars.Expr.meta.ne", false]], "ne() (polars.series method)": [[1170, "polars.Series.ne", false]], "ne_missing() (polars.expr method)": [[589, "polars.Expr.ne_missing", false]], "ne_missing() (polars.series method)": [[1171, "polars.Series.ne_missing", false]], "neg() (polars.expr method)": [[590, "polars.Expr.neg", false]], "new_from_index() (polars.series method)": [[1172, "polars.Series.new_from_index", false]], "next_batches() (polars.io.csv.batched_reader.batchedcsvreader method)": [[130, "polars.io.csv.batched_reader.BatchedCsvReader.next_batches", false]], "nodataerror": [[101, "polars.exceptions.NoDataError", false]], "norowsreturnederror": [[102, "polars.exceptions.NoRowsReturnedError", false]], "not_() (polars.expr method)": [[591, "polars.Expr.not_", false]], "not_() (polars.series method)": [[1173, "polars.Series.not_", false]], "nth() (in module polars)": [[773, "polars.nth", false]], "null (class in polars.datatypes)": [[77, "polars.datatypes.Null", false]], "null_count() (polars.dataframe method)": [[241, "polars.DataFrame.null_count", false]], "null_count() (polars.expr method)": [[592, "polars.Expr.null_count", false]], "null_count() (polars.lazyframe method)": [[859, "polars.LazyFrame.null_count", false]], "null_count() (polars.series method)": [[1174, "polars.Series.null_count", false]], "numeric() (in module polars.selectors)": [[922, "polars.selectors.numeric", false]], "object (class in polars.datatypes)": [[78, "polars.datatypes.Object", false]], "offset_by() (polars.expr.dt method)": [[435, "polars.Expr.dt.offset_by", false]], "offset_by() (polars.series.dt method)": [[1039, "polars.Series.dt.offset_by", false]], "ones() (in module polars)": [[774, "polars.ones", false]], "or_() (polars.expr method)": [[593, "polars.Expr.or_", false]], "ordinal_day() (polars.expr.dt method)": [[436, "polars.Expr.dt.ordinal_day", false]], "ordinal_day() (polars.series.dt method)": [[1040, "polars.Series.dt.ordinal_day", false]], "outofboundserror": [[103, "polars.exceptions.OutOfBoundsError", false]], "output_name() (polars.expr.meta method)": [[564, "polars.Expr.meta.output_name", false]], "over() (polars.expr method)": [[594, "polars.Expr.over", false]], "pad_end() (polars.expr.str method)": [[671, "polars.Expr.str.pad_end", false]], "pad_end() (polars.series.str method)": [[1243, "polars.Series.str.pad_end", false]], "pad_start() (polars.expr.str method)": [[672, "polars.Expr.str.pad_start", false]], "pad_start() (polars.series.str method)": [[1244, "polars.Series.str.pad_start", false]], "panicexception": [[104, "polars.exceptions.PanicException", false]], "parametercollisionerror": [[105, "polars.exceptions.ParameterCollisionError", false]], "partition_by() (polars.dataframe method)": [[242, "polars.DataFrame.partition_by", false]], "pct_change() (polars.expr method)": [[595, "polars.Expr.pct_change", false]], "pct_change() (polars.series method)": [[1175, "polars.Series.pct_change", false]], "peak_max() (polars.expr method)": [[596, "polars.Expr.peak_max", false]], "peak_max() (polars.series method)": [[1176, "polars.Series.peak_max", false]], "peak_min() (polars.expr method)": [[597, "polars.Expr.peak_min", false]], "peak_min() (polars.series method)": [[1177, "polars.Series.peak_min", false]], "performancewarning": [[106, "polars.exceptions.PerformanceWarning", false]], "pipe() (polars.dataframe method)": [[243, "polars.DataFrame.pipe", false]], "pipe() (polars.expr method)": [[598, "polars.Expr.pipe", false]], "pipe() (polars.lazyframe method)": [[860, "polars.LazyFrame.pipe", false]], "pivot() (polars.dataframe method)": [[244, "polars.DataFrame.pivot", false]], "plot (polars.dataframe property)": [[322, "polars.DataFrame.plot", false]], "plot (polars.series property)": [[1310, "polars.Series.plot", false]], "polars.plugins": [[920, "module-polars.plugins", false]], "polars.selectors": [[922, "module-polars.selectors", false]], "polarserror": [[107, "polars.exceptions.PolarsError", false]], "polarsinefficientmapwarning": [[108, "polars.exceptions.PolarsInefficientMapWarning", false]], "polarswarning": [[109, "polars.exceptions.PolarsWarning", false]], "pop() (polars.expr.meta method)": [[565, "polars.Expr.meta.pop", false]], "pow() (polars.expr method)": [[599, "polars.Expr.pow", false]], "pow() (polars.series method)": [[1178, "polars.Series.pow", false]], "prefix() (polars.expr.name method)": [[580, "polars.Expr.name.prefix", false]], "prefix_fields() (polars.expr.name method)": [[581, "polars.Expr.name.prefix_fields", false]], "product() (polars.dataframe method)": [[245, "polars.DataFrame.product", false]], "product() (polars.expr method)": [[600, "polars.Expr.product", false]], "product() (polars.series method)": [[1179, "polars.Series.product", false]], "profile() (polars.lazyframe method)": [[861, "polars.LazyFrame.profile", false]], "qcut() (polars.expr method)": [[601, "polars.Expr.qcut", false]], "qcut() (polars.series method)": [[1180, "polars.Series.qcut", false]], "quantile() (in module polars)": [[775, "polars.quantile", false]], "quantile() (polars.dataframe method)": [[246, "polars.DataFrame.quantile", false]], "quantile() (polars.dataframe.group_by.groupby method)": [[311, "polars.dataframe.group_by.GroupBy.quantile", false]], "quantile() (polars.expr method)": [[602, "polars.Expr.quantile", false]], "quantile() (polars.lazyframe method)": [[862, "polars.LazyFrame.quantile", false]], "quantile() (polars.lazyframe.group_by.lazygroupby method)": [[905, "polars.lazyframe.group_by.LazyGroupBy.quantile", false]], "quantile() (polars.series method)": [[1181, "polars.Series.quantile", false]], "quarter() (polars.expr.dt method)": [[437, "polars.Expr.dt.quarter", false]], "quarter() (polars.series.dt method)": [[1041, "polars.Series.dt.quarter", false]], "radians() (polars.expr method)": [[603, "polars.Expr.radians", false]], "rank() (polars.expr method)": [[604, "polars.Expr.rank", false]], "rank() (polars.series method)": [[1182, "polars.Series.rank", false]], "read_avro() (in module polars)": [[132, "polars.read_avro", false]], "read_clipboard() (in module polars)": [[133, "polars.read_clipboard", false]], "read_csv() (in module polars)": [[134, "polars.read_csv", false]], "read_csv_batched() (in module polars)": [[135, "polars.read_csv_batched", false]], "read_database() (in module polars)": [[136, "polars.read_database", false]], "read_database_uri() (in module polars)": [[137, "polars.read_database_uri", false]], "read_delta() (in module polars)": [[138, "polars.read_delta", false]], "read_excel() (in module polars)": [[139, "polars.read_excel", false]], "read_ipc() (in module polars)": [[140, "polars.read_ipc", false]], "read_ipc_schema() (in module polars)": [[141, "polars.read_ipc_schema", false]], "read_ipc_stream() (in module polars)": [[142, "polars.read_ipc_stream", false]], "read_json() (in module polars)": [[143, "polars.read_json", false]], "read_ndjson() (in module polars)": [[144, "polars.read_ndjson", false]], "read_ods() (in module polars)": [[145, "polars.read_ods", false]], "read_parquet() (in module polars)": [[146, "polars.read_parquet", false]], "read_parquet_schema() (in module polars)": [[147, "polars.read_parquet_schema", false]], "rechunk() (polars.dataframe method)": [[247, "polars.DataFrame.rechunk", false]], "rechunk() (polars.expr method)": [[605, "polars.Expr.rechunk", false]], "rechunk() (polars.series method)": [[1183, "polars.Series.rechunk", false]], "reduce() (in module polars)": [[776, "polars.reduce", false]], "register() (polars.sqlcontext method)": [[1316, "polars.SQLContext.register", false]], "register_dataframe_namespace() (in module polars.api)": [[51, "polars.api.register_dataframe_namespace", false]], "register_expr_namespace() (in module polars.api)": [[52, "polars.api.register_expr_namespace", false]], "register_globals() (polars.sqlcontext method)": [[1317, "polars.SQLContext.register_globals", false]], "register_lazyframe_namespace() (in module polars.api)": [[53, "polars.api.register_lazyframe_namespace", false]], "register_many() (polars.sqlcontext method)": [[1318, "polars.SQLContext.register_many", false]], "register_plugin_function() (in module polars.plugins)": [[920, "polars.plugins.register_plugin_function", false]], "register_series_namespace() (in module polars.api)": [[54, "polars.api.register_series_namespace", false]], "reinterpret() (polars.expr method)": [[606, "polars.Expr.reinterpret", false]], "reinterpret() (polars.series method)": [[1184, "polars.Series.reinterpret", false]], "rename() (polars.dataframe method)": [[248, "polars.DataFrame.rename", false]], "rename() (polars.lazyframe method)": [[863, "polars.LazyFrame.rename", false]], "rename() (polars.series method)": [[1185, "polars.Series.rename", false]], "rename_fields() (polars.expr.struct method)": [[700, "polars.Expr.struct.rename_fields", false]], "rename_fields() (polars.series.struct method)": [[1273, "polars.Series.struct.rename_fields", false]], "repeat() (in module polars)": [[777, "polars.repeat", false]], "repeat_by() (polars.expr method)": [[607, "polars.Expr.repeat_by", false]], "replace() (polars.expr method)": [[608, "polars.Expr.replace", false]], "replace() (polars.expr.str method)": [[673, "polars.Expr.str.replace", false]], "replace() (polars.series method)": [[1186, "polars.Series.replace", false]], "replace() (polars.series.str method)": [[1245, "polars.Series.str.replace", false]], "replace_all() (polars.expr.str method)": [[674, "polars.Expr.str.replace_all", false]], "replace_all() (polars.series.str method)": [[1246, "polars.Series.str.replace_all", false]], "replace_column() (polars.dataframe method)": [[249, "polars.DataFrame.replace_column", false]], "replace_many() (polars.expr.str method)": [[675, "polars.Expr.str.replace_many", false]], "replace_many() (polars.series.str method)": [[1247, "polars.Series.str.replace_many", false]], "replace_strict() (polars.expr method)": [[609, "polars.Expr.replace_strict", false]], "replace_strict() (polars.series method)": [[1187, "polars.Series.replace_strict", false]], "replace_time_zone() (polars.expr.dt method)": [[438, "polars.Expr.dt.replace_time_zone", false]], "replace_time_zone() (polars.series.dt method)": [[1042, "polars.Series.dt.replace_time_zone", false]], "reshape() (polars.expr method)": [[610, "polars.Expr.reshape", false]], "reshape() (polars.series method)": [[1188, "polars.Series.reshape", false]], "restore_defaults() (polars.config class method)": [[4, "polars.Config.restore_defaults", false]], "reverse() (polars.dataframe method)": [[250, "polars.DataFrame.reverse", false]], "reverse() (polars.expr method)": [[611, "polars.Expr.reverse", false]], "reverse() (polars.expr.arr method)": [[362, "polars.Expr.arr.reverse", false]], "reverse() (polars.expr.list method)": [[531, "polars.Expr.list.reverse", false]], "reverse() (polars.expr.str method)": [[676, "polars.Expr.str.reverse", false]], "reverse() (polars.lazyframe method)": [[864, "polars.LazyFrame.reverse", false]], "reverse() (polars.series method)": [[1189, "polars.Series.reverse", false]], "reverse() (polars.series.arr method)": [[959, "polars.Series.arr.reverse", false]], "reverse() (polars.series.list method)": [[1138, "polars.Series.list.reverse", false]], "reverse() (polars.series.str method)": [[1248, "polars.Series.str.reverse", false]], "rle() (polars.expr method)": [[612, "polars.Expr.rle", false]], "rle() (polars.series method)": [[1190, "polars.Series.rle", false]], "rle_id() (polars.expr method)": [[613, "polars.Expr.rle_id", false]], "rle_id() (polars.series method)": [[1191, "polars.Series.rle_id", false]], "rolling() (polars.dataframe method)": [[251, "polars.DataFrame.rolling", false]], "rolling() (polars.expr method)": [[614, "polars.Expr.rolling", false]], "rolling() (polars.lazyframe method)": [[865, "polars.LazyFrame.rolling", false]], "rolling_corr() (in module polars)": [[778, "polars.rolling_corr", false]], "rolling_cov() (in module polars)": [[779, "polars.rolling_cov", false]], "rolling_map() (polars.expr method)": [[615, "polars.Expr.rolling_map", false]], "rolling_map() (polars.series method)": [[1192, "polars.Series.rolling_map", false]], "rolling_max() (polars.expr method)": [[616, "polars.Expr.rolling_max", false]], "rolling_max() (polars.series method)": [[1193, "polars.Series.rolling_max", false]], "rolling_max_by() (polars.expr method)": [[617, "polars.Expr.rolling_max_by", false]], "rolling_mean() (polars.expr method)": [[618, "polars.Expr.rolling_mean", false]], "rolling_mean() (polars.series method)": [[1194, "polars.Series.rolling_mean", false]], "rolling_mean_by() (polars.expr method)": [[619, "polars.Expr.rolling_mean_by", false]], "rolling_median() (polars.expr method)": [[620, "polars.Expr.rolling_median", false]], "rolling_median() (polars.series method)": [[1195, "polars.Series.rolling_median", false]], "rolling_median_by() (polars.expr method)": [[621, "polars.Expr.rolling_median_by", false]], "rolling_min() (polars.expr method)": [[622, "polars.Expr.rolling_min", false]], "rolling_min() (polars.series method)": [[1196, "polars.Series.rolling_min", false]], "rolling_min_by() (polars.expr method)": [[623, "polars.Expr.rolling_min_by", false]], "rolling_quantile() (polars.expr method)": [[624, "polars.Expr.rolling_quantile", false]], "rolling_quantile() (polars.series method)": [[1197, "polars.Series.rolling_quantile", false]], "rolling_quantile_by() (polars.expr method)": [[625, "polars.Expr.rolling_quantile_by", false]], "rolling_skew() (polars.expr method)": [[626, "polars.Expr.rolling_skew", false]], "rolling_skew() (polars.series method)": [[1198, "polars.Series.rolling_skew", false]], "rolling_std() (polars.expr method)": [[627, "polars.Expr.rolling_std", false]], "rolling_std() (polars.series method)": [[1199, "polars.Series.rolling_std", false]], "rolling_std_by() (polars.expr method)": [[628, "polars.Expr.rolling_std_by", false]], "rolling_sum() (polars.expr method)": [[629, "polars.Expr.rolling_sum", false]], "rolling_sum() (polars.series method)": [[1200, "polars.Series.rolling_sum", false]], "rolling_sum_by() (polars.expr method)": [[630, "polars.Expr.rolling_sum_by", false]], "rolling_var() (polars.expr method)": [[631, "polars.Expr.rolling_var", false]], "rolling_var() (polars.series method)": [[1201, "polars.Series.rolling_var", false]], "rolling_var_by() (polars.expr method)": [[632, "polars.Expr.rolling_var_by", false]], "root_names() (polars.expr.meta method)": [[566, "polars.Expr.meta.root_names", false]], "round() (polars.expr method)": [[633, "polars.Expr.round", false]], "round() (polars.expr.dt method)": [[439, "polars.Expr.dt.round", false]], "round() (polars.series method)": [[1202, "polars.Series.round", false]], "round() (polars.series.dt method)": [[1043, "polars.Series.dt.round", false]], "round_sig_figs() (polars.expr method)": [[634, "polars.Expr.round_sig_figs", false]], "round_sig_figs() (polars.series method)": [[1203, "polars.Series.round_sig_figs", false]], "row() (polars.dataframe method)": [[252, "polars.DataFrame.row", false]], "rows() (polars.dataframe method)": [[253, "polars.DataFrame.rows", false]], "rows_by_key() (polars.dataframe method)": [[254, "polars.DataFrame.rows_by_key", false]], "rowserror": [[110, "polars.exceptions.RowsError", false]], "sample() (polars.dataframe method)": [[255, "polars.DataFrame.sample", false]], "sample() (polars.expr method)": [[635, "polars.Expr.sample", false]], "sample() (polars.expr.list method)": [[532, "polars.Expr.list.sample", false]], "sample() (polars.series method)": [[1204, "polars.Series.sample", false]], "sample() (polars.series.list method)": [[1139, "polars.Series.list.sample", false]], "save() (polars.config class method)": [[5, "polars.Config.save", false]], "save_to_file() (polars.config class method)": [[6, "polars.Config.save_to_file", false]], "scan_csv() (in module polars)": [[148, "polars.scan_csv", false]], "scan_delta() (in module polars)": [[149, "polars.scan_delta", false]], "scan_iceberg() (in module polars)": [[150, "polars.scan_iceberg", false]], "scan_ipc() (in module polars)": [[151, "polars.scan_ipc", false]], "scan_ndjson() (in module polars)": [[152, "polars.scan_ndjson", false]], "scan_parquet() (in module polars)": [[153, "polars.scan_parquet", false]], "scan_pyarrow_dataset() (in module polars)": [[154, "polars.scan_pyarrow_dataset", false]], "scatter() (polars.series method)": [[1205, "polars.Series.scatter", false]], "schema (polars.dataframe property)": [[256, "polars.DataFrame.schema", false]], "schema (polars.lazyframe property)": [[866, "polars.LazyFrame.schema", false]], "schema (polars.series.struct attribute)": [[1274, "polars.Series.struct.schema", false]], "schemaerror": [[113, "polars.exceptions.SchemaError", false]], "schemafieldnotfounderror": [[114, "polars.exceptions.SchemaFieldNotFoundError", false]], "search_sorted() (polars.expr method)": [[636, "polars.Expr.search_sorted", false]], "search_sorted() (polars.series method)": [[1206, "polars.Series.search_sorted", false]], "second() (polars.expr.dt method)": [[440, "polars.Expr.dt.second", false]], "second() (polars.series.dt method)": [[1044, "polars.Series.dt.second", false]], "select() (in module polars)": [[780, "polars.select", false]], "select() (polars.dataframe method)": [[257, "polars.DataFrame.select", false]], "select() (polars.lazyframe method)": [[867, "polars.LazyFrame.select", false]], "select_seq() (polars.dataframe method)": [[258, "polars.DataFrame.select_seq", false]], "select_seq() (polars.lazyframe method)": [[868, "polars.LazyFrame.select_seq", false]], "serialize() (polars.dataframe method)": [[259, "polars.DataFrame.serialize", false]], "serialize() (polars.expr.meta method)": [[567, "polars.Expr.meta.serialize", false]], "serialize() (polars.lazyframe method)": [[869, "polars.LazyFrame.serialize", false]], "series() (in module polars.testing.parametric)": [[168, "polars.testing.parametric.series", false]], "set() (polars.series method)": [[1207, "polars.Series.set", false]], "set_ascii_tables() (polars.config class method)": [[7, "polars.Config.set_ascii_tables", false]], "set_auto_structify() (polars.config class method)": [[8, "polars.Config.set_auto_structify", false]], "set_decimal_separator() (polars.config class method)": [[9, "polars.Config.set_decimal_separator", false]], "set_difference() (polars.expr.list method)": [[533, "polars.Expr.list.set_difference", false]], "set_difference() (polars.series.list method)": [[1140, "polars.Series.list.set_difference", false]], "set_float_precision() (polars.config class method)": [[10, "polars.Config.set_float_precision", false]], "set_fmt_float() (polars.config class method)": [[11, "polars.Config.set_fmt_float", false]], "set_fmt_str_lengths() (polars.config class method)": [[12, "polars.Config.set_fmt_str_lengths", false]], "set_fmt_table_cell_list_len() (polars.config class method)": [[13, "polars.Config.set_fmt_table_cell_list_len", false]], "set_intersection() (polars.expr.list method)": [[534, "polars.Expr.list.set_intersection", false]], "set_intersection() (polars.series.list method)": [[1141, "polars.Series.list.set_intersection", false]], "set_profile() (in module polars.testing.parametric)": [[169, "polars.testing.parametric.set_profile", false]], "set_random_seed() (in module polars)": [[155, "polars.set_random_seed", false]], "set_sorted() (polars.dataframe method)": [[260, "polars.DataFrame.set_sorted", false]], "set_sorted() (polars.expr method)": [[637, "polars.Expr.set_sorted", false]], "set_sorted() (polars.lazyframe method)": [[870, "polars.LazyFrame.set_sorted", false]], "set_sorted() (polars.series method)": [[1208, "polars.Series.set_sorted", false]], "set_streaming_chunk_size() (polars.config class method)": [[14, "polars.Config.set_streaming_chunk_size", false]], "set_symmetric_difference() (polars.expr.list method)": [[535, "polars.Expr.list.set_symmetric_difference", false]], "set_symmetric_difference() (polars.series.list method)": [[1142, "polars.Series.list.set_symmetric_difference", false]], "set_tbl_cell_alignment() (polars.config class method)": [[15, "polars.Config.set_tbl_cell_alignment", false]], "set_tbl_cell_numeric_alignment() (polars.config class method)": [[16, "polars.Config.set_tbl_cell_numeric_alignment", false]], "set_tbl_cols() (polars.config class method)": [[17, "polars.Config.set_tbl_cols", false]], "set_tbl_column_data_type_inline() (polars.config class method)": [[18, "polars.Config.set_tbl_column_data_type_inline", false]], "set_tbl_dataframe_shape_below() (polars.config class method)": [[19, "polars.Config.set_tbl_dataframe_shape_below", false]], "set_tbl_formatting() (polars.config class method)": [[20, "polars.Config.set_tbl_formatting", false]], "set_tbl_hide_column_data_types() (polars.config class method)": [[21, "polars.Config.set_tbl_hide_column_data_types", false]], "set_tbl_hide_column_names() (polars.config class method)": [[22, "polars.Config.set_tbl_hide_column_names", false]], "set_tbl_hide_dataframe_shape() (polars.config class method)": [[23, "polars.Config.set_tbl_hide_dataframe_shape", false]], "set_tbl_hide_dtype_separator() (polars.config class method)": [[24, "polars.Config.set_tbl_hide_dtype_separator", false]], "set_tbl_rows() (polars.config class method)": [[25, "polars.Config.set_tbl_rows", false]], "set_tbl_width_chars() (polars.config class method)": [[26, "polars.Config.set_tbl_width_chars", false]], "set_thousands_separator() (polars.config class method)": [[27, "polars.Config.set_thousands_separator", false]], "set_trim_decimal_zeros() (polars.config class method)": [[28, "polars.Config.set_trim_decimal_zeros", false]], "set_union() (polars.expr.list method)": [[536, "polars.Expr.list.set_union", false]], "set_union() (polars.series.list method)": [[1143, "polars.Series.list.set_union", false]], "set_verbose() (polars.config class method)": [[29, "polars.Config.set_verbose", false]], "shape (polars.dataframe property)": [[261, "polars.DataFrame.shape", false]], "shape (polars.series property)": [[1209, "polars.Series.shape", false]], "shapeerror": [[115, "polars.exceptions.ShapeError", false]], "shift() (polars.dataframe method)": [[262, "polars.DataFrame.shift", false]], "shift() (polars.expr method)": [[638, "polars.Expr.shift", false]], "shift() (polars.expr.arr method)": [[363, "polars.Expr.arr.shift", false]], "shift() (polars.expr.list method)": [[537, "polars.Expr.list.shift", false]], "shift() (polars.lazyframe method)": [[871, "polars.LazyFrame.shift", false]], "shift() (polars.series method)": [[1210, "polars.Series.shift", false]], "shift() (polars.series.arr method)": [[960, "polars.Series.arr.shift", false]], "shift() (polars.series.list method)": [[1144, "polars.Series.list.shift", false]], "show_graph() (polars.expr.meta method)": [[568, "polars.Expr.meta.show_graph", false]], "show_graph() (polars.lazyframe method)": [[872, "polars.LazyFrame.show_graph", false]], "show_versions() (in module polars)": [[156, "polars.show_versions", false]], "shrink_dtype() (polars.expr method)": [[639, "polars.Expr.shrink_dtype", false]], "shrink_dtype() (polars.series method)": [[1211, "polars.Series.shrink_dtype", false]], "shrink_to_fit() (polars.dataframe method)": [[263, "polars.DataFrame.shrink_to_fit", false]], "shrink_to_fit() (polars.series method)": [[1212, "polars.Series.shrink_to_fit", false]], "shuffle() (polars.expr method)": [[640, "polars.Expr.shuffle", false]], "shuffle() (polars.series method)": [[1213, "polars.Series.shuffle", false]], "sign() (polars.expr method)": [[641, "polars.Expr.sign", false]], "sign() (polars.series method)": [[1214, "polars.Series.sign", false]], "signed_integer() (in module polars.selectors)": [[922, "polars.selectors.signed_integer", false]], "sin() (polars.expr method)": [[642, "polars.Expr.sin", false]], "sin() (polars.series method)": [[1215, "polars.Series.sin", false]], "sinh() (polars.expr method)": [[643, "polars.Expr.sinh", false]], "sinh() (polars.series method)": [[1216, "polars.Series.sinh", false]], "sink_csv() (polars.lazyframe method)": [[45, "polars.LazyFrame.sink_csv", false]], "sink_ipc() (polars.lazyframe method)": [[46, "polars.LazyFrame.sink_ipc", false]], "sink_ndjson() (polars.lazyframe method)": [[47, "polars.LazyFrame.sink_ndjson", false]], "sink_parquet() (polars.lazyframe method)": [[48, "polars.LazyFrame.sink_parquet", false]], "size() (polars.expr.bin method)": [[376, "polars.Expr.bin.size", false]], "size() (polars.series.bin method)": [[972, "polars.Series.bin.size", false]], "skew() (polars.expr method)": [[644, "polars.Expr.skew", false]], "skew() (polars.series method)": [[1217, "polars.Series.skew", false]], "slice() (polars.dataframe method)": [[264, "polars.DataFrame.slice", false]], "slice() (polars.expr method)": [[645, "polars.Expr.slice", false]], "slice() (polars.expr.list method)": [[538, "polars.Expr.list.slice", false]], "slice() (polars.expr.str method)": [[677, "polars.Expr.str.slice", false]], "slice() (polars.lazyframe method)": [[873, "polars.LazyFrame.slice", false]], "slice() (polars.series method)": [[1218, "polars.Series.slice", false]], "slice() (polars.series.list method)": [[1145, "polars.Series.list.slice", false]], "slice() (polars.series.str method)": [[1249, "polars.Series.str.slice", false]], "sort() (polars.dataframe method)": [[265, "polars.DataFrame.sort", false]], "sort() (polars.expr method)": [[646, "polars.Expr.sort", false]], "sort() (polars.expr.arr method)": [[364, "polars.Expr.arr.sort", false]], "sort() (polars.expr.list method)": [[539, "polars.Expr.list.sort", false]], "sort() (polars.lazyframe method)": [[874, "polars.LazyFrame.sort", false]], "sort() (polars.series method)": [[1219, "polars.Series.sort", false]], "sort() (polars.series.arr method)": [[961, "polars.Series.arr.sort", false]], "sort() (polars.series.list method)": [[1146, "polars.Series.list.sort", false]], "sort_by() (polars.expr method)": [[647, "polars.Expr.sort_by", false]], "split() (polars.expr.str method)": [[678, "polars.Expr.str.split", false]], "split() (polars.series.str method)": [[1250, "polars.Series.str.split", false]], "split_exact() (polars.expr.str method)": [[679, "polars.Expr.str.split_exact", false]], "split_exact() (polars.series.str method)": [[1251, "polars.Series.str.split_exact", false]], "splitn() (polars.expr.str method)": [[680, "polars.Expr.str.splitn", false]], "splitn() (polars.series.str method)": [[1252, "polars.Series.str.splitn", false]], "sql() (in module polars)": [[781, "polars.sql", false]], "sql() (polars.dataframe method)": [[266, "polars.DataFrame.sql", false]], "sql() (polars.lazyframe method)": [[875, "polars.LazyFrame.sql", false]], "sql_expr() (in module polars)": [[782, "polars.sql_expr", false]], "sqlcontext (class in polars)": [[1333, "polars.SQLContext", false]], "sqlinterfaceerror": [[111, "polars.exceptions.SQLInterfaceError", false]], "sqlsyntaxerror": [[112, "polars.exceptions.SQLSyntaxError", false]], "sqrt() (polars.expr method)": [[648, "polars.Expr.sqrt", false]], "sqrt() (polars.series method)": [[1220, "polars.Series.sqrt", false]], "starts_with() (in module polars.selectors)": [[922, "polars.selectors.starts_with", false]], "starts_with() (polars.expr.bin method)": [[377, "polars.Expr.bin.starts_with", false]], "starts_with() (polars.expr.str method)": [[681, "polars.Expr.str.starts_with", false]], "starts_with() (polars.series.bin method)": [[973, "polars.Series.bin.starts_with", false]], "starts_with() (polars.series.str method)": [[1253, "polars.Series.str.starts_with", false]], "state() (polars.config class method)": [[30, "polars.Config.state", false]], "std() (in module polars)": [[783, "polars.std", false]], "std() (polars.dataframe method)": [[267, "polars.DataFrame.std", false]], "std() (polars.expr method)": [[649, "polars.Expr.std", false]], "std() (polars.expr.arr method)": [[365, "polars.Expr.arr.std", false]], "std() (polars.expr.list method)": [[540, "polars.Expr.list.std", false]], "std() (polars.lazyframe method)": [[876, "polars.LazyFrame.std", false]], "std() (polars.series method)": [[1221, "polars.Series.std", false]], "std() (polars.series.arr method)": [[962, "polars.Series.arr.std", false]], "std() (polars.series.list method)": [[1147, "polars.Series.list.std", false]], "strftime() (polars.expr.dt method)": [[441, "polars.Expr.dt.strftime", false]], "strftime() (polars.series.dt method)": [[1045, "polars.Series.dt.strftime", false]], "string (class in polars.datatypes)": [[79, "polars.datatypes.String", false]], "string() (in module polars.selectors)": [[922, "polars.selectors.string", false]], "stringcache (class in polars)": [[49, "polars.StringCache", false]], "stringcachemismatcherror": [[116, "polars.exceptions.StringCacheMismatchError", false]], "strip_chars() (polars.expr.str method)": [[682, "polars.Expr.str.strip_chars", false]], "strip_chars() (polars.series.str method)": [[1254, "polars.Series.str.strip_chars", false]], "strip_chars_end() (polars.expr.str method)": [[683, "polars.Expr.str.strip_chars_end", false]], "strip_chars_end() (polars.series.str method)": [[1255, "polars.Series.str.strip_chars_end", false]], "strip_chars_start() (polars.expr.str method)": [[684, "polars.Expr.str.strip_chars_start", false]], "strip_chars_start() (polars.series.str method)": [[1256, "polars.Series.str.strip_chars_start", false]], "strip_prefix() (polars.expr.str method)": [[685, "polars.Expr.str.strip_prefix", false]], "strip_prefix() (polars.series.str method)": [[1257, "polars.Series.str.strip_prefix", false]], "strip_suffix() (polars.expr.str method)": [[686, "polars.Expr.str.strip_suffix", false]], "strip_suffix() (polars.series.str method)": [[1258, "polars.Series.str.strip_suffix", false]], "strptime() (polars.expr.str method)": [[687, "polars.Expr.str.strptime", false]], "strptime() (polars.series.str method)": [[1259, "polars.Series.str.strptime", false]], "struct (class in polars.datatypes)": [[80, "polars.datatypes.Struct", false]], "struct() (in module polars)": [[784, "polars.struct", false]], "structfieldnotfounderror": [[117, "polars.exceptions.StructFieldNotFoundError", false]], "style (polars.dataframe property)": [[323, "polars.DataFrame.style", false]], "sub() (polars.expr method)": [[703, "polars.Expr.sub", false]], "suffix() (polars.expr.name method)": [[582, "polars.Expr.name.suffix", false]], "suffix_fields() (polars.expr.name method)": [[583, "polars.Expr.name.suffix_fields", false]], "sum() (in module polars)": [[785, "polars.sum", false]], "sum() (polars.dataframe method)": [[268, "polars.DataFrame.sum", false]], "sum() (polars.dataframe.group_by.groupby method)": [[312, "polars.dataframe.group_by.GroupBy.sum", false]], "sum() (polars.expr method)": [[704, "polars.Expr.sum", false]], "sum() (polars.expr.arr method)": [[366, "polars.Expr.arr.sum", false]], "sum() (polars.expr.list method)": [[541, "polars.Expr.list.sum", false]], "sum() (polars.lazyframe method)": [[877, "polars.LazyFrame.sum", false]], "sum() (polars.lazyframe.group_by.lazygroupby method)": [[906, "polars.lazyframe.group_by.LazyGroupBy.sum", false]], "sum() (polars.series method)": [[1276, "polars.Series.sum", false]], "sum() (polars.series.arr method)": [[963, "polars.Series.arr.sum", false]], "sum() (polars.series.list method)": [[1148, "polars.Series.list.sum", false]], "sum_horizontal() (in module polars)": [[786, "polars.sum_horizontal", false]], "sum_horizontal() (polars.dataframe method)": [[269, "polars.DataFrame.sum_horizontal", false]], "tables() (polars.sqlcontext method)": [[1319, "polars.SQLContext.tables", false]], "tail() (in module polars)": [[787, "polars.tail", false]], "tail() (polars.dataframe method)": [[270, "polars.DataFrame.tail", false]], "tail() (polars.dataframe.group_by.groupby method)": [[313, "polars.dataframe.group_by.GroupBy.tail", false]], "tail() (polars.expr method)": [[705, "polars.Expr.tail", false]], "tail() (polars.expr.list method)": [[542, "polars.Expr.list.tail", false]], "tail() (polars.expr.str method)": [[688, "polars.Expr.str.tail", false]], "tail() (polars.lazyframe method)": [[878, "polars.LazyFrame.tail", false]], "tail() (polars.lazyframe.group_by.lazygroupby method)": [[907, "polars.lazyframe.group_by.LazyGroupBy.tail", false]], "tail() (polars.series method)": [[1277, "polars.Series.tail", false]], "tail() (polars.series.list method)": [[1149, "polars.Series.list.tail", false]], "tail() (polars.series.str method)": [[1260, "polars.Series.str.tail", false]], "tan() (polars.expr method)": [[706, "polars.Expr.tan", false]], "tan() (polars.series method)": [[1278, "polars.Series.tan", false]], "tanh() (polars.expr method)": [[707, "polars.Expr.tanh", false]], "tanh() (polars.series method)": [[1279, "polars.Series.tanh", false]], "temporal() (in module polars.selectors)": [[922, "polars.selectors.temporal", false]], "thread_pool_size() (in module polars)": [[170, "polars.thread_pool_size", false]], "threadpool_size() (in module polars)": [[171, "polars.threadpool_size", false]], "time (class in polars.datatypes)": [[81, "polars.datatypes.Time", false]], "time() (in module polars)": [[788, "polars.time", false]], "time() (in module polars.selectors)": [[922, "polars.selectors.time", false]], "time() (polars.expr.dt method)": [[442, "polars.Expr.dt.time", false]], "time() (polars.series.dt method)": [[1046, "polars.Series.dt.time", false]], "time_range() (in module polars)": [[789, "polars.time_range", false]], "time_ranges() (in module polars)": [[790, "polars.time_ranges", false]], "timestamp() (polars.expr.dt method)": [[443, "polars.Expr.dt.timestamp", false]], "timestamp() (polars.series.dt method)": [[1047, "polars.Series.dt.timestamp", false]], "to_array() (polars.expr.list method)": [[543, "polars.Expr.list.to_array", false]], "to_array() (polars.series.list method)": [[1150, "polars.Series.list.to_array", false]], "to_arrow() (polars.dataframe method)": [[271, "polars.DataFrame.to_arrow", false]], "to_arrow() (polars.series method)": [[1280, "polars.Series.to_arrow", false]], "to_date() (polars.expr.str method)": [[689, "polars.Expr.str.to_date", false]], "to_date() (polars.series.str method)": [[1261, "polars.Series.str.to_date", false]], "to_datetime() (polars.expr.str method)": [[690, "polars.Expr.str.to_datetime", false]], "to_datetime() (polars.series.str method)": [[1262, "polars.Series.str.to_datetime", false]], "to_decimal() (polars.expr.str method)": [[691, "polars.Expr.str.to_decimal", false]], "to_decimal() (polars.series.str method)": [[1263, "polars.Series.str.to_decimal", false]], "to_dict() (polars.dataframe method)": [[272, "polars.DataFrame.to_dict", false]], "to_dicts() (polars.dataframe method)": [[273, "polars.DataFrame.to_dicts", false]], "to_dummies() (polars.dataframe method)": [[274, "polars.DataFrame.to_dummies", false]], "to_dummies() (polars.series method)": [[1281, "polars.Series.to_dummies", false]], "to_frame() (polars.series method)": [[1282, "polars.Series.to_frame", false]], "to_init_repr() (polars.dataframe method)": [[275, "polars.DataFrame.to_init_repr", false]], "to_init_repr() (polars.series method)": [[1283, "polars.Series.to_init_repr", false]], "to_integer() (polars.expr.str method)": [[692, "polars.Expr.str.to_integer", false]], "to_integer() (polars.series.str method)": [[1264, "polars.Series.str.to_integer", false]], "to_jax() (polars.dataframe method)": [[276, "polars.DataFrame.to_jax", false]], "to_jax() (polars.series method)": [[1284, "polars.Series.to_jax", false]], "to_list() (polars.expr.arr method)": [[367, "polars.Expr.arr.to_list", false]], "to_list() (polars.series method)": [[1285, "polars.Series.to_list", false]], "to_list() (polars.series.arr method)": [[964, "polars.Series.arr.to_list", false]], "to_local() (polars.series.cat method)": [[989, "polars.Series.cat.to_local", false]], "to_lowercase() (polars.expr.name method)": [[584, "polars.Expr.name.to_lowercase", false]], "to_lowercase() (polars.expr.str method)": [[693, "polars.Expr.str.to_lowercase", false]], "to_lowercase() (polars.series.str method)": [[1265, "polars.Series.str.to_lowercase", false]], "to_numpy() (polars.dataframe method)": [[277, "polars.DataFrame.to_numpy", false]], "to_numpy() (polars.series method)": [[1286, "polars.Series.to_numpy", false]], "to_pandas() (polars.dataframe method)": [[278, "polars.DataFrame.to_pandas", false]], "to_pandas() (polars.series method)": [[1287, "polars.Series.to_pandas", false]], "to_physical() (polars.expr method)": [[708, "polars.Expr.to_physical", false]], "to_physical() (polars.series method)": [[1288, "polars.Series.to_physical", false]], "to_series() (polars.dataframe method)": [[279, "polars.DataFrame.to_series", false]], "to_string() (polars.expr.dt method)": [[444, "polars.Expr.dt.to_string", false]], "to_string() (polars.series.dt method)": [[1048, "polars.Series.dt.to_string", false]], "to_struct() (polars.dataframe method)": [[280, "polars.DataFrame.to_struct", false]], "to_struct() (polars.expr.arr method)": [[368, "polars.Expr.arr.to_struct", false]], "to_struct() (polars.expr.list method)": [[544, "polars.Expr.list.to_struct", false]], "to_struct() (polars.series.arr method)": [[965, "polars.Series.arr.to_struct", false]], "to_struct() (polars.series.list method)": [[1151, "polars.Series.list.to_struct", false]], "to_time() (polars.expr.str method)": [[694, "polars.Expr.str.to_time", false]], "to_time() (polars.series.str method)": [[1266, "polars.Series.str.to_time", false]], "to_titlecase() (polars.expr.str method)": [[695, "polars.Expr.str.to_titlecase", false]], "to_titlecase() (polars.series.str method)": [[1267, "polars.Series.str.to_titlecase", false]], "to_torch() (polars.dataframe method)": [[281, "polars.DataFrame.to_torch", false]], "to_torch() (polars.series method)": [[1289, "polars.Series.to_torch", false]], "to_uppercase() (polars.expr.name method)": [[585, "polars.Expr.name.to_uppercase", false]], "to_uppercase() (polars.expr.str method)": [[696, "polars.Expr.str.to_uppercase", false]], "to_uppercase() (polars.series.str method)": [[1268, "polars.Series.str.to_uppercase", false]], "toomanyrowsreturnederror": [[118, "polars.exceptions.TooManyRowsReturnedError", false]], "top_k() (polars.dataframe method)": [[282, "polars.DataFrame.top_k", false]], "top_k() (polars.expr method)": [[709, "polars.Expr.top_k", false]], "top_k() (polars.lazyframe method)": [[879, "polars.LazyFrame.top_k", false]], "top_k() (polars.series method)": [[1290, "polars.Series.top_k", false]], "top_k_by() (polars.expr method)": [[710, "polars.Expr.top_k_by", false]], "total_days() (polars.expr.dt method)": [[445, "polars.Expr.dt.total_days", false]], "total_days() (polars.series.dt method)": [[1049, "polars.Series.dt.total_days", false]], "total_hours() (polars.expr.dt method)": [[446, "polars.Expr.dt.total_hours", false]], "total_hours() (polars.series.dt method)": [[1050, "polars.Series.dt.total_hours", false]], "total_microseconds() (polars.expr.dt method)": [[447, "polars.Expr.dt.total_microseconds", false]], "total_microseconds() (polars.series.dt method)": [[1051, "polars.Series.dt.total_microseconds", false]], "total_milliseconds() (polars.expr.dt method)": [[448, "polars.Expr.dt.total_milliseconds", false]], "total_milliseconds() (polars.series.dt method)": [[1052, "polars.Series.dt.total_milliseconds", false]], "total_minutes() (polars.expr.dt method)": [[449, "polars.Expr.dt.total_minutes", false]], "total_minutes() (polars.series.dt method)": [[1053, "polars.Series.dt.total_minutes", false]], "total_nanoseconds() (polars.expr.dt method)": [[450, "polars.Expr.dt.total_nanoseconds", false]], "total_nanoseconds() (polars.series.dt method)": [[1054, "polars.Series.dt.total_nanoseconds", false]], "total_seconds() (polars.expr.dt method)": [[451, "polars.Expr.dt.total_seconds", false]], "total_seconds() (polars.series.dt method)": [[1055, "polars.Series.dt.total_seconds", false]], "transpose() (polars.dataframe method)": [[283, "polars.DataFrame.transpose", false]], "tree_format() (polars.expr.meta method)": [[569, "polars.Expr.meta.tree_format", false]], "truediv() (polars.expr method)": [[711, "polars.Expr.truediv", false]], "truncate() (polars.expr.dt method)": [[452, "polars.Expr.dt.truncate", false]], "truncate() (polars.series.dt method)": [[1056, "polars.Series.dt.truncate", false]], "uint16 (class in polars.datatypes)": [[82, "polars.datatypes.UInt16", false]], "uint32 (class in polars.datatypes)": [[83, "polars.datatypes.UInt32", false]], "uint64 (class in polars.datatypes)": [[84, "polars.datatypes.UInt64", false]], "uint8 (class in polars.datatypes)": [[85, "polars.datatypes.UInt8", false]], "undo_aliases() (polars.expr.meta method)": [[570, "polars.Expr.meta.undo_aliases", false]], "unique() (polars.dataframe method)": [[284, "polars.DataFrame.unique", false]], "unique() (polars.expr method)": [[712, "polars.Expr.unique", false]], "unique() (polars.expr.arr method)": [[369, "polars.Expr.arr.unique", false]], "unique() (polars.expr.list method)": [[545, "polars.Expr.list.unique", false]], "unique() (polars.lazyframe method)": [[880, "polars.LazyFrame.unique", false]], "unique() (polars.series method)": [[1291, "polars.Series.unique", false]], "unique() (polars.series.arr method)": [[966, "polars.Series.arr.unique", false]], "unique() (polars.series.list method)": [[1152, "polars.Series.list.unique", false]], "unique_counts() (polars.expr method)": [[713, "polars.Expr.unique_counts", false]], "unique_counts() (polars.series method)": [[1292, "polars.Series.unique_counts", false]], "unknown (class in polars.datatypes)": [[86, "polars.datatypes.Unknown", false]], "unnest() (polars.dataframe method)": [[285, "polars.DataFrame.unnest", false]], "unnest() (polars.expr.struct method)": [[701, "polars.Expr.struct.unnest", false]], "unnest() (polars.lazyframe method)": [[881, "polars.LazyFrame.unnest", false]], "unnest() (polars.series.struct method)": [[1275, "polars.Series.struct.unnest", false]], "unpivot() (polars.dataframe method)": [[286, "polars.DataFrame.unpivot", false]], "unpivot() (polars.lazyframe method)": [[882, "polars.LazyFrame.unpivot", false]], "unregister() (polars.sqlcontext method)": [[1320, "polars.SQLContext.unregister", false]], "unsigned_integer() (in module polars.selectors)": [[922, "polars.selectors.unsigned_integer", false]], "unstablewarning": [[119, "polars.exceptions.UnstableWarning", false]], "unstack() (polars.dataframe method)": [[287, "polars.DataFrame.unstack", false]], "unsuitablesqlerror": [[120, "polars.exceptions.UnsuitableSQLError", false]], "update() (polars.dataframe method)": [[288, "polars.DataFrame.update", false]], "update() (polars.lazyframe method)": [[883, "polars.LazyFrame.update", false]], "upper_bound() (polars.expr method)": [[714, "polars.Expr.upper_bound", false]], "upper_bound() (polars.series method)": [[1293, "polars.Series.upper_bound", false]], "upsample() (polars.dataframe method)": [[289, "polars.DataFrame.upsample", false]], "uses_lexical_ordering() (polars.series.cat method)": [[990, "polars.Series.cat.uses_lexical_ordering", false]], "using_string_cache() (in module polars)": [[172, "polars.using_string_cache", false]], "utf8 (in module polars.datatypes)": [[87, "polars.datatypes.Utf8", false]], "value_counts() (polars.expr method)": [[715, "polars.Expr.value_counts", false]], "value_counts() (polars.series method)": [[1294, "polars.Series.value_counts", false]], "var() (in module polars)": [[791, "polars.var", false]], "var() (polars.dataframe method)": [[290, "polars.DataFrame.var", false]], "var() (polars.expr method)": [[716, "polars.Expr.var", false]], "var() (polars.expr.arr method)": [[370, "polars.Expr.arr.var", false]], "var() (polars.expr.list method)": [[546, "polars.Expr.list.var", false]], "var() (polars.lazyframe method)": [[884, "polars.LazyFrame.var", false]], "var() (polars.series method)": [[1295, "polars.Series.var", false]], "var() (polars.series.arr method)": [[967, "polars.Series.arr.var", false]], "var() (polars.series.list method)": [[1153, "polars.Series.list.var", false]], "vstack() (polars.dataframe method)": [[291, "polars.DataFrame.vstack", false]], "week() (polars.expr.dt method)": [[453, "polars.Expr.dt.week", false]], "week() (polars.series.dt method)": [[1057, "polars.Series.dt.week", false]], "weekday() (polars.expr.dt method)": [[454, "polars.Expr.dt.weekday", false]], "weekday() (polars.series.dt method)": [[1058, "polars.Series.dt.weekday", false]], "when() (in module polars)": [[792, "polars.when", false]], "where() (polars.expr method)": [[717, "polars.Expr.where", false]], "width (polars.dataframe property)": [[292, "polars.DataFrame.width", false]], "width (polars.lazyframe property)": [[885, "polars.LazyFrame.width", false]], "with_columns() (polars.dataframe method)": [[293, "polars.DataFrame.with_columns", false]], "with_columns() (polars.lazyframe method)": [[886, "polars.LazyFrame.with_columns", false]], "with_columns_seq() (polars.dataframe method)": [[294, "polars.DataFrame.with_columns_seq", false]], "with_columns_seq() (polars.lazyframe method)": [[887, "polars.LazyFrame.with_columns_seq", false]], "with_context() (polars.lazyframe method)": [[888, "polars.LazyFrame.with_context", false]], "with_fields() (polars.expr.struct method)": [[702, "polars.Expr.struct.with_fields", false]], "with_row_count() (polars.dataframe method)": [[295, "polars.DataFrame.with_row_count", false]], "with_row_count() (polars.lazyframe method)": [[889, "polars.LazyFrame.with_row_count", false]], "with_row_index() (polars.dataframe method)": [[296, "polars.DataFrame.with_row_index", false]], "with_row_index() (polars.lazyframe method)": [[890, "polars.LazyFrame.with_row_index", false]], "with_time_unit() (polars.expr.dt method)": [[455, "polars.Expr.dt.with_time_unit", false]], "with_time_unit() (polars.series.dt method)": [[1059, "polars.Series.dt.with_time_unit", false]], "write_avro() (polars.dataframe method)": [[34, "polars.DataFrame.write_avro", false]], "write_clipboard() (polars.dataframe method)": [[35, "polars.DataFrame.write_clipboard", false]], "write_csv() (polars.dataframe method)": [[36, "polars.DataFrame.write_csv", false]], "write_database() (polars.dataframe method)": [[37, "polars.DataFrame.write_database", false]], "write_delta() (polars.dataframe method)": [[38, "polars.DataFrame.write_delta", false]], "write_excel() (polars.dataframe method)": [[39, "polars.DataFrame.write_excel", false]], "write_ipc() (polars.dataframe method)": [[40, "polars.DataFrame.write_ipc", false]], "write_ipc_stream() (polars.dataframe method)": [[41, "polars.DataFrame.write_ipc_stream", false]], "write_json() (polars.dataframe method)": [[42, "polars.DataFrame.write_json", false]], "write_json() (polars.expr.meta method)": [[571, "polars.Expr.meta.write_json", false]], "write_ndjson() (polars.dataframe method)": [[43, "polars.DataFrame.write_ndjson", false]], "write_parquet() (polars.dataframe method)": [[44, "polars.DataFrame.write_parquet", false]], "xor() (polars.expr method)": [[718, "polars.Expr.xor", false]], "year() (polars.expr.dt method)": [[456, "polars.Expr.dt.year", false]], "year() (polars.series.dt method)": [[1060, "polars.Series.dt.year", false]], "zeros() (in module polars)": [[793, "polars.zeros", false]], "zfill() (polars.expr.str method)": [[697, "polars.Expr.str.zfill", false]], "zfill() (polars.series.str method)": [[1269, "polars.Series.str.zfill", false]], "zip_with() (polars.series method)": [[1296, "polars.Series.zip_with", false]]}, "objects": {"polars": [[31, 1, 1, "", "CredentialProvider"], [32, 1, 1, "", "CredentialProviderAWS"], [33, 1, 1, "", "CredentialProviderGCP"], [1333, 1, 1, "", "SQLContext"], [49, 1, 1, "", "StringCache"], [50, 4, 1, "", "align_frames"], [719, 4, 1, "", "all"], [720, 4, 1, "", "all_horizontal"], [721, 4, 1, "", "any"], [722, 4, 1, "", "any_horizontal"], [723, 4, 1, "", "approx_n_unique"], [724, 4, 1, "", "arange"], [725, 4, 1, "", "arctan2"], [726, 4, 1, "", "arctan2d"], [727, 4, 1, "", "arg_sort_by"], [728, 4, 1, "", "arg_where"], [55, 4, 1, "", "build_info"], [729, 4, 1, "", "business_day_count"], [730, 4, 1, "", "coalesce"], [56, 4, 1, "", "collect_all"], [57, 4, 1, "", "collect_all_async"], [58, 4, 1, "", "concat"], [731, 4, 1, "", "concat_arr"], [732, 4, 1, "", "concat_list"], [733, 4, 1, "", "concat_str"], [734, 4, 1, "", "corr"], [735, 4, 1, "", "count"], [736, 4, 1, "", "cov"], [737, 4, 1, "", "cum_count"], [738, 4, 1, "", "cum_fold"], [739, 4, 1, "", "cum_reduce"], [740, 4, 1, "", "cum_sum"], [741, 4, 1, "", "cum_sum_horizontal"], [742, 4, 1, "", "date"], [743, 4, 1, "", "date_range"], [744, 4, 1, "", "date_ranges"], [745, 4, 1, "", "datetime"], [746, 4, 1, "", "datetime_range"], [747, 4, 1, "", "datetime_ranges"], [88, 4, 1, "", "disable_string_cache"], [748, 4, 1, "", "duration"], [749, 4, 1, "", "element"], [89, 4, 1, "", "enable_string_cache"], [90, 4, 1, "", "escape_regex"], [750, 4, 1, "", "exclude"], [751, 4, 1, "", "first"], [752, 4, 1, "", "fold"], [753, 4, 1, "", "format"], [121, 4, 1, "", "from_arrow"], [122, 4, 1, "", "from_dataframe"], [123, 4, 1, "", "from_dict"], [124, 4, 1, "", "from_dicts"], [754, 4, 1, "", "from_epoch"], [125, 4, 1, "", "from_numpy"], [126, 4, 1, "", "from_pandas"], [127, 4, 1, "", "from_records"], [128, 4, 1, "", "from_repr"], [129, 4, 1, "", "get_index_type"], [755, 4, 1, "", "groups"], [756, 4, 1, "", "head"], [757, 4, 1, "", "implode"], [758, 4, 1, "", "int_range"], [759, 4, 1, "", "int_ranges"], [131, 4, 1, "", "json_normalize"], [760, 4, 1, "", "last"], [761, 4, 1, "", "len"], [762, 4, 1, "", "lit"], [763, 4, 1, "", "map_batches"], [764, 4, 1, "", "map_groups"], [765, 4, 1, "", "max"], [766, 4, 1, "", "max_horizontal"], [767, 4, 1, "", "mean"], [768, 4, 1, "", "mean_horizontal"], [769, 4, 1, "", "median"], [770, 4, 1, "", "min"], [771, 4, 1, "", "min_horizontal"], [772, 4, 1, "", "n_unique"], [773, 4, 1, "", "nth"], [774, 4, 1, "", "ones"], [920, 6, 0, "-", "plugins"], [775, 4, 1, "", "quantile"], [132, 4, 1, "", "read_avro"], [133, 4, 1, "", "read_clipboard"], [134, 4, 1, "", "read_csv"], [135, 4, 1, "", "read_csv_batched"], [136, 4, 1, "", "read_database"], [137, 4, 1, "", "read_database_uri"], [138, 4, 1, "", "read_delta"], [139, 4, 1, "", "read_excel"], [140, 4, 1, "", "read_ipc"], [141, 4, 1, "", "read_ipc_schema"], [142, 4, 1, "", "read_ipc_stream"], [143, 4, 1, "", "read_json"], [144, 4, 1, "", "read_ndjson"], [145, 4, 1, "", "read_ods"], [146, 4, 1, "", "read_parquet"], [147, 4, 1, "", "read_parquet_schema"], [776, 4, 1, "", "reduce"], [777, 4, 1, "", "repeat"], [778, 4, 1, "", "rolling_corr"], [779, 4, 1, "", "rolling_cov"], [148, 4, 1, "", "scan_csv"], [149, 4, 1, "", "scan_delta"], [150, 4, 1, "", "scan_iceberg"], [151, 4, 1, "", "scan_ipc"], [152, 4, 1, "", "scan_ndjson"], [153, 4, 1, "", "scan_parquet"], [154, 4, 1, "", "scan_pyarrow_dataset"], [780, 4, 1, "", "select"], [922, 6, 0, "-", "selectors"], [155, 4, 1, "", "set_random_seed"], [156, 4, 1, "", "show_versions"], [781, 4, 1, "", "sql"], [782, 4, 1, "", "sql_expr"], [783, 4, 1, "", "std"], [784, 4, 1, "", "struct"], [785, 4, 1, "", "sum"], [786, 4, 1, "", "sum_horizontal"], [787, 4, 1, "", "tail"], [170, 4, 1, "", "thread_pool_size"], [171, 4, 1, "", "threadpool_size"], [788, 4, 1, "", "time"], [789, 4, 1, "", "time_range"], [790, 4, 1, "", "time_ranges"], [172, 4, 1, "", "using_string_cache"], [791, 4, 1, "", "var"], [792, 4, 1, "", "when"], [793, 4, 1, "", "zeros"]], "polars.Config": [[2, 0, 1, "", "load"], [3, 0, 1, "", "load_from_file"], [4, 0, 1, "", "restore_defaults"], [5, 0, 1, "", "save"], [6, 0, 1, "", "save_to_file"], [7, 0, 1, "", "set_ascii_tables"], [8, 0, 1, "", "set_auto_structify"], [9, 0, 1, "", "set_decimal_separator"], [10, 0, 1, "", "set_float_precision"], [11, 0, 1, "", "set_fmt_float"], [12, 0, 1, "", "set_fmt_str_lengths"], [13, 0, 1, "", "set_fmt_table_cell_list_len"], [14, 0, 1, "", "set_streaming_chunk_size"], [15, 0, 1, "", "set_tbl_cell_alignment"], [16, 0, 1, "", "set_tbl_cell_numeric_alignment"], [17, 0, 1, "", "set_tbl_cols"], [18, 0, 1, "", "set_tbl_column_data_type_inline"], [19, 0, 1, "", "set_tbl_dataframe_shape_below"], [20, 0, 1, "", "set_tbl_formatting"], [21, 0, 1, "", "set_tbl_hide_column_data_types"], [22, 0, 1, "", "set_tbl_hide_column_names"], [23, 0, 1, "", "set_tbl_hide_dataframe_shape"], [24, 0, 1, "", "set_tbl_hide_dtype_separator"], [25, 0, 1, "", "set_tbl_rows"], [26, 0, 1, "", "set_tbl_width_chars"], [27, 0, 1, "", "set_thousands_separator"], [28, 0, 1, "", "set_trim_decimal_zeros"], [29, 0, 1, "", "set_verbose"], [30, 0, 1, "", "state"]], "polars.CredentialProvider": [[31, 0, 1, "", "__init__"]], "polars.CredentialProviderAWS": [[32, 0, 1, "", "__init__"]], "polars.CredentialProviderGCP": [[33, 0, 1, "", "__init__"]], "polars.DataFrame": [[175, 0, 1, "", "__array__"], [176, 0, 1, "", "__arrow_c_stream__"], [177, 0, 1, "", "__dataframe__"], [178, 0, 1, "", "__getitem__"], [179, 0, 1, "", "approx_n_unique"], [180, 0, 1, "", "bottom_k"], [181, 0, 1, "", "cast"], [182, 0, 1, "", "clear"], [183, 0, 1, "", "clone"], [184, 0, 1, "", "collect_schema"], [185, 2, 1, "", "columns"], [186, 0, 1, "", "corr"], [187, 0, 1, "", "count"], [188, 0, 1, "", "describe"], [189, 0, 1, "", "deserialize"], [190, 0, 1, "", "drop"], [191, 0, 1, "", "drop_in_place"], [192, 0, 1, "", "drop_nans"], [193, 0, 1, "", "drop_nulls"], [194, 2, 1, "", "dtypes"], [195, 0, 1, "", "equals"], [196, 0, 1, "", "estimated_size"], [197, 0, 1, "", "explode"], [198, 0, 1, "", "extend"], [199, 0, 1, "", "fill_nan"], [200, 0, 1, "", "fill_null"], [201, 0, 1, "", "filter"], [202, 2, 1, "", "flags"], [203, 0, 1, "", "fold"], [204, 0, 1, "", "gather_every"], [205, 0, 1, "", "get_column"], [206, 0, 1, "", "get_column_index"], [207, 0, 1, "", "get_columns"], [208, 0, 1, "", "glimpse"], [209, 0, 1, "", "group_by"], [210, 0, 1, "", "group_by_dynamic"], [211, 0, 1, "", "hash_rows"], [212, 0, 1, "", "head"], [213, 2, 1, "", "height"], [214, 0, 1, "", "hstack"], [215, 0, 1, "", "insert_column"], [216, 0, 1, "", "interpolate"], [217, 0, 1, "", "is_duplicated"], [218, 0, 1, "", "is_empty"], [219, 0, 1, "", "is_unique"], [220, 0, 1, "", "item"], [221, 0, 1, "", "iter_columns"], [222, 0, 1, "", "iter_rows"], [223, 0, 1, "", "iter_slices"], [224, 0, 1, "", "join"], [225, 0, 1, "", "join_asof"], [226, 0, 1, "", "join_where"], [227, 0, 1, "", "lazy"], [228, 0, 1, "", "limit"], [229, 0, 1, "", "map_rows"], [230, 0, 1, "", "max"], [231, 0, 1, "", "max_horizontal"], [232, 0, 1, "", "mean"], [233, 0, 1, "", "mean_horizontal"], [234, 0, 1, "", "median"], [235, 0, 1, "", "melt"], [236, 0, 1, "", "merge_sorted"], [237, 0, 1, "", "min"], [238, 0, 1, "", "min_horizontal"], [239, 0, 1, "", "n_chunks"], [240, 0, 1, "", "n_unique"], [241, 0, 1, "", "null_count"], [242, 0, 1, "", "partition_by"], [243, 0, 1, "", "pipe"], [244, 0, 1, "", "pivot"], [322, 2, 1, "", "plot"], [245, 0, 1, "", "product"], [246, 0, 1, "", "quantile"], [247, 0, 1, "", "rechunk"], [248, 0, 1, "", "rename"], [249, 0, 1, "", "replace_column"], [250, 0, 1, "", "reverse"], [251, 0, 1, "", "rolling"], [252, 0, 1, "", "row"], [253, 0, 1, "", "rows"], [254, 0, 1, "", "rows_by_key"], [255, 0, 1, "", "sample"], [256, 2, 1, "", "schema"], [257, 0, 1, "", "select"], [258, 0, 1, "", "select_seq"], [259, 0, 1, "", "serialize"], [260, 0, 1, "", "set_sorted"], [261, 2, 1, "", "shape"], [262, 0, 1, "", "shift"], [263, 0, 1, "", "shrink_to_fit"], [264, 0, 1, "", "slice"], [265, 0, 1, "", "sort"], [266, 0, 1, "", "sql"], [267, 0, 1, "", "std"], [323, 2, 1, "", "style"], [268, 0, 1, "", "sum"], [269, 0, 1, "", "sum_horizontal"], [270, 0, 1, "", "tail"], [271, 0, 1, "", "to_arrow"], [272, 0, 1, "", "to_dict"], [273, 0, 1, "", "to_dicts"], [274, 0, 1, "", "to_dummies"], [275, 0, 1, "", "to_init_repr"], [276, 0, 1, "", "to_jax"], [277, 0, 1, "", "to_numpy"], [278, 0, 1, "", "to_pandas"], [279, 0, 1, "", "to_series"], [280, 0, 1, "", "to_struct"], [281, 0, 1, "", "to_torch"], [282, 0, 1, "", "top_k"], [283, 0, 1, "", "transpose"], [284, 0, 1, "", "unique"], [285, 0, 1, "", "unnest"], [286, 0, 1, "", "unpivot"], [287, 0, 1, "", "unstack"], [288, 0, 1, "", "update"], [289, 0, 1, "", "upsample"], [290, 0, 1, "", "var"], [291, 0, 1, "", "vstack"], [292, 2, 1, "", "width"], [293, 0, 1, "", "with_columns"], [294, 0, 1, "", "with_columns_seq"], [295, 0, 1, "", "with_row_count"], [296, 0, 1, "", "with_row_index"], [34, 0, 1, "", "write_avro"], [35, 0, 1, "", "write_clipboard"], [36, 0, 1, "", "write_csv"], [37, 0, 1, "", "write_database"], [38, 0, 1, "", "write_delta"], [39, 0, 1, "", "write_excel"], [40, 0, 1, "", "write_ipc"], [41, 0, 1, "", "write_ipc_stream"], [42, 0, 1, "", "write_json"], [43, 0, 1, "", "write_ndjson"], [44, 0, 1, "", "write_parquet"]], "polars.Expr": [[327, 0, 1, "", "abs"], [328, 0, 1, "", "add"], [329, 0, 1, "", "agg_groups"], [330, 0, 1, "", "alias"], [331, 0, 1, "", "all"], [332, 0, 1, "", "and_"], [333, 0, 1, "", "any"], [334, 0, 1, "", "append"], [335, 0, 1, "", "approx_n_unique"], [336, 0, 1, "", "arccos"], [337, 0, 1, "", "arccosh"], [338, 0, 1, "", "arcsin"], [339, 0, 1, "", "arcsinh"], [340, 0, 1, "", "arctan"], [341, 0, 1, "", "arctanh"], [342, 0, 1, "", "arg_max"], [343, 0, 1, "", "arg_min"], [344, 0, 1, "", "arg_sort"], [345, 0, 1, "", "arg_true"], [346, 0, 1, "", "arg_unique"], [371, 0, 1, "", "backward_fill"], [378, 0, 1, "", "bitwise_and"], [379, 0, 1, "", "bitwise_count_ones"], [380, 0, 1, "", "bitwise_count_zeros"], [381, 0, 1, "", "bitwise_leading_ones"], [382, 0, 1, "", "bitwise_leading_zeros"], [383, 0, 1, "", "bitwise_or"], [384, 0, 1, "", "bitwise_trailing_ones"], [385, 0, 1, "", "bitwise_trailing_zeros"], [386, 0, 1, "", "bitwise_xor"], [387, 0, 1, "", "bottom_k"], [388, 0, 1, "", "bottom_k_by"], [389, 0, 1, "", "cast"], [393, 0, 1, "", "cbrt"], [394, 0, 1, "", "ceil"], [395, 0, 1, "", "clip"], [396, 0, 1, "", "cos"], [397, 0, 1, "", "cosh"], [398, 0, 1, "", "cot"], [399, 0, 1, "", "count"], [400, 0, 1, "", "cum_count"], [401, 0, 1, "", "cum_max"], [402, 0, 1, "", "cum_min"], [403, 0, 1, "", "cum_prod"], [404, 0, 1, "", "cum_sum"], [405, 0, 1, "", "cumulative_eval"], [406, 0, 1, "", "cut"], [407, 0, 1, "", "degrees"], [408, 0, 1, "", "deserialize"], [409, 0, 1, "", "diff"], [410, 0, 1, "", "dot"], [411, 0, 1, "", "drop_nans"], [412, 0, 1, "", "drop_nulls"], [457, 0, 1, "", "entropy"], [458, 0, 1, "", "eq"], [459, 0, 1, "", "eq_missing"], [460, 0, 1, "", "ewm_mean"], [461, 0, 1, "", "ewm_mean_by"], [462, 0, 1, "", "ewm_std"], [463, 0, 1, "", "ewm_var"], [464, 0, 1, "", "exclude"], [465, 0, 1, "", "exp"], [466, 0, 1, "", "explode"], [467, 0, 1, "", "extend_constant"], [468, 0, 1, "", "fill_nan"], [469, 0, 1, "", "fill_null"], [470, 0, 1, "", "filter"], [471, 0, 1, "", "first"], [472, 0, 1, "", "flatten"], [473, 0, 1, "", "floor"], [474, 0, 1, "", "floordiv"], [475, 0, 1, "", "forward_fill"], [476, 0, 1, "", "from_json"], [477, 0, 1, "", "gather"], [478, 0, 1, "", "gather_every"], [479, 0, 1, "", "ge"], [480, 0, 1, "", "get"], [481, 0, 1, "", "gt"], [482, 0, 1, "", "has_nulls"], [483, 0, 1, "", "hash"], [484, 0, 1, "", "head"], [485, 0, 1, "", "hist"], [486, 0, 1, "", "implode"], [487, 0, 1, "", "inspect"], [488, 0, 1, "", "interpolate"], [489, 0, 1, "", "interpolate_by"], [490, 0, 1, "", "is_between"], [491, 0, 1, "", "is_duplicated"], [492, 0, 1, "", "is_finite"], [493, 0, 1, "", "is_first_distinct"], [494, 0, 1, "", "is_in"], [495, 0, 1, "", "is_infinite"], [496, 0, 1, "", "is_last_distinct"], [497, 0, 1, "", "is_nan"], [498, 0, 1, "", "is_not_nan"], [499, 0, 1, "", "is_not_null"], [500, 0, 1, "", "is_null"], [501, 0, 1, "", "is_unique"], [502, 0, 1, "", "kurtosis"], [503, 0, 1, "", "last"], [504, 0, 1, "", "le"], [505, 0, 1, "", "len"], [506, 0, 1, "", "limit"], [547, 0, 1, "", "log"], [548, 0, 1, "", "log10"], [549, 0, 1, "", "log1p"], [550, 0, 1, "", "lower_bound"], [551, 0, 1, "", "lt"], [552, 0, 1, "", "map_batches"], [553, 0, 1, "", "map_elements"], [554, 0, 1, "", "max"], [555, 0, 1, "", "mean"], [556, 0, 1, "", "median"], [572, 0, 1, "", "min"], [573, 0, 1, "", "mod"], [574, 0, 1, "", "mode"], [575, 0, 1, "", "mul"], [576, 0, 1, "", "n_unique"], [586, 0, 1, "", "nan_max"], [587, 0, 1, "", "nan_min"], [588, 0, 1, "", "ne"], [589, 0, 1, "", "ne_missing"], [590, 0, 1, "", "neg"], [591, 0, 1, "", "not_"], [592, 0, 1, "", "null_count"], [593, 0, 1, "", "or_"], [594, 0, 1, "", "over"], [595, 0, 1, "", "pct_change"], [596, 0, 1, "", "peak_max"], [597, 0, 1, "", "peak_min"], [598, 0, 1, "", "pipe"], [599, 0, 1, "", "pow"], [600, 0, 1, "", "product"], [601, 0, 1, "", "qcut"], [602, 0, 1, "", "quantile"], [603, 0, 1, "", "radians"], [604, 0, 1, "", "rank"], [605, 0, 1, "", "rechunk"], [606, 0, 1, "", "reinterpret"], [607, 0, 1, "", "repeat_by"], [608, 0, 1, "", "replace"], [609, 0, 1, "", "replace_strict"], [610, 0, 1, "", "reshape"], [611, 0, 1, "", "reverse"], [612, 0, 1, "", "rle"], [613, 0, 1, "", "rle_id"], [614, 0, 1, "", "rolling"], [615, 0, 1, "", "rolling_map"], [616, 0, 1, "", "rolling_max"], [617, 0, 1, "", "rolling_max_by"], [618, 0, 1, "", "rolling_mean"], [619, 0, 1, "", "rolling_mean_by"], [620, 0, 1, "", "rolling_median"], [621, 0, 1, "", "rolling_median_by"], [622, 0, 1, "", "rolling_min"], [623, 0, 1, "", "rolling_min_by"], [624, 0, 1, "", "rolling_quantile"], [625, 0, 1, "", "rolling_quantile_by"], [626, 0, 1, "", "rolling_skew"], [627, 0, 1, "", "rolling_std"], [628, 0, 1, "", "rolling_std_by"], [629, 0, 1, "", "rolling_sum"], [630, 0, 1, "", "rolling_sum_by"], [631, 0, 1, "", "rolling_var"], [632, 0, 1, "", "rolling_var_by"], [633, 0, 1, "", "round"], [634, 0, 1, "", "round_sig_figs"], [635, 0, 1, "", "sample"], [636, 0, 1, "", "search_sorted"], [637, 0, 1, "", "set_sorted"], [638, 0, 1, "", "shift"], [639, 0, 1, "", "shrink_dtype"], [640, 0, 1, "", "shuffle"], [641, 0, 1, "", "sign"], [642, 0, 1, "", "sin"], [643, 0, 1, "", "sinh"], [644, 0, 1, "", "skew"], [645, 0, 1, "", "slice"], [646, 0, 1, "", "sort"], [647, 0, 1, "", "sort_by"], [648, 0, 1, "", "sqrt"], [649, 0, 1, "", "std"], [703, 0, 1, "", "sub"], [704, 0, 1, "", "sum"], [705, 0, 1, "", "tail"], [706, 0, 1, "", "tan"], [707, 0, 1, "", "tanh"], [708, 0, 1, "", "to_physical"], [709, 0, 1, "", "top_k"], [710, 0, 1, "", "top_k_by"], [711, 0, 1, "", "truediv"], [712, 0, 1, "", "unique"], [713, 0, 1, "", "unique_counts"], [714, 0, 1, "", "upper_bound"], [715, 0, 1, "", "value_counts"], [716, 0, 1, "", "var"], [717, 0, 1, "", "where"], [718, 0, 1, "", "xor"]], "polars.Expr.arr": [[347, 0, 1, "", "all"], [348, 0, 1, "", "any"], [349, 0, 1, "", "arg_max"], [350, 0, 1, "", "arg_min"], [351, 0, 1, "", "contains"], [352, 0, 1, "", "count_matches"], [353, 0, 1, "", "explode"], [354, 0, 1, "", "first"], [355, 0, 1, "", "get"], [356, 0, 1, "", "join"], [357, 0, 1, "", "last"], [358, 0, 1, "", "max"], [359, 0, 1, "", "median"], [360, 0, 1, "", "min"], [361, 0, 1, "", "n_unique"], [362, 0, 1, "", "reverse"], [363, 0, 1, "", "shift"], [364, 0, 1, "", "sort"], [365, 0, 1, "", "std"], [366, 0, 1, "", "sum"], [367, 0, 1, "", "to_list"], [368, 0, 1, "", "to_struct"], [369, 0, 1, "", "unique"], [370, 0, 1, "", "var"]], "polars.Expr.bin": [[372, 0, 1, "", "contains"], [373, 0, 1, "", "decode"], [374, 0, 1, "", "encode"], [375, 0, 1, "", "ends_with"], [376, 0, 1, "", "size"], [377, 0, 1, "", "starts_with"]], "polars.Expr.cat": [[390, 0, 1, "", "get_categories"], [391, 0, 1, "", "len_bytes"], [392, 0, 1, "", "len_chars"]], "polars.Expr.dt": [[413, 0, 1, "", "add_business_days"], [414, 0, 1, "", "base_utc_offset"], [415, 0, 1, "", "cast_time_unit"], [416, 0, 1, "", "century"], [417, 0, 1, "", "combine"], [418, 0, 1, "", "convert_time_zone"], [419, 0, 1, "", "date"], [420, 0, 1, "", "datetime"], [421, 0, 1, "", "day"], [422, 0, 1, "", "dst_offset"], [423, 0, 1, "", "epoch"], [424, 0, 1, "", "hour"], [425, 0, 1, "", "is_leap_year"], [426, 0, 1, "", "iso_year"], [427, 0, 1, "", "microsecond"], [428, 0, 1, "", "millennium"], [429, 0, 1, "", "millisecond"], [430, 0, 1, "", "minute"], [431, 0, 1, "", "month"], [432, 0, 1, "", "month_end"], [433, 0, 1, "", "month_start"], [434, 0, 1, "", "nanosecond"], [435, 0, 1, "", "offset_by"], [436, 0, 1, "", "ordinal_day"], [437, 0, 1, "", "quarter"], [438, 0, 1, "", "replace_time_zone"], [439, 0, 1, "", "round"], [440, 0, 1, "", "second"], [441, 0, 1, "", "strftime"], [442, 0, 1, "", "time"], [443, 0, 1, "", "timestamp"], [444, 0, 1, "", "to_string"], [445, 0, 1, "", "total_days"], [446, 0, 1, "", "total_hours"], [447, 0, 1, "", "total_microseconds"], [448, 0, 1, "", "total_milliseconds"], [449, 0, 1, "", "total_minutes"], [450, 0, 1, "", "total_nanoseconds"], [451, 0, 1, "", "total_seconds"], [452, 0, 1, "", "truncate"], [453, 0, 1, "", "week"], [454, 0, 1, "", "weekday"], [455, 0, 1, "", "with_time_unit"], [456, 0, 1, "", "year"]], "polars.Expr.list": [[507, 0, 1, "", "all"], [508, 0, 1, "", "any"], [509, 0, 1, "", "arg_max"], [510, 0, 1, "", "arg_min"], [511, 0, 1, "", "concat"], [512, 0, 1, "", "contains"], [513, 0, 1, "", "count_matches"], [514, 0, 1, "", "diff"], [515, 0, 1, "", "drop_nulls"], [516, 0, 1, "", "eval"], [517, 0, 1, "", "explode"], [518, 0, 1, "", "first"], [519, 0, 1, "", "gather"], [520, 0, 1, "", "gather_every"], [521, 0, 1, "", "get"], [522, 0, 1, "", "head"], [523, 0, 1, "", "join"], [524, 0, 1, "", "last"], [525, 0, 1, "", "len"], [526, 0, 1, "", "max"], [527, 0, 1, "", "mean"], [528, 0, 1, "", "median"], [529, 0, 1, "", "min"], [530, 0, 1, "", "n_unique"], [531, 0, 1, "", "reverse"], [532, 0, 1, "", "sample"], [533, 0, 1, "", "set_difference"], [534, 0, 1, "", "set_intersection"], [535, 0, 1, "", "set_symmetric_difference"], [536, 0, 1, "", "set_union"], [537, 0, 1, "", "shift"], [538, 0, 1, "", "slice"], [539, 0, 1, "", "sort"], [540, 0, 1, "", "std"], [541, 0, 1, "", "sum"], [542, 0, 1, "", "tail"], [543, 0, 1, "", "to_array"], [544, 0, 1, "", "to_struct"], [545, 0, 1, "", "unique"], [546, 0, 1, "", "var"]], "polars.Expr.meta": [[557, 0, 1, "", "eq"], [558, 0, 1, "", "has_multiple_outputs"], [559, 0, 1, "", "is_column"], [560, 0, 1, "", "is_column_selection"], [561, 0, 1, "", "is_literal"], [562, 0, 1, "", "is_regex_projection"], [563, 0, 1, "", "ne"], [564, 0, 1, "", "output_name"], [565, 0, 1, "", "pop"], [566, 0, 1, "", "root_names"], [567, 0, 1, "", "serialize"], [568, 0, 1, "", "show_graph"], [569, 0, 1, "", "tree_format"], [570, 0, 1, "", "undo_aliases"], [571, 0, 1, "", "write_json"]], "polars.Expr.name": [[577, 0, 1, "", "keep"], [578, 0, 1, "", "map"], [579, 0, 1, "", "map_fields"], [580, 0, 1, "", "prefix"], [581, 0, 1, "", "prefix_fields"], [582, 0, 1, "", "suffix"], [583, 0, 1, "", "suffix_fields"], [584, 0, 1, "", "to_lowercase"], [585, 0, 1, "", "to_uppercase"]], "polars.Expr.str": [[650, 0, 1, "", "concat"], [651, 0, 1, "", "contains"], [652, 0, 1, "", "contains_any"], [653, 0, 1, "", "count_matches"], [654, 0, 1, "", "decode"], [655, 0, 1, "", "encode"], [656, 0, 1, "", "ends_with"], [657, 0, 1, "", "escape_regex"], [658, 0, 1, "", "explode"], [659, 0, 1, "", "extract"], [660, 0, 1, "", "extract_all"], [661, 0, 1, "", "extract_groups"], [662, 0, 1, "", "extract_many"], [663, 0, 1, "", "find"], [664, 0, 1, "", "find_many"], [665, 0, 1, "", "head"], [666, 0, 1, "", "join"], [667, 0, 1, "", "json_decode"], [668, 0, 1, "", "json_path_match"], [669, 0, 1, "", "len_bytes"], [670, 0, 1, "", "len_chars"], [671, 0, 1, "", "pad_end"], [672, 0, 1, "", "pad_start"], [673, 0, 1, "", "replace"], [674, 0, 1, "", "replace_all"], [675, 0, 1, "", "replace_many"], [676, 0, 1, "", "reverse"], [677, 0, 1, "", "slice"], [678, 0, 1, "", "split"], [679, 0, 1, "", "split_exact"], [680, 0, 1, "", "splitn"], [681, 0, 1, "", "starts_with"], [682, 0, 1, "", "strip_chars"], [683, 0, 1, "", "strip_chars_end"], [684, 0, 1, "", "strip_chars_start"], [685, 0, 1, "", "strip_prefix"], [686, 0, 1, "", "strip_suffix"], [687, 0, 1, "", "strptime"], [688, 0, 1, "", "tail"], [689, 0, 1, "", "to_date"], [690, 0, 1, "", "to_datetime"], [691, 0, 1, "", "to_decimal"], [692, 0, 1, "", "to_integer"], [693, 0, 1, "", "to_lowercase"], [694, 0, 1, "", "to_time"], [695, 0, 1, "", "to_titlecase"], [696, 0, 1, "", "to_uppercase"], [697, 0, 1, "", "zfill"]], "polars.Expr.struct": [[698, 0, 1, "", "field"], [699, 0, 1, "", "json_encode"], [700, 0, 1, "", "rename_fields"], [701, 0, 1, "", "unnest"], [702, 0, 1, "", "with_fields"]], "polars.LazyFrame": [[817, 0, 1, "", "approx_n_unique"], [818, 0, 1, "", "bottom_k"], [819, 0, 1, "", "cache"], [820, 0, 1, "", "cast"], [821, 0, 1, "", "clear"], [822, 0, 1, "", "clone"], [823, 0, 1, "", "collect"], [824, 0, 1, "", "collect_async"], [825, 0, 1, "", "collect_schema"], [826, 2, 1, "", "columns"], [827, 0, 1, "", "count"], [828, 0, 1, "", "describe"], [829, 0, 1, "", "deserialize"], [830, 0, 1, "", "drop"], [831, 0, 1, "", "drop_nans"], [832, 0, 1, "", "drop_nulls"], [833, 2, 1, "", "dtypes"], [834, 0, 1, "", "explain"], [835, 0, 1, "", "explode"], [836, 0, 1, "", "fill_nan"], [837, 0, 1, "", "fill_null"], [838, 0, 1, "", "filter"], [839, 0, 1, "", "first"], [840, 0, 1, "", "gather_every"], [841, 0, 1, "", "group_by"], [842, 0, 1, "", "group_by_dynamic"], [843, 0, 1, "", "head"], [844, 0, 1, "", "inspect"], [845, 0, 1, "", "interpolate"], [846, 0, 1, "", "join"], [847, 0, 1, "", "join_asof"], [848, 0, 1, "", "join_where"], [849, 0, 1, "", "last"], [850, 0, 1, "", "lazy"], [851, 0, 1, "", "limit"], [852, 0, 1, "", "map_batches"], [853, 0, 1, "", "max"], [854, 0, 1, "", "mean"], [855, 0, 1, "", "median"], [856, 0, 1, "", "melt"], [857, 0, 1, "", "merge_sorted"], [858, 0, 1, "", "min"], [859, 0, 1, "", "null_count"], [860, 0, 1, "", "pipe"], [861, 0, 1, "", "profile"], [862, 0, 1, "", "quantile"], [863, 0, 1, "", "rename"], [864, 0, 1, "", "reverse"], [865, 0, 1, "", "rolling"], [866, 2, 1, "", "schema"], [867, 0, 1, "", "select"], [868, 0, 1, "", "select_seq"], [869, 0, 1, "", "serialize"], [870, 0, 1, "", "set_sorted"], [871, 0, 1, "", "shift"], [872, 0, 1, "", "show_graph"], [45, 0, 1, "", "sink_csv"], [46, 0, 1, "", "sink_ipc"], [47, 0, 1, "", "sink_ndjson"], [48, 0, 1, "", "sink_parquet"], [873, 0, 1, "", "slice"], [874, 0, 1, "", "sort"], [875, 0, 1, "", "sql"], [876, 0, 1, "", "std"], [877, 0, 1, "", "sum"], [878, 0, 1, "", "tail"], [879, 0, 1, "", "top_k"], [880, 0, 1, "", "unique"], [881, 0, 1, "", "unnest"], [882, 0, 1, "", "unpivot"], [883, 0, 1, "", "update"], [884, 0, 1, "", "var"], [885, 2, 1, "", "width"], [886, 0, 1, "", "with_columns"], [887, 0, 1, "", "with_columns_seq"], [888, 0, 1, "", "with_context"], [889, 0, 1, "", "with_row_count"], [890, 0, 1, "", "with_row_index"]], "polars.SQLContext": [[1333, 0, 1, "", "__enter__"], [1333, 0, 1, "", "__exit__"], [1333, 0, 1, "", "__init__"], [1314, 0, 1, "", "execute"], [1315, 0, 1, "", "execute_global"], [1316, 0, 1, "", "register"], [1317, 0, 1, "", "register_globals"], [1318, 0, 1, "", "register_many"], [1319, 0, 1, "", "tables"], [1320, 0, 1, "", "unregister"]], "polars.Series": [[924, 0, 1, "", "__array__"], [925, 0, 1, "", "__arrow_c_stream__"], [926, 0, 1, "", "__getitem__"], [927, 0, 1, "", "abs"], [928, 0, 1, "", "alias"], [929, 0, 1, "", "all"], [930, 0, 1, "", "any"], [931, 0, 1, "", "append"], [932, 0, 1, "", "approx_n_unique"], [933, 0, 1, "", "arccos"], [934, 0, 1, "", "arccosh"], [935, 0, 1, "", "arcsin"], [936, 0, 1, "", "arcsinh"], [937, 0, 1, "", "arctan"], [938, 0, 1, "", "arctanh"], [939, 0, 1, "", "arg_max"], [940, 0, 1, "", "arg_min"], [941, 0, 1, "", "arg_sort"], [942, 0, 1, "", "arg_true"], [943, 0, 1, "", "arg_unique"], [974, 0, 1, "", "bitwise_and"], [975, 0, 1, "", "bitwise_count_ones"], [976, 0, 1, "", "bitwise_count_zeros"], [977, 0, 1, "", "bitwise_leading_ones"], [978, 0, 1, "", "bitwise_leading_zeros"], [979, 0, 1, "", "bitwise_or"], [980, 0, 1, "", "bitwise_trailing_ones"], [981, 0, 1, "", "bitwise_trailing_zeros"], [982, 0, 1, "", "bitwise_xor"], [983, 0, 1, "", "bottom_k"], [984, 0, 1, "", "cast"], [991, 0, 1, "", "cbrt"], [992, 0, 1, "", "ceil"], [993, 0, 1, "", "chunk_lengths"], [994, 0, 1, "", "clear"], [995, 0, 1, "", "clip"], [996, 0, 1, "", "clone"], [997, 0, 1, "", "cos"], [998, 0, 1, "", "cosh"], [999, 0, 1, "", "cot"], [1000, 0, 1, "", "count"], [1001, 0, 1, "", "cum_count"], [1002, 0, 1, "", "cum_max"], [1003, 0, 1, "", "cum_min"], [1004, 0, 1, "", "cum_prod"], [1005, 0, 1, "", "cum_sum"], [1006, 0, 1, "", "cumulative_eval"], [1007, 0, 1, "", "cut"], [1008, 0, 1, "", "describe"], [1009, 0, 1, "", "diff"], [1010, 0, 1, "", "dot"], [1011, 0, 1, "", "drop_nans"], [1012, 0, 1, "", "drop_nulls"], [1061, 2, 1, "", "dtype"], [1062, 0, 1, "", "entropy"], [1063, 0, 1, "", "eq"], [1064, 0, 1, "", "eq_missing"], [1065, 0, 1, "", "equals"], [1066, 0, 1, "", "estimated_size"], [1067, 0, 1, "", "ewm_mean"], [1068, 0, 1, "", "ewm_mean_by"], [1069, 0, 1, "", "ewm_std"], [1070, 0, 1, "", "ewm_var"], [1071, 0, 1, "", "exp"], [1072, 0, 1, "", "explode"], [1073, 0, 1, "", "extend"], [1074, 0, 1, "", "extend_constant"], [1075, 0, 1, "", "fill_nan"], [1076, 0, 1, "", "fill_null"], [1077, 0, 1, "", "filter"], [1078, 0, 1, "", "first"], [1079, 2, 1, "", "flags"], [1080, 0, 1, "", "floor"], [1081, 0, 1, "", "gather"], [1082, 0, 1, "", "gather_every"], [1083, 0, 1, "", "ge"], [1084, 0, 1, "", "get_chunks"], [1085, 0, 1, "", "gt"], [1086, 0, 1, "", "has_nulls"], [1087, 0, 1, "", "has_validity"], [1088, 0, 1, "", "hash"], [1089, 0, 1, "", "head"], [1090, 0, 1, "", "hist"], [1091, 0, 1, "", "implode"], [1092, 0, 1, "", "interpolate"], [1093, 0, 1, "", "interpolate_by"], [1094, 0, 1, "", "is_between"], [1095, 0, 1, "", "is_duplicated"], [1096, 0, 1, "", "is_empty"], [1097, 0, 1, "", "is_finite"], [1098, 0, 1, "", "is_first_distinct"], [1099, 0, 1, "", "is_in"], [1100, 0, 1, "", "is_infinite"], [1101, 0, 1, "", "is_last_distinct"], [1102, 0, 1, "", "is_nan"], [1103, 0, 1, "", "is_not_nan"], [1104, 0, 1, "", "is_not_null"], [1105, 0, 1, "", "is_null"], [1106, 0, 1, "", "is_sorted"], [1107, 0, 1, "", "is_unique"], [1108, 0, 1, "", "item"], [1109, 0, 1, "", "kurtosis"], [1110, 0, 1, "", "last"], [1111, 0, 1, "", "le"], [1112, 0, 1, "", "len"], [1113, 0, 1, "", "limit"], [1154, 0, 1, "", "log"], [1155, 0, 1, "", "log10"], [1156, 0, 1, "", "log1p"], [1157, 0, 1, "", "lower_bound"], [1158, 0, 1, "", "lt"], [1159, 0, 1, "", "map_elements"], [1160, 0, 1, "", "max"], [1161, 0, 1, "", "mean"], [1162, 0, 1, "", "median"], [1163, 0, 1, "", "min"], [1164, 0, 1, "", "mode"], [1165, 0, 1, "", "n_chunks"], [1166, 0, 1, "", "n_unique"], [1167, 2, 1, "", "name"], [1168, 0, 1, "", "nan_max"], [1169, 0, 1, "", "nan_min"], [1170, 0, 1, "", "ne"], [1171, 0, 1, "", "ne_missing"], [1172, 0, 1, "", "new_from_index"], [1173, 0, 1, "", "not_"], [1174, 0, 1, "", "null_count"], [1175, 0, 1, "", "pct_change"], [1176, 0, 1, "", "peak_max"], [1177, 0, 1, "", "peak_min"], [1310, 2, 1, "", "plot"], [1178, 0, 1, "", "pow"], [1179, 0, 1, "", "product"], [1180, 0, 1, "", "qcut"], [1181, 0, 1, "", "quantile"], [1182, 0, 1, "", "rank"], [1183, 0, 1, "", "rechunk"], [1184, 0, 1, "", "reinterpret"], [1185, 0, 1, "", "rename"], [1186, 0, 1, "", "replace"], [1187, 0, 1, "", "replace_strict"], [1188, 0, 1, "", "reshape"], [1189, 0, 1, "", "reverse"], [1190, 0, 1, "", "rle"], [1191, 0, 1, "", "rle_id"], [1192, 0, 1, "", "rolling_map"], [1193, 0, 1, "", "rolling_max"], [1194, 0, 1, "", "rolling_mean"], [1195, 0, 1, "", "rolling_median"], [1196, 0, 1, "", "rolling_min"], [1197, 0, 1, "", "rolling_quantile"], [1198, 0, 1, "", "rolling_skew"], [1199, 0, 1, "", "rolling_std"], [1200, 0, 1, "", "rolling_sum"], [1201, 0, 1, "", "rolling_var"], [1202, 0, 1, "", "round"], [1203, 0, 1, "", "round_sig_figs"], [1204, 0, 1, "", "sample"], [1205, 0, 1, "", "scatter"], [1206, 0, 1, "", "search_sorted"], [1207, 0, 1, "", "set"], [1208, 0, 1, "", "set_sorted"], [1209, 2, 1, "", "shape"], [1210, 0, 1, "", "shift"], [1211, 0, 1, "", "shrink_dtype"], [1212, 0, 1, "", "shrink_to_fit"], [1213, 0, 1, "", "shuffle"], [1214, 0, 1, "", "sign"], [1215, 0, 1, "", "sin"], [1216, 0, 1, "", "sinh"], [1217, 0, 1, "", "skew"], [1218, 0, 1, "", "slice"], [1219, 0, 1, "", "sort"], [1220, 0, 1, "", "sqrt"], [1221, 0, 1, "", "std"], [1276, 0, 1, "", "sum"], [1277, 0, 1, "", "tail"], [1278, 0, 1, "", "tan"], [1279, 0, 1, "", "tanh"], [1280, 0, 1, "", "to_arrow"], [1281, 0, 1, "", "to_dummies"], [1282, 0, 1, "", "to_frame"], [1283, 0, 1, "", "to_init_repr"], [1284, 0, 1, "", "to_jax"], [1285, 0, 1, "", "to_list"], [1286, 0, 1, "", "to_numpy"], [1287, 0, 1, "", "to_pandas"], [1288, 0, 1, "", "to_physical"], [1289, 0, 1, "", "to_torch"], [1290, 0, 1, "", "top_k"], [1291, 0, 1, "", "unique"], [1292, 0, 1, "", "unique_counts"], [1293, 0, 1, "", "upper_bound"], [1294, 0, 1, "", "value_counts"], [1295, 0, 1, "", "var"], [1296, 0, 1, "", "zip_with"]], "polars.Series.arr": [[944, 0, 1, "", "all"], [945, 0, 1, "", "any"], [946, 0, 1, "", "arg_max"], [947, 0, 1, "", "arg_min"], [948, 0, 1, "", "contains"], [949, 0, 1, "", "count_matches"], [950, 0, 1, "", "explode"], [951, 0, 1, "", "first"], [952, 0, 1, "", "get"], [953, 0, 1, "", "join"], [954, 0, 1, "", "last"], [955, 0, 1, "", "max"], [956, 0, 1, "", "median"], [957, 0, 1, "", "min"], [958, 0, 1, "", "n_unique"], [959, 0, 1, "", "reverse"], [960, 0, 1, "", "shift"], [961, 0, 1, "", "sort"], [962, 0, 1, "", "std"], [963, 0, 1, "", "sum"], [964, 0, 1, "", "to_list"], [965, 0, 1, "", "to_struct"], [966, 0, 1, "", "unique"], [967, 0, 1, "", "var"]], "polars.Series.bin": [[968, 0, 1, "", "contains"], [969, 0, 1, "", "decode"], [970, 0, 1, "", "encode"], [971, 0, 1, "", "ends_with"], [972, 0, 1, "", "size"], [973, 0, 1, "", "starts_with"]], "polars.Series.cat": [[985, 0, 1, "", "get_categories"], [986, 0, 1, "", "is_local"], [987, 0, 1, "", "len_bytes"], [988, 0, 1, "", "len_chars"], [989, 0, 1, "", "to_local"], [990, 0, 1, "", "uses_lexical_ordering"]], "polars.Series.dt": [[1013, 0, 1, "", "add_business_days"], [1014, 0, 1, "", "base_utc_offset"], [1015, 0, 1, "", "cast_time_unit"], [1016, 0, 1, "", "century"], [1017, 0, 1, "", "combine"], [1018, 0, 1, "", "convert_time_zone"], [1019, 0, 1, "", "date"], [1020, 0, 1, "", "datetime"], [1021, 0, 1, "", "day"], [1022, 0, 1, "", "dst_offset"], [1023, 0, 1, "", "epoch"], [1024, 0, 1, "", "hour"], [1025, 0, 1, "", "is_leap_year"], [1026, 0, 1, "", "iso_year"], [1027, 0, 1, "", "max"], [1028, 0, 1, "", "mean"], [1029, 0, 1, "", "median"], [1030, 0, 1, "", "microsecond"], [1031, 0, 1, "", "millennium"], [1032, 0, 1, "", "millisecond"], [1033, 0, 1, "", "min"], [1034, 0, 1, "", "minute"], [1035, 0, 1, "", "month"], [1036, 0, 1, "", "month_end"], [1037, 0, 1, "", "month_start"], [1038, 0, 1, "", "nanosecond"], [1039, 0, 1, "", "offset_by"], [1040, 0, 1, "", "ordinal_day"], [1041, 0, 1, "", "quarter"], [1042, 0, 1, "", "replace_time_zone"], [1043, 0, 1, "", "round"], [1044, 0, 1, "", "second"], [1045, 0, 1, "", "strftime"], [1046, 0, 1, "", "time"], [1047, 0, 1, "", "timestamp"], [1048, 0, 1, "", "to_string"], [1049, 0, 1, "", "total_days"], [1050, 0, 1, "", "total_hours"], [1051, 0, 1, "", "total_microseconds"], [1052, 0, 1, "", "total_milliseconds"], [1053, 0, 1, "", "total_minutes"], [1054, 0, 1, "", "total_nanoseconds"], [1055, 0, 1, "", "total_seconds"], [1056, 0, 1, "", "truncate"], [1057, 0, 1, "", "week"], [1058, 0, 1, "", "weekday"], [1059, 0, 1, "", "with_time_unit"], [1060, 0, 1, "", "year"]], "polars.Series.list": [[1114, 0, 1, "", "all"], [1115, 0, 1, "", "any"], [1116, 0, 1, "", "arg_max"], [1117, 0, 1, "", "arg_min"], [1118, 0, 1, "", "concat"], [1119, 0, 1, "", "contains"], [1120, 0, 1, "", "count_matches"], [1121, 0, 1, "", "diff"], [1122, 0, 1, "", "drop_nulls"], [1123, 0, 1, "", "eval"], [1124, 0, 1, "", "explode"], [1125, 0, 1, "", "first"], [1126, 0, 1, "", "gather"], [1127, 0, 1, "", "gather_every"], [1128, 0, 1, "", "get"], [1129, 0, 1, "", "head"], [1130, 0, 1, "", "join"], [1131, 0, 1, "", "last"], [1132, 0, 1, "", "len"], [1133, 0, 1, "", "max"], [1134, 0, 1, "", "mean"], [1135, 0, 1, "", "median"], [1136, 0, 1, "", "min"], [1137, 0, 1, "", "n_unique"], [1138, 0, 1, "", "reverse"], [1139, 0, 1, "", "sample"], [1140, 0, 1, "", "set_difference"], [1141, 0, 1, "", "set_intersection"], [1142, 0, 1, "", "set_symmetric_difference"], [1143, 0, 1, "", "set_union"], [1144, 0, 1, "", "shift"], [1145, 0, 1, "", "slice"], [1146, 0, 1, "", "sort"], [1147, 0, 1, "", "std"], [1148, 0, 1, "", "sum"], [1149, 0, 1, "", "tail"], [1150, 0, 1, "", "to_array"], [1151, 0, 1, "", "to_struct"], [1152, 0, 1, "", "unique"], [1153, 0, 1, "", "var"]], "polars.Series.str": [[1222, 0, 1, "", "concat"], [1223, 0, 1, "", "contains"], [1224, 0, 1, "", "contains_any"], [1225, 0, 1, "", "count_matches"], [1226, 0, 1, "", "decode"], [1227, 0, 1, "", "encode"], [1228, 0, 1, "", "ends_with"], [1229, 0, 1, "", "escape_regex"], [1230, 0, 1, "", "explode"], [1231, 0, 1, "", "extract"], [1232, 0, 1, "", "extract_all"], [1233, 0, 1, "", "extract_groups"], [1234, 0, 1, "", "extract_many"], [1235, 0, 1, "", "find"], [1236, 0, 1, "", "find_many"], [1237, 0, 1, "", "head"], [1238, 0, 1, "", "join"], [1239, 0, 1, "", "json_decode"], [1240, 0, 1, "", "json_path_match"], [1241, 0, 1, "", "len_bytes"], [1242, 0, 1, "", "len_chars"], [1243, 0, 1, "", "pad_end"], [1244, 0, 1, "", "pad_start"], [1245, 0, 1, "", "replace"], [1246, 0, 1, "", "replace_all"], [1247, 0, 1, "", "replace_many"], [1248, 0, 1, "", "reverse"], [1249, 0, 1, "", "slice"], [1250, 0, 1, "", "split"], [1251, 0, 1, "", "split_exact"], [1252, 0, 1, "", "splitn"], [1253, 0, 1, "", "starts_with"], [1254, 0, 1, "", "strip_chars"], [1255, 0, 1, "", "strip_chars_end"], [1256, 0, 1, "", "strip_chars_start"], [1257, 0, 1, "", "strip_prefix"], [1258, 0, 1, "", "strip_suffix"], [1259, 0, 1, "", "strptime"], [1260, 0, 1, "", "tail"], [1261, 0, 1, "", "to_date"], [1262, 0, 1, "", "to_datetime"], [1263, 0, 1, "", "to_decimal"], [1264, 0, 1, "", "to_integer"], [1265, 0, 1, "", "to_lowercase"], [1266, 0, 1, "", "to_time"], [1267, 0, 1, "", "to_titlecase"], [1268, 0, 1, "", "to_uppercase"], [1269, 0, 1, "", "zfill"]], "polars.Series.struct": [[1270, 0, 1, "", "field"], [1271, 3, 1, "", "fields"], [1272, 0, 1, "", "json_encode"], [1273, 0, 1, "", "rename_fields"], [1274, 3, 1, "", "schema"], [1275, 0, 1, "", "unnest"]], "polars.StringCache": [[49, 0, 1, "", "__init__"]], "polars.api": [[51, 4, 1, "", "register_dataframe_namespace"], [52, 4, 1, "", "register_expr_namespace"], [53, 4, 1, "", "register_lazyframe_namespace"], [54, 4, 1, "", "register_series_namespace"]], "polars.dataframe.group_by.GroupBy": [[297, 0, 1, "", "__iter__"], [298, 0, 1, "", "agg"], [299, 0, 1, "", "all"], [300, 0, 1, "", "count"], [301, 0, 1, "", "first"], [302, 0, 1, "", "head"], [303, 0, 1, "", "last"], [304, 0, 1, "", "len"], [305, 0, 1, "", "map_groups"], [306, 0, 1, "", "max"], [307, 0, 1, "", "mean"], [308, 0, 1, "", "median"], [309, 0, 1, "", "min"], [310, 0, 1, "", "n_unique"], [311, 0, 1, "", "quantile"], [312, 0, 1, "", "sum"], [313, 0, 1, "", "tail"]], "polars.datatypes": [[59, 1, 1, "", "Array"], [60, 1, 1, "", "Binary"], [61, 1, 1, "", "Boolean"], [62, 1, 1, "", "Categorical"], [63, 1, 1, "", "DataType"], [64, 1, 1, "", "Date"], [65, 1, 1, "", "Datetime"], [66, 1, 1, "", "Decimal"], [67, 1, 1, "", "Duration"], [68, 1, 1, "", "Enum"], [69, 1, 1, "", "Float32"], [70, 1, 1, "", "Float64"], [71, 1, 1, "", "Int128"], [72, 1, 1, "", "Int16"], [73, 1, 1, "", "Int32"], [74, 1, 1, "", "Int64"], [75, 1, 1, "", "Int8"], [76, 1, 1, "", "List"], [77, 1, 1, "", "Null"], [78, 1, 1, "", "Object"], [79, 1, 1, "", "String"], [80, 1, 1, "", "Struct"], [81, 1, 1, "", "Time"], [82, 1, 1, "", "UInt16"], [83, 1, 1, "", "UInt32"], [84, 1, 1, "", "UInt64"], [85, 1, 1, "", "UInt8"], [86, 1, 1, "", "Unknown"], [87, 3, 1, "", "Utf8"]], "polars.datatypes.Array": [[59, 0, 1, "", "__init__"]], "polars.datatypes.Binary": [[60, 0, 1, "", "__init__"]], "polars.datatypes.Boolean": [[61, 0, 1, "", "__init__"]], "polars.datatypes.Categorical": [[62, 0, 1, "", "__init__"]], "polars.datatypes.DataType": [[63, 0, 1, "", "__init__"]], "polars.datatypes.Date": [[64, 0, 1, "", "__init__"]], "polars.datatypes.Datetime": [[65, 0, 1, "", "__init__"]], "polars.datatypes.Decimal": [[66, 0, 1, "", "__init__"]], "polars.datatypes.Duration": [[67, 0, 1, "", "__init__"]], "polars.datatypes.Enum": [[68, 0, 1, "", "__init__"]], "polars.datatypes.Float32": [[69, 0, 1, "", "__init__"]], "polars.datatypes.Float64": [[70, 0, 1, "", "__init__"]], "polars.datatypes.Int128": [[71, 0, 1, "", "__init__"]], "polars.datatypes.Int16": [[72, 0, 1, "", "__init__"]], "polars.datatypes.Int32": [[73, 0, 1, "", "__init__"]], "polars.datatypes.Int64": [[74, 0, 1, "", "__init__"]], "polars.datatypes.Int8": [[75, 0, 1, "", "__init__"]], "polars.datatypes.List": [[76, 0, 1, "", "__init__"]], "polars.datatypes.Null": [[77, 0, 1, "", "__init__"]], "polars.datatypes.Object": [[78, 0, 1, "", "__init__"]], "polars.datatypes.String": [[79, 0, 1, "", "__init__"]], "polars.datatypes.Struct": [[80, 0, 1, "", "__init__"]], "polars.datatypes.Time": [[81, 0, 1, "", "__init__"]], "polars.datatypes.UInt16": [[82, 0, 1, "", "__init__"]], "polars.datatypes.UInt32": [[83, 0, 1, "", "__init__"]], "polars.datatypes.UInt64": [[84, 0, 1, "", "__init__"]], "polars.datatypes.UInt8": [[85, 0, 1, "", "__init__"]], "polars.datatypes.Unknown": [[86, 0, 1, "", "__init__"]], "polars.exceptions": [[91, 5, 1, "", "CategoricalRemappingWarning"], [92, 5, 1, "", "ChronoFormatWarning"], [93, 5, 1, "", "ColumnNotFoundError"], [94, 5, 1, "", "ComputeError"], [95, 5, 1, "", "CustomUFuncWarning"], [96, 5, 1, "", "DataOrientationWarning"], [97, 5, 1, "", "DuplicateError"], [98, 5, 1, "", "InvalidOperationError"], [99, 5, 1, "", "MapWithoutReturnDtypeWarning"], [100, 5, 1, "", "ModuleUpgradeRequiredError"], [101, 5, 1, "", "NoDataError"], [102, 5, 1, "", "NoRowsReturnedError"], [103, 5, 1, "", "OutOfBoundsError"], [104, 5, 1, "", "PanicException"], [105, 5, 1, "", "ParameterCollisionError"], [106, 5, 1, "", "PerformanceWarning"], [107, 5, 1, "", "PolarsError"], [108, 5, 1, "", "PolarsInefficientMapWarning"], [109, 5, 1, "", "PolarsWarning"], [110, 5, 1, "", "RowsError"], [111, 5, 1, "", "SQLInterfaceError"], [112, 5, 1, "", "SQLSyntaxError"], [113, 5, 1, "", "SchemaError"], [114, 5, 1, "", "SchemaFieldNotFoundError"], [115, 5, 1, "", "ShapeError"], [116, 5, 1, "", "StringCacheMismatchError"], [117, 5, 1, "", "StructFieldNotFoundError"], [118, 5, 1, "", "TooManyRowsReturnedError"], [119, 5, 1, "", "UnstableWarning"], [120, 5, 1, "", "UnsuitableSQLError"]], "polars.io.csv.batched_reader.BatchedCsvReader": [[130, 0, 1, "", "next_batches"]], "polars.lazyframe.engine_config": [[891, 1, 1, "", "GPUEngine"]], "polars.lazyframe.engine_config.GPUEngine": [[891, 0, 1, "", "__init__"]], "polars.lazyframe.group_by.LazyGroupBy": [[892, 0, 1, "", "agg"], [893, 0, 1, "", "all"], [894, 0, 1, "", "count"], [895, 0, 1, "", "first"], [896, 0, 1, "", "head"], [897, 0, 1, "", "last"], [898, 0, 1, "", "len"], [899, 0, 1, "", "map_groups"], [900, 0, 1, "", "max"], [901, 0, 1, "", "mean"], [902, 0, 1, "", "median"], [903, 0, 1, "", "min"], [904, 0, 1, "", "n_unique"], [905, 0, 1, "", "quantile"], [906, 0, 1, "", "sum"], [907, 0, 1, "", "tail"]], "polars.lazyframe.in_process.InProcessQuery": [[908, 0, 1, "", "cancel"], [909, 0, 1, "", "fetch"], [910, 0, 1, "", "fetch_blocking"]], "polars.plugins": [[920, 4, 1, "", "register_plugin_function"]], "polars.selectors": [[922, 4, 1, "", "all"], [922, 4, 1, "", "alpha"], [922, 4, 1, "", "alphanumeric"], [922, 4, 1, "", "binary"], [922, 4, 1, "", "boolean"], [922, 4, 1, "", "by_dtype"], [922, 4, 1, "", "by_index"], [922, 4, 1, "", "by_name"], [922, 4, 1, "", "categorical"], [922, 4, 1, "", "contains"], [922, 4, 1, "", "date"], [922, 4, 1, "", "datetime"], [922, 4, 1, "", "decimal"], [922, 4, 1, "", "digit"], [922, 4, 1, "", "duration"], [922, 4, 1, "", "ends_with"], [922, 4, 1, "", "exclude"], [922, 4, 1, "", "expand_selector"], [922, 4, 1, "", "first"], [922, 4, 1, "", "float"], [922, 4, 1, "", "integer"], [922, 4, 1, "", "is_selector"], [922, 4, 1, "", "last"], [922, 4, 1, "", "matches"], [922, 4, 1, "", "numeric"], [922, 4, 1, "", "signed_integer"], [922, 4, 1, "", "starts_with"], [922, 4, 1, "", "string"], [922, 4, 1, "", "temporal"], [922, 4, 1, "", "time"], [922, 4, 1, "", "unsigned_integer"]], "polars.testing": [[157, 4, 1, "", "assert_frame_equal"], [158, 4, 1, "", "assert_frame_not_equal"], [159, 4, 1, "", "assert_series_equal"], [160, 4, 1, "", "assert_series_not_equal"]], "polars.testing.parametric": [[161, 1, 1, "", "column"], [162, 4, 1, "", "columns"], [163, 4, 1, "", "create_list_strategy"], [164, 4, 1, "", "dataframes"], [165, 4, 1, "", "dtypes"], [166, 4, 1, "", "lists"], [167, 4, 1, "", "load_profile"], [168, 4, 1, "", "series"], [169, 4, 1, "", "set_profile"]], "polars.testing.parametric.column": [[161, 0, 1, "", "__init__"]]}, "objnames": {"0": ["py", "method", "Python method"], "1": ["py", "class", "Python class"], "2": ["py", "property", "Python property"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "function", "Python function"], "5": ["py", "exception", "Python exception"], "6": ["py", "module", "Python module"]}, "objtypes": {"0": "py:method", "1": "py:class", "2": "py:property", "3": "py:attribute", "4": "py:function", "5": "py:exception", "6": "py:module"}, "terms": {"": [1, 11, 36, 37, 38, 39, 44, 45, 54, 59, 80, 90, 92, 98, 121, 128, 134, 135, 136, 137, 139, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 168, 180, 181, 192, 193, 196, 201, 204, 209, 210, 215, 221, 224, 225, 235, 242, 244, 249, 251, 254, 257, 258, 265, 274, 277, 282, 284, 285, 286, 287, 288, 293, 294, 319, 356, 388, 418, 423, 441, 444, 464, 470, 474, 502, 523, 552, 553, 565, 574, 579, 586, 587, 594, 595, 606, 613, 647, 651, 659, 660, 661, 663, 665, 673, 674, 677, 678, 680, 687, 688, 689, 690, 694, 698, 700, 702, 710, 719, 720, 721, 722, 727, 734, 737, 740, 741, 750, 751, 753, 754, 760, 763, 764, 765, 766, 768, 770, 771, 773, 780, 782, 784, 785, 786, 792, 798, 802, 818, 820, 831, 832, 841, 842, 847, 856, 867, 868, 874, 879, 880, 881, 882, 883, 886, 887, 899, 916, 921, 922, 926, 927, 928, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 966, 967, 968, 969, 970, 971, 972, 973, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1017, 1018, 1021, 1022, 1023, 1025, 1027, 1028, 1029, 1031, 1032, 1033, 1036, 1037, 1040, 1043, 1044, 1045, 1048, 1056, 1058, 1059, 1060, 1061, 1066, 1067, 1069, 1070, 1071, 1072, 1074, 1075, 1076, 1077, 1079, 1080, 1081, 1082, 1084, 1086, 1088, 1089, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1112, 1113, 1114, 1115, 1116, 1117, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1152, 1153, 1154, 1155, 1156, 1157, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1223, 1224, 1225, 1226, 1227, 1228, 1230, 1231, 1232, 1233, 1234, 1235, 1237, 1238, 1239, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1272, 1273, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1305, 1310, 1314, 1318, 1321, 1328, 1329], "0": [1, 7, 9, 11, 13, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 37, 38, 39, 44, 48, 50, 51, 52, 54, 58, 66, 76, 122, 131, 134, 135, 136, 137, 139, 140, 142, 143, 144, 145, 146, 148, 151, 152, 153, 154, 156, 161, 162, 163, 164, 165, 166, 168, 171, 177, 178, 179, 181, 182, 183, 184, 186, 187, 188, 189, 190, 192, 194, 195, 199, 200, 201, 203, 204, 207, 208, 209, 210, 211, 215, 216, 220, 222, 223, 224, 227, 229, 231, 232, 233, 234, 235, 238, 239, 240, 241, 244, 245, 246, 249, 251, 253, 254, 255, 256, 257, 264, 265, 266, 267, 269, 274, 275, 276, 277, 278, 279, 281, 283, 287, 289, 290, 293, 295, 296, 298, 300, 301, 303, 305, 306, 307, 308, 309, 310, 311, 312, 319, 322, 323, 327, 329, 330, 332, 336, 337, 338, 339, 340, 341, 344, 345, 346, 349, 350, 352, 355, 365, 368, 370, 376, 389, 393, 394, 395, 396, 397, 398, 405, 406, 407, 411, 412, 413, 419, 420, 424, 427, 429, 430, 434, 440, 442, 444, 447, 448, 450, 451, 455, 458, 459, 460, 461, 462, 463, 465, 467, 468, 469, 470, 473, 474, 476, 478, 479, 481, 483, 485, 488, 489, 492, 495, 497, 498, 499, 500, 502, 504, 509, 510, 513, 516, 519, 520, 521, 527, 528, 540, 544, 546, 547, 548, 549, 551, 552, 554, 555, 556, 560, 565, 568, 571, 572, 573, 575, 577, 586, 587, 588, 589, 590, 592, 593, 595, 598, 599, 601, 602, 603, 604, 608, 609, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 639, 641, 642, 643, 644, 648, 649, 650, 653, 658, 659, 660, 663, 664, 702, 703, 704, 706, 707, 708, 711, 716, 717, 719, 724, 725, 726, 727, 728, 729, 730, 731, 732, 734, 736, 738, 745, 749, 752, 758, 759, 761, 764, 767, 768, 769, 773, 775, 776, 780, 781, 788, 789, 790, 791, 792, 793, 798, 802, 817, 820, 821, 822, 825, 827, 828, 830, 831, 833, 834, 836, 837, 838, 840, 841, 842, 845, 846, 850, 852, 855, 856, 859, 861, 862, 866, 867, 872, 874, 875, 876, 884, 886, 888, 889, 890, 892, 894, 895, 897, 899, 900, 901, 902, 903, 904, 905, 906, 916, 922, 926, 933, 934, 935, 936, 937, 938, 939, 941, 943, 946, 952, 962, 965, 967, 972, 984, 989, 991, 992, 994, 997, 998, 999, 1006, 1007, 1008, 1010, 1011, 1012, 1013, 1020, 1024, 1028, 1029, 1030, 1032, 1034, 1038, 1044, 1048, 1051, 1052, 1054, 1055, 1059, 1062, 1067, 1068, 1069, 1070, 1075, 1080, 1082, 1087, 1088, 1090, 1092, 1093, 1097, 1100, 1102, 1103, 1104, 1105, 1108, 1109, 1116, 1117, 1120, 1123, 1126, 1127, 1128, 1134, 1135, 1147, 1151, 1153, 1154, 1155, 1156, 1157, 1161, 1162, 1168, 1169, 1175, 1178, 1180, 1181, 1182, 1186, 1187, 1191, 1192, 1194, 1195, 1197, 1198, 1199, 1201, 1202, 1203, 1204, 1206, 1214, 1215, 1216, 1217, 1220, 1221, 1222, 1225, 1230, 1231, 1232, 1235, 1236, 1240, 1245, 1278, 1279, 1281, 1284, 1286, 1287, 1288, 1289, 1293, 1295, 1305, 1310, 1314, 1320, 1322, 1323, 1324, 1327, 1328, 1330, 1331, 1333, 1335, 1336], "00": [27, 39, 65, 181, 188, 210, 289, 319, 414, 415, 418, 422, 432, 433, 435, 438, 439, 441, 444, 445, 446, 447, 448, 449, 450, 451, 452, 455, 617, 619, 621, 623, 625, 628, 630, 632, 687, 690, 694, 745, 746, 747, 748, 788, 789, 790, 802, 820, 828, 842, 916, 922, 1014, 1015, 1018, 1019, 1020, 1022, 1023, 1024, 1029, 1030, 1034, 1036, 1037, 1038, 1039, 1042, 1043, 1046, 1047, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1059, 1245, 1259, 1262, 1266, 1328], "000": [9, 10, 27, 39, 319, 1245, 1336], "0000": [281, 319, 1289, 1305, 1336], "000000": [373, 374, 444, 654, 969, 970, 1226], "00000001": [11, 718, 802], "00000010": [718, 802], "00000011": [718, 802], "00000100": [718, 802], "00001000": [718, 802], "00001010": [718, 802], "00001011": [718, 802], "0000e": 11, "0000ff": [373, 374, 654, 969, 970, 1226], "0001": 444, "000100": 444, "000101": 444, "0005": 922, "00050": 922, "000800": 1048, "001": [52, 697, 748, 1051, 1052, 1054, 1269], "002": [748, 1051, 1052, 1054], "005": [1062, 1305], "00prefix": 922, "00z": [687, 690, 1259, 1262], "01": [28, 50, 64, 65, 164, 181, 188, 208, 210, 225, 251, 289, 319, 413, 414, 415, 416, 417, 418, 419, 420, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 455, 456, 461, 614, 617, 619, 621, 623, 625, 628, 630, 632, 687, 689, 690, 694, 729, 742, 743, 744, 745, 746, 747, 748, 802, 820, 828, 842, 847, 865, 916, 922, 1013, 1015, 1017, 1018, 1019, 1020, 1023, 1024, 1029, 1030, 1034, 1036, 1037, 1038, 1039, 1042, 1043, 1045, 1046, 1047, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1059, 1259, 1261, 1262, 1266, 1328, 1331], "010": [9, 692, 1264], "01000": 28, "01000010": [718, 802], "01000110": [718, 802], "012": [634, 802, 1203, 1305], "0123": [697, 1269], "01234": [634, 802, 1203, 1305], "012345": 1048, "015625": [1178, 1305], "02": [50, 181, 188, 208, 210, 251, 289, 319, 413, 415, 417, 423, 432, 433, 435, 438, 443, 444, 446, 449, 451, 455, 614, 617, 619, 621, 623, 625, 628, 630, 632, 633, 687, 689, 690, 694, 729, 742, 743, 744, 745, 746, 747, 748, 802, 820, 828, 842, 865, 916, 922, 965, 1015, 1017, 1019, 1020, 1023, 1024, 1029, 1030, 1034, 1036, 1037, 1038, 1042, 1043, 1046, 1047, 1050, 1053, 1055, 1056, 1151, 1259, 1261, 1262, 1266, 1328, 1329], "03": [50, 128, 134, 181, 210, 225, 251, 289, 319, 415, 417, 418, 423, 432, 433, 435, 438, 439, 441, 443, 444, 445, 446, 449, 451, 452, 455, 461, 474, 614, 617, 619, 621, 623, 625, 628, 630, 632, 689, 694, 742, 743, 744, 745, 746, 747, 748, 802, 820, 842, 847, 865, 916, 922, 1015, 1017, 1018, 1023, 1024, 1029, 1030, 1036, 1037, 1038, 1042, 1043, 1045, 1047, 1049, 1050, 1053, 1055, 1261, 1266], "037037": [1178, 1305], "04": [154, 181, 188, 210, 289, 319, 417, 418, 432, 433, 438, 439, 441, 445, 446, 449, 451, 455, 617, 619, 621, 623, 625, 628, 630, 632, 687, 729, 742, 745, 746, 748, 802, 820, 828, 842, 916, 922, 1018, 1030, 1034, 1036, 1037, 1038, 1042, 1045, 1049, 1050, 1053, 1055, 1059, 1259, 1328], "047198": 1330, "05": [16, 154, 157, 158, 159, 160, 164, 181, 188, 289, 319, 413, 416, 417, 418, 419, 420, 424, 427, 428, 429, 430, 432, 433, 434, 438, 440, 441, 442, 444, 445, 729, 742, 743, 745, 746, 820, 828, 916, 922, 1017, 1018, 1019, 1020, 1042, 1043, 1045, 1046, 1048, 1049, 1056, 1328, 1329, 1331], "050545": 128, "0522623626787952": [1109, 1305], "0545": [1019, 1020, 1046], "05t10": 1048, "06": [164, 181, 289, 319, 413, 417, 431, 437, 438, 439, 440, 452, 453, 742, 745, 820, 916, 922, 1013, 1042, 1043, 1048, 1056], "060": [419, 420, 424, 427, 429, 430, 434, 440, 442], "0601749420166": [196, 319], "06293300616044681": [1062, 1305], "07": [16, 134, 164, 188, 319, 413, 416, 417, 428, 438, 439, 444, 452, 687, 742, 743, 745, 746, 754, 828, 916, 922, 1013, 1017, 1042, 1048, 1259, 1328, 1331], "071068": [188, 319, 828, 916], "08": [134, 157, 158, 159, 160, 188, 225, 251, 266, 319, 413, 417, 432, 433, 439, 444, 614, 687, 746, 748, 802, 828, 847, 865, 916, 922, 1013, 1043, 1056, 1259, 1328, 1329], "085537": [1071, 1305], "09": [50, 134, 188, 251, 319, 413, 417, 432, 433, 444, 594, 614, 691, 742, 743, 745, 790, 802, 828, 865, 916, 922, 1013, 1263], "090909": [595, 802], "094395": 1330, "098612": [549, 802, 1154, 1156, 1305, 1327], "0999": [416, 428], "0_": [39, 319], "0m": [422, 1022], "0\u00b5": 444, "1": [1, 7, 8, 9, 11, 12, 13, 15, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 48, 50, 51, 52, 53, 54, 58, 59, 76, 80, 93, 96, 97, 98, 121, 122, 123, 124, 125, 126, 127, 128, 131, 134, 135, 138, 139, 140, 143, 144, 145, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 164, 168, 177, 178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 259, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 319, 322, 323, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 349, 350, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 376, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 505, 506, 509, 510, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 561, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 656, 658, 659, 660, 661, 662, 663, 664, 666, 667, 668, 669, 670, 673, 674, 675, 679, 680, 681, 682, 683, 684, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 721, 723, 724, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 789, 790, 791, 792, 798, 802, 817, 818, 820, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 851, 853, 854, 855, 856, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 888, 889, 890, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 916, 922, 926, 927, 928, 931, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 946, 947, 948, 949, 950, 951, 952, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 972, 983, 984, 987, 988, 989, 991, 992, 993, 995, 996, 997, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1065, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1079, 1080, 1081, 1082, 1084, 1086, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1112, 1113, 1116, 1117, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1172, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1231, 1233, 1234, 1235, 1236, 1238, 1239, 1240, 1241, 1242, 1245, 1246, 1247, 1251, 1252, 1269, 1270, 1272, 1273, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1305, 1310, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1327, 1328, 1329, 1330, 1331, 1333, 1334, 1335, 1336], "10": [13, 16, 17, 27, 34, 36, 38, 39, 40, 41, 44, 48, 50, 58, 128, 134, 135, 137, 148, 156, 183, 188, 192, 198, 207, 208, 210, 212, 214, 215, 216, 221, 225, 228, 239, 243, 245, 249, 251, 257, 266, 270, 293, 298, 301, 303, 306, 307, 308, 309, 310, 311, 312, 319, 330, 334, 342, 343, 344, 346, 395, 401, 404, 409, 413, 414, 416, 417, 419, 420, 422, 424, 427, 428, 429, 430, 432, 433, 434, 438, 439, 440, 442, 444, 452, 455, 461, 482, 483, 484, 488, 494, 506, 514, 520, 522, 528, 538, 540, 542, 546, 548, 564, 566, 577, 592, 594, 595, 598, 608, 609, 614, 645, 692, 702, 705, 718, 729, 730, 738, 743, 745, 746, 749, 752, 754, 756, 762, 763, 787, 790, 802, 823, 824, 828, 831, 842, 843, 845, 847, 851, 860, 861, 865, 867, 877, 878, 886, 892, 895, 897, 900, 901, 902, 903, 904, 905, 906, 916, 922, 995, 1009, 1013, 1014, 1016, 1017, 1022, 1031, 1042, 1048, 1056, 1059, 1062, 1068, 1089, 1099, 1113, 1121, 1129, 1135, 1145, 1147, 1149, 1153, 1155, 1159, 1175, 1187, 1205, 1207, 1264, 1277, 1284, 1286, 1289, 1305, 1314, 1321, 1322, 1323, 1324, 1325, 1327, 1328, 1329, 1331, 1336], "100": [10, 17, 27, 39, 124, 127, 131, 134, 135, 136, 139, 143, 144, 145, 148, 152, 226, 244, 262, 319, 444, 608, 609, 638, 652, 662, 664, 667, 675, 691, 747, 802, 848, 871, 916, 922, 1064, 1155, 1171, 1186, 1187, 1193, 1194, 1196, 1210, 1224, 1236, 1239, 1247, 1263, 1305, 1325, 1336], "1000": [136, 196, 275, 296, 319, 335, 802, 890, 916, 1051, 1155, 1283, 1305, 1336], "10000": [134, 223, 319], "100000": [10, 27], "1000000": [11, 1054], "1001": [296, 319, 890, 916], "1002": [296, 319, 890, 916], "10047419486152048166": [211, 319], "1005": [335, 802], "100_000": [780, 852, 916], "100\u00b5": 444, "101": [9, 27, 226, 319, 417, 444, 692, 848, 916, 922, 1264, 1336], "101000": 417, "10101": [27, 1331], "1010101": 9, "101514": [188, 319, 828, 916], "102": [226, 319, 848, 916], "1024": [36, 44, 45, 48, 134, 135, 136, 144, 152, 319, 376, 916, 972], "1040361802642726": [1109, 1305], "107149": 1330, "10734580197236529959": [1088, 1305], "1073741824": [639, 802], "10783150408545073287": [211, 319], "107_930_000": 1314, "10_000": [39, 319], "10i": [210, 319, 842, 916], "10m": [439, 452, 1043, 1056], "10t00": 444, "11": [10, 16, 44, 48, 156, 164, 179, 188, 225, 251, 319, 330, 432, 433, 435, 439, 452, 476, 488, 520, 571, 595, 604, 614, 615, 629, 645, 718, 785, 790, 798, 802, 817, 823, 824, 828, 843, 847, 851, 861, 865, 878, 916, 922, 1039, 1043, 1056, 1159, 1192, 1305, 1323], "110": [192, 319, 675, 692, 831, 916, 1264], "1101441246220388612": [483, 802], "111": [10, 1325], "11111": 1044, "111110": 1044, "11111001": [718, 802], "11111010": [718, 802], "11111111": 10, "112": [639, 802, 1336], "11330": 163, "1152921504606846976": [1184, 1305], "116": 163, "11638928888656214026": [483, 802], "118034": [876, 916], "11aa": 1328, "11aabb": 1328, "11h": [414, 1014], "12": [26, 39, 50, 128, 134, 156, 164, 188, 210, 221, 225, 226, 251, 266, 289, 319, 330, 403, 414, 416, 417, 421, 428, 431, 432, 433, 435, 436, 437, 439, 444, 452, 453, 454, 461, 488, 520, 552, 568, 595, 603, 614, 629, 639, 653, 673, 691, 739, 742, 745, 746, 747, 763, 788, 789, 790, 802, 828, 842, 843, 847, 848, 851, 865, 872, 878, 916, 922, 1014, 1016, 1017, 1028, 1029, 1031, 1035, 1043, 1048, 1056, 1068, 1159, 1202, 1225, 1246, 1263, 1305, 1327, 1328, 1329, 1331, 1333, 1336], "120": [226, 319, 748, 848, 916, 1330], "1200": [634, 802], "120134": [691, 1263], "121": 1336, "123": [9, 561, 653, 660, 674, 697, 792, 922, 1225, 1232, 1269, 1282, 1305], "123000": 922, "1232e": [997, 999, 1305], "1234": [27, 634, 802], "12345": [754, 992, 1048, 1080, 1202, 1305], "1234500": 922, "123456": [9, 922], "1234567": 27, "123456780": 128, "12346": 754, "123465": 922, "123a123": 674, "123abc": [673, 1245, 1246], "125": [1, 39, 54, 319, 328, 599, 781, 802, 875, 916, 1175, 1178, 1305], "127": [1293, 1305, 1324], "128": [52, 66, 71, 1175, 1305], "129": [639, 802], "13": [182, 183, 188, 199, 200, 207, 215, 226, 227, 239, 251, 293, 301, 303, 306, 307, 308, 309, 310, 311, 312, 319, 330, 413, 419, 420, 424, 427, 429, 430, 434, 440, 442, 564, 566, 614, 691, 732, 738, 741, 745, 752, 786, 788, 791, 802, 821, 822, 828, 836, 837, 848, 850, 865, 886, 895, 897, 900, 901, 902, 903, 904, 905, 906, 916, 1013, 1043, 1056, 1057, 1159, 1263, 1305, 1324], "130": [131, 226, 319, 848, 916], "13382926553367784577": [483, 802], "134821952": 1314, "134_821_952": 1314, "135": [726, 1330], "13614470193936745724": [483, 802], "13756996518000038261": [1088, 1305], "13d": 444, "13h": [414, 1014], "14": [38, 156, 188, 226, 229, 301, 303, 306, 307, 308, 309, 310, 311, 312, 319, 414, 419, 420, 424, 427, 429, 430, 434, 440, 442, 444, 488, 561, 604, 745, 788, 789, 802, 828, 848, 895, 897, 900, 901, 902, 903, 904, 905, 906, 916, 922, 1014, 1043, 1048], "140": [226, 319, 848, 916], "141592653589793": 10, "141593": [603, 802, 933, 1305, 1327, 1330], "142857": [1175, 1305], "143": [691, 1263, 1336], "1433": [37, 319], "1436e16": 164, "1438741209321515184": [211, 319], "1440": [449, 1053], "1443e235": 1336, "149": 1336, "14d": 922, "14h": 444, "15": [10, 39, 156, 188, 210, 215, 226, 229, 251, 319, 405, 409, 433, 439, 444, 452, 461, 598, 614, 629, 739, 745, 788, 789, 802, 828, 842, 848, 865, 916, 922, 1006, 1009, 1043, 1048, 1056, 1068, 1305, 1324, 1328], "150": [226, 319, 848, 916, 1194, 1305], "1500": [156, 167], "15000": [223, 319], "153061": [502, 802], "15836": 164, "15_000": [223, 319], "16": [1, 39, 52, 72, 82, 156, 170, 188, 210, 226, 251, 293, 319, 401, 404, 444, 488, 568, 575, 594, 599, 614, 692, 702, 738, 748, 749, 752, 802, 828, 842, 848, 865, 872, 886, 916, 922, 1043, 1056, 1175, 1215, 1264, 1278, 1305, 1324, 1327, 1328, 1333], "160": [226, 319, 848, 916], "165": [1043, 1056], "1656e15": [999, 1305], "166667": [1175, 1305], "1666683077": 754, "1666683099": 754, "167": 50, "16996": 1336, "16h": 922, "17": [156, 164, 196, 225, 298, 319, 461, 594, 615, 633, 734, 754, 789, 802, 847, 892, 916, 997, 999, 1043, 1068, 1192, 1305, 1336], "170": [226, 319, 848, 916], "17293822569102704640": [1184, 1305], "174": 1336, "175201": [643, 802, 1216, 1305], "1755e": [161, 164], "1764": 54, "17888890": [196, 319], "179": 1336, "17_500": [223, 319], "18": [37, 128, 188, 236, 251, 319, 404, 439, 452, 455, 488, 577, 594, 614, 702, 802, 828, 857, 861, 865, 916, 922, 1048, 1059, 1322, 1333], "180": [407, 603, 802, 1330], "1844": 164, "18446744073709551614": [1184, 1305], "185_000_000": 1314, "186": 1336, "1875": [631, 802, 884, 916], "1897": [416, 428, 1016, 1031], "18d": 922, "19": [139, 164, 225, 251, 319, 416, 439, 614, 619, 621, 623, 625, 691, 802, 847, 865, 916, 1016, 1043, 1056, 1263], "1920": 1328, "196": 1329, "1964": [861, 916], "1969": [1328, 1329], "1970": [64, 65, 154, 1314], "1972": 1314, "1976": [426, 456], "1977": [426, 456], "1978": [419, 420, 424, 426, 427, 429, 430, 434, 440, 442, 456, 1329], "1979": [426, 456], "1980": 444, "1985": [743, 746], "1990": [134, 1314], "1993": 1314, "1994": 1314, "1995": 134, "1998": [435, 1039], "1999": [266, 319, 435, 444, 922, 1039, 1048, 1331], "199992": [852, 916], "199994": [852, 916], "199996": [852, 916], "199998": [852, 916], "1_000_000": [196, 319, 1066, 1305], "1_234_500": 922, "1d": [210, 225, 251, 289, 319, 415, 435, 439, 444, 446, 449, 452, 455, 461, 614, 617, 619, 621, 623, 625, 628, 630, 632, 743, 744, 746, 747, 748, 762, 789, 790, 802, 842, 847, 865, 916, 922, 1015, 1023, 1029, 1039, 1043, 1047, 1050, 1053, 1056, 1068, 1305], "1e": [11, 157, 158, 159, 160], "1e6": 11, "1h": [210, 225, 251, 289, 319, 422, 435, 439, 452, 461, 614, 617, 619, 621, 623, 625, 628, 630, 632, 746, 747, 789, 790, 802, 842, 847, 865, 916, 1022, 1024, 1039, 1043, 1056, 1068, 1305], "1i": [210, 251, 289, 319, 461, 614, 617, 619, 621, 623, 625, 628, 630, 632, 802, 842, 865, 916, 1068, 1305], "1m": [210, 225, 251, 289, 319, 435, 439, 451, 452, 461, 614, 617, 619, 621, 623, 625, 628, 630, 632, 746, 747, 789, 790, 802, 842, 847, 865, 916, 1039, 1043, 1051, 1052, 1054, 1055, 1056, 1068, 1305], "1mo": [210, 225, 251, 289, 319, 418, 432, 433, 435, 438, 439, 445, 452, 461, 614, 617, 619, 621, 623, 625, 628, 630, 632, 743, 744, 746, 747, 789, 790, 802, 842, 847, 865, 916, 1018, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1049, 1056, 1057, 1068, 1305], "1n": [210, 225, 251, 289, 319, 435, 439, 452, 461, 614, 617, 619, 621, 623, 625, 628, 630, 632, 746, 747, 789, 790, 802, 842, 847, 865, 916, 1039, 1043, 1056, 1068, 1305], "1q": [210, 225, 251, 289, 319, 435, 439, 452, 614, 617, 619, 621, 623, 625, 628, 630, 632, 743, 744, 746, 747, 789, 790, 802, 842, 847, 865, 916, 1039, 1043, 1056], "1st_col": 922, "1u": [210, 225, 251, 289, 319, 435, 439, 452, 461, 614, 617, 619, 621, 623, 625, 628, 630, 632, 746, 747, 789, 790, 802, 842, 847, 865, 916, 1039, 1043, 1056, 1068, 1305], "1w": [210, 225, 251, 289, 319, 435, 439, 452, 461, 614, 617, 619, 621, 623, 625, 628, 630, 632, 743, 744, 746, 747, 789, 790, 802, 842, 847, 865, 916, 1039, 1043, 1056, 1068, 1305], "1w2d": [743, 744], "1y": [210, 225, 251, 289, 319, 435, 439, 452, 614, 617, 619, 621, 623, 625, 628, 630, 632, 743, 744, 746, 747, 789, 790, 802, 842, 847, 865, 916, 1039, 1043, 1056], "1y2mo": [435, 1039], "1zy3": [653, 1225], "2": [1, 7, 8, 10, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 34, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 58, 59, 76, 80, 93, 96, 98, 121, 122, 123, 124, 125, 126, 127, 128, 131, 134, 137, 143, 144, 146, 148, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 164, 166, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 259, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 319, 322, 323, 327, 328, 329, 330, 332, 334, 335, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 376, 387, 388, 389, 391, 392, 393, 394, 395, 398, 399, 400, 401, 402, 403, 404, 405, 406, 409, 410, 413, 414, 416, 417, 418, 419, 420, 421, 422, 425, 428, 431, 432, 433, 435, 436, 437, 438, 439, 441, 442, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 477, 478, 479, 480, 481, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 568, 569, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 644, 645, 646, 647, 648, 650, 652, 653, 654, 655, 656, 657, 659, 661, 662, 663, 664, 665, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 690, 691, 692, 693, 695, 696, 697, 698, 699, 700, 701, 702, 703, 705, 706, 708, 709, 710, 711, 712, 713, 714, 715, 717, 718, 719, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 767, 768, 769, 770, 772, 773, 776, 780, 781, 782, 783, 784, 785, 787, 790, 791, 792, 798, 802, 817, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 857, 858, 860, 861, 862, 863, 864, 865, 866, 867, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 888, 889, 890, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 916, 921, 922, 926, 927, 928, 931, 934, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 972, 983, 988, 989, 991, 992, 993, 994, 996, 997, 999, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1013, 1014, 1017, 1019, 1020, 1022, 1024, 1027, 1028, 1029, 1031, 1033, 1034, 1035, 1036, 1037, 1041, 1042, 1043, 1046, 1056, 1058, 1059, 1060, 1061, 1062, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1079, 1080, 1081, 1082, 1084, 1086, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1109, 1112, 1113, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1172, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1213, 1215, 1217, 1218, 1219, 1220, 1221, 1222, 1225, 1231, 1233, 1235, 1236, 1237, 1239, 1240, 1242, 1245, 1246, 1251, 1252, 1254, 1255, 1256, 1259, 1260, 1262, 1263, 1264, 1265, 1268, 1270, 1272, 1273, 1275, 1276, 1277, 1278, 1280, 1281, 1282, 1283, 1285, 1286, 1287, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1305, 1310, 1314, 1315, 1317, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1327, 1328, 1329, 1330, 1331, 1333, 1334, 1335, 1336], "20": [37, 38, 39, 134, 139, 156, 161, 162, 163, 164, 168, 171, 179, 188, 192, 198, 214, 215, 236, 243, 245, 249, 266, 276, 277, 281, 295, 300, 319, 342, 343, 344, 395, 409, 416, 419, 420, 424, 427, 428, 429, 430, 434, 439, 440, 442, 444, 452, 455, 476, 483, 488, 552, 560, 571, 598, 617, 619, 621, 623, 625, 628, 630, 632, 658, 702, 717, 745, 754, 762, 781, 789, 802, 817, 828, 831, 834, 857, 860, 875, 889, 894, 916, 922, 1009, 1016, 1020, 1031, 1043, 1048, 1056, 1059, 1071, 1087, 1186, 1230, 1284, 1286, 1289, 1305, 1321, 1322, 1325, 1331], "200": [447, 448, 450, 608, 609, 802, 922, 1064, 1171, 1186, 1187, 1193, 1194, 1196, 1305, 1325], "2000": [416, 425, 428, 432, 433, 435, 922, 1016, 1025, 1031, 1036, 1037, 1039, 1044, 1314, 1328], "200000": [447, 852, 916], "200000000": 450, "2001": [16, 415, 416, 421, 423, 425, 428, 431, 435, 436, 437, 439, 443, 452, 453, 454, 455, 617, 619, 621, 623, 625, 628, 630, 632, 687, 802, 922, 1015, 1016, 1021, 1023, 1024, 1025, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1038, 1039, 1040, 1041, 1043, 1047, 1056, 1057, 1058, 1059, 1060, 1259], "2002": [134, 425, 435, 1025, 1039, 1060], "2003": [435, 754, 1039], "2004": [435, 1039], "2005": [435, 1039], "2006": [435, 1039], "2008": 1314, "200m": [447, 448, 450], "2010": [266, 319, 444, 922], "2011": [414, 1014], "2012": [414, 1014, 1331], "2016": [225, 319, 847, 916], "2017": [225, 319, 847, 916], "2018": [225, 319, 438, 847, 916, 1042], "2019": [225, 319, 847, 916], "202": 1329, "2020": [138, 149, 181, 188, 208, 225, 251, 319, 322, 413, 418, 422, 438, 441, 444, 445, 446, 447, 448, 449, 450, 451, 461, 614, 687, 689, 690, 729, 802, 820, 828, 847, 865, 916, 922, 1013, 1018, 1022, 1042, 1045, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1068, 1259, 1261, 1262, 1305, 1329], "2021": [181, 188, 208, 210, 289, 319, 687, 762, 820, 828, 842, 916, 922, 1019, 1020, 1026, 1046, 1259, 1328], "2022": [50, 181, 188, 208, 319, 417, 439, 452, 687, 743, 744, 746, 747, 748, 754, 820, 828, 916, 922, 1017, 1026, 1043, 1056, 1259], "2023": [16, 39, 128, 156, 223, 319, 417, 748, 762, 922, 1017], "2024": [156, 413, 419, 420, 424, 427, 429, 430, 434, 440, 442, 594, 729, 742, 743, 745, 746, 748, 802, 922, 1013, 1328, 1331], "2025": [413, 729, 922, 1013], "2026": 1329, "2030": 1328, "2031": 922, "2040": 444, "2047317070637311557": [211, 319], "2055938745": 128, "2065": [419, 420, 424, 427, 429, 430, 434, 440, 442], "2068": 164, "207": 1329, "2077": [266, 319, 444, 922, 1048, 1328, 1329], "2095": 164, "20_000": [39, 319], "20t08": 444, "20t18": 1048, "20word": 137, "21": [156, 188, 236, 268, 319, 416, 617, 619, 621, 623, 625, 628, 630, 632, 745, 754, 802, 828, 857, 916, 922, 1016, 1322], "213": 1336, "2147483647": 1336, "2147483648": [1157, 1305], "21d": 922, "22": [44, 48, 156, 164, 319, 421, 436, 439, 452, 454, 455, 615, 617, 619, 621, 623, 625, 628, 630, 632, 687, 745, 798, 802, 916, 922, 1043, 1056, 1059, 1192, 1259, 1305, 1328, 1329, 1336], "221": 1336, "2246e": [1215, 1278, 1305], "225": [439, 452, 1330], "22500": 780, "22_000_000": 1314, "22_500": 780, "23": [10, 164, 188, 210, 251, 281, 319, 417, 421, 424, 436, 439, 444, 454, 614, 617, 619, 621, 623, 625, 628, 630, 632, 745, 748, 788, 789, 790, 802, 828, 842, 865, 875, 916, 922, 1017, 1024, 1289, 1305, 1335, 1336], "230498": 11, "230498095872587": 11, "2304980958725870923": 11, "232338648": 1314, "2337": [39, 319], "234": 27, "2345": 922, "23456789": 10, "235": 1336, "23h": 922, "24": [52, 156, 210, 225, 229, 251, 266, 289, 319, 403, 405, 421, 435, 436, 439, 446, 452, 454, 575, 614, 617, 619, 621, 623, 625, 628, 630, 632, 743, 744, 746, 747, 748, 789, 790, 802, 842, 847, 865, 916, 1006, 1039, 1043, 1050, 1056, 1108, 1305, 1328, 1335], "24030": 163, "249": [718, 802], "25": [1, 27, 39, 54, 128, 188, 192, 210, 225, 251, 276, 281, 289, 293, 319, 376, 409, 421, 422, 436, 439, 444, 452, 454, 461, 599, 601, 614, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 711, 745, 746, 747, 748, 754, 764, 789, 790, 802, 828, 831, 842, 847, 854, 865, 884, 886, 916, 922, 972, 1008, 1009, 1022, 1043, 1048, 1056, 1062, 1068, 1090, 1175, 1180, 1245, 1305, 1322, 1327, 1333, 1334], "250": [718, 802, 1194, 1305, 1325, 1336], "2500": [223, 281, 319], "254508": [461, 802, 1068, 1305], "255": 1336, "256": [229, 319, 376, 972, 1175, 1305, 1327], "2560": 972, "259921": [393, 802, 991, 1305, 1327], "25_000_000": 1314, "26": [37, 39, 156, 161, 162, 163, 164, 168, 188, 319, 422, 453, 828, 916, 1022], "266667": [188, 319, 828, 916], "27": [1, 54, 276, 312, 319, 404, 431, 437, 453, 702, 802, 906, 922, 1178, 1284, 1305, 1335, 1336], "270": 1330, "28": [272, 277, 319, 328, 438, 455, 802, 1042, 1059, 1286, 1305, 1328, 1330, 1335, 1336], "283185": [603, 802], "2846": 319, "285714": [489, 802, 1093, 1305], "289962": 1330, "28_341_469": 1314, "29": [16, 156, 414, 432, 1014, 1036], "29096": 1336, "290994": [876, 916], "292432": [934, 1305], "292893": [461, 802, 1068, 1305], "2_color_scal": [39, 319], "2d": [251, 276, 277, 319, 435, 614, 762, 802, 865, 916, 1014, 1021], "2h": [617, 619, 621, 623, 625, 628, 630, 632, 802], "2i": [210, 319, 842, 916], "2m": [922, 1034], "2x": 163, "3": [1, 7, 8, 9, 10, 11, 13, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 27, 34, 36, 38, 39, 40, 41, 42, 43, 44, 50, 51, 52, 53, 54, 58, 59, 76, 93, 96, 98, 121, 122, 123, 124, 125, 126, 127, 128, 131, 134, 137, 139, 143, 144, 145, 148, 154, 156, 157, 158, 159, 160, 163, 164, 165, 166, 168, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 224, 225, 227, 228, 229, 230, 231, 232, 233, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 259, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 295, 296, 297, 298, 299, 301, 302, 303, 305, 306, 307, 308, 309, 310, 311, 312, 313, 319, 322, 323, 328, 329, 330, 331, 333, 344, 345, 346, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 387, 388, 389, 390, 391, 392, 393, 394, 395, 399, 400, 401, 402, 403, 404, 405, 406, 409, 410, 411, 412, 413, 415, 417, 418, 419, 420, 423, 424, 425, 426, 427, 428, 429, 430, 431, 434, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 452, 453, 455, 456, 457, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 501, 502, 503, 504, 505, 506, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 541, 542, 543, 544, 547, 548, 549, 550, 551, 552, 553, 573, 574, 575, 576, 577, 578, 580, 582, 584, 585, 588, 591, 592, 594, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 644, 646, 647, 648, 651, 652, 654, 655, 656, 659, 660, 661, 662, 663, 664, 665, 666, 667, 669, 670, 673, 674, 675, 676, 677, 678, 679, 680, 681, 688, 689, 694, 695, 698, 699, 700, 701, 702, 703, 705, 709, 710, 713, 714, 715, 717, 718, 723, 724, 725, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 776, 777, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 798, 802, 817, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 850, 851, 853, 854, 855, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 888, 889, 890, 892, 893, 895, 896, 897, 899, 900, 901, 902, 903, 904, 905, 906, 907, 916, 921, 922, 927, 928, 931, 933, 935, 936, 937, 939, 940, 941, 942, 943, 946, 947, 948, 949, 950, 951, 952, 954, 955, 956, 957, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 973, 983, 984, 985, 987, 988, 989, 991, 992, 993, 996, 997, 998, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1017, 1018, 1021, 1023, 1024, 1025, 1027, 1028, 1029, 1031, 1033, 1034, 1035, 1040, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1051, 1052, 1054, 1056, 1058, 1059, 1061, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1079, 1080, 1081, 1082, 1084, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1109, 1112, 1113, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1131, 1132, 1133, 1134, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1148, 1149, 1150, 1151, 1152, 1154, 1155, 1156, 1157, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1171, 1172, 1173, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1213, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1224, 1226, 1227, 1228, 1231, 1232, 1233, 1236, 1237, 1238, 1239, 1241, 1242, 1245, 1246, 1247, 1248, 1249, 1253, 1260, 1261, 1266, 1267, 1270, 1272, 1273, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1285, 1286, 1287, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1305, 1310, 1314, 1315, 1317, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1327, 1328, 1329, 1330, 1331, 1333, 1334, 1335, 1336], "30": [39, 188, 198, 210, 214, 243, 249, 272, 293, 319, 322, 342, 343, 344, 409, 417, 419, 420, 424, 427, 429, 430, 431, 432, 434, 437, 438, 439, 440, 442, 444, 445, 452, 453, 483, 560, 639, 745, 762, 788, 789, 802, 828, 834, 842, 860, 886, 916, 922, 1009, 1017, 1036, 1042, 1043, 1048, 1049, 1056, 1087, 1305, 1310, 1321, 1322, 1325, 1327, 1328, 1330, 1331, 1334, 1336], "300": [272, 319, 482, 592, 609, 802, 922, 1187, 1193, 1194, 1196, 1305, 1325], "3000": 922, "3002": [416, 428, 1016, 1031], "30103": [548, 802, 1327], "3022416320763508302": [1088, 1305], "30_000": [39, 319], "30m": [210, 319, 439, 452, 842, 916, 1043, 1056], "30t16": 444, "31": [54, 188, 266, 319, 416, 417, 421, 428, 432, 435, 445, 658, 687, 742, 745, 754, 762, 781, 828, 916, 922, 1014, 1016, 1017, 1021, 1031, 1036, 1048, 1049, 1186, 1230, 1259, 1305, 1329, 1331, 1336], "31t06": 1048, "32": [52, 64, 69, 73, 83, 220, 225, 251, 319, 575, 614, 639, 802, 847, 865, 916, 1010, 1040, 1175, 1197, 1305, 1322, 1328], "321": [27, 1336], "3212": [691, 1263], "321cba": 1328, "3265500": 922, "32971": [455, 1059], "32974": [455, 1059], "32976": [455, 1059], "32bit": [276, 319], "33": [188, 236, 319, 633, 802, 828, 857, 916, 1197, 1305, 1329], "333": [16, 634, 802, 1064, 1171, 1203, 1305], "33333": 1331, "333333": [216, 319, 577, 845, 916, 1175, 1201, 1305, 1322], "34": [188, 319, 673, 687, 828, 916, 1246, 1259], "3420": [691, 1263], "343622": [644, 802], "345": [391, 392, 669, 670, 987, 988, 1241, 1242], "3450": [1203, 1305], "3456": 922, "34776706224699483": [1217, 1305], "35": [39, 319, 409, 444, 745, 802, 1009, 1305], "350": [319, 322, 482, 592, 802, 1194, 1305, 1310], "3500": [1203, 1305], "356": [421, 436, 454], "356194": [725, 726, 1330], "357": [421, 436, 454], "358": [421, 436, 454], "359": [421, 436, 454], "36": [188, 319, 828, 916, 1333], "360": [407, 603, 802, 1330], "361": 1336, "363961": [540, 1147], "366": [436, 1040], "37": [12, 922], "370h": [461, 802, 1068, 1305], "37338": 1336, "38": [39, 128, 161, 164, 319], "38180177416060584": [626, 802, 1198, 1305], "381802": [626, 802, 1198, 1305], "386294": [549, 802, 1156, 1305, 1327], "389056": [465, 802, 1071, 1305, 1327], "39": [630, 754, 802], "39m": 922, "3_color_scal": [39, 319], "3d12h4m25": [210, 225, 251, 289, 319, 439, 452, 461, 614, 746, 747, 789, 790, 802, 842, 847, 865, 916, 1043, 1056, 1068, 1305], "3f": [137, 687, 690, 1259, 1262], "3i": [210, 251, 319, 842, 916], "3rd": [1237, 1260], "3xy": [653, 1225], "4": [1, 8, 13, 17, 25, 34, 36, 38, 39, 40, 41, 44, 50, 51, 52, 53, 54, 58, 59, 76, 96, 121, 122, 123, 124, 125, 126, 127, 128, 131, 148, 156, 168, 177, 178, 179, 180, 181, 182, 183, 187, 189, 193, 197, 198, 199, 200, 201, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 231, 232, 233, 236, 238, 239, 240, 242, 243, 244, 245, 251, 253, 254, 261, 262, 265, 269, 270, 271, 272, 273, 274, 277, 280, 282, 283, 285, 286, 287, 288, 289, 291, 292, 293, 295, 296, 298, 299, 301, 302, 303, 305, 306, 307, 308, 309, 310, 311, 312, 313, 319, 322, 323, 327, 328, 329, 330, 332, 334, 346, 353, 354, 355, 357, 358, 359, 360, 361, 363, 365, 366, 367, 368, 370, 371, 376, 387, 388, 389, 391, 392, 393, 394, 395, 399, 400, 403, 404, 405, 407, 410, 417, 420, 421, 428, 436, 437, 438, 439, 440, 441, 444, 446, 449, 451, 452, 454, 458, 459, 461, 465, 466, 468, 469, 470, 472, 473, 474, 475, 477, 478, 479, 480, 481, 484, 486, 487, 488, 489, 490, 499, 500, 504, 505, 506, 513, 514, 515, 516, 517, 519, 520, 522, 530, 532, 533, 534, 535, 536, 537, 538, 542, 543, 548, 551, 552, 553, 573, 575, 577, 578, 580, 582, 584, 585, 588, 589, 590, 593, 594, 596, 597, 598, 599, 602, 604, 608, 609, 610, 611, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 636, 638, 641, 645, 646, 647, 648, 651, 653, 657, 660, 663, 665, 669, 670, 671, 672, 673, 674, 677, 678, 679, 680, 685, 686, 687, 688, 692, 697, 698, 700, 701, 702, 703, 705, 708, 709, 710, 711, 717, 718, 720, 722, 723, 725, 726, 727, 728, 730, 731, 732, 733, 734, 736, 738, 739, 740, 741, 742, 745, 746, 747, 749, 751, 752, 756, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 781, 782, 783, 784, 785, 786, 787, 789, 790, 791, 792, 798, 802, 817, 818, 820, 821, 822, 823, 824, 827, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 857, 858, 860, 861, 862, 865, 871, 872, 873, 874, 875, 876, 877, 878, 879, 881, 882, 883, 884, 885, 886, 889, 890, 892, 893, 895, 896, 897, 899, 900, 901, 902, 903, 904, 905, 906, 907, 916, 921, 922, 926, 931, 934, 941, 948, 950, 951, 952, 954, 955, 956, 957, 958, 960, 962, 963, 964, 965, 966, 967, 972, 983, 987, 988, 992, 993, 995, 1001, 1006, 1008, 1010, 1020, 1024, 1030, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1041, 1042, 1043, 1045, 1050, 1053, 1055, 1056, 1057, 1058, 1065, 1068, 1072, 1073, 1075, 1076, 1081, 1082, 1084, 1089, 1090, 1092, 1093, 1094, 1095, 1099, 1102, 1103, 1104, 1105, 1107, 1113, 1120, 1121, 1122, 1123, 1124, 1129, 1133, 1136, 1137, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1149, 1150, 1165, 1168, 1169, 1172, 1175, 1176, 1177, 1178, 1182, 1183, 1186, 1187, 1188, 1191, 1195, 1197, 1198, 1199, 1200, 1201, 1204, 1206, 1210, 1211, 1214, 1217, 1218, 1219, 1223, 1225, 1229, 1232, 1235, 1237, 1241, 1242, 1243, 1244, 1249, 1251, 1252, 1257, 1258, 1259, 1260, 1264, 1269, 1270, 1273, 1275, 1277, 1283, 1286, 1288, 1290, 1296, 1305, 1310, 1314, 1315, 1317, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1327, 1328, 1329, 1330, 1333, 1334, 1335, 1336], "40": [39, 188, 198, 225, 243, 319, 439, 444, 452, 483, 546, 691, 702, 802, 828, 847, 860, 916, 922, 1026, 1056, 1153, 1263, 1321, 1322, 1325, 1328], "400": [288, 319, 447, 448, 450, 883, 916, 1193, 1194, 1196, 1305, 1325], "4000000": [1066, 1305], "404": [226, 319, 659, 661, 848, 916, 1231, 1233], "4096": 1327, "41": [188, 319, 630, 802, 828, 916, 1322, 1336], "412277": 164, "414214": [648, 802, 1220, 1305, 1327], "4160": 54, "416147": 1330, "4164": [225, 319, 847, 916], "42": [54, 188, 211, 236, 251, 319, 444, 614, 802, 828, 857, 865, 916, 1088, 1305, 1321, 1335], "424778": [603, 802], "428571": [460, 802, 1067, 1305], "429101": 1322, "4294967296": [44, 319], "43": [188, 251, 319, 404, 614, 630, 802, 828, 865, 916], "4321": 922, "433013": [627, 802, 876, 916], "44": [10, 236, 319, 410, 802, 857, 916], "4411": [225, 319, 847, 916], "44225": [991, 1305], "444": 10, "44444444444": 10, "45": [39, 188, 251, 319, 417, 439, 452, 614, 630, 653, 660, 699, 726, 745, 762, 788, 789, 802, 828, 865, 916, 922, 1017, 1043, 1048, 1056, 1225, 1232, 1272, 1327, 1328, 1330, 1334, 1336], "450": [1194, 1305], "45000": 780, "4500000": 922, "456": [9, 10, 417, 922, 1017, 1282, 1305], "456000": [417, 1017], "456001\u00b5": 922, "4566": [225, 319, 847, 916], "456789": [444, 922, 1044], "456789\u00b5": 922, "456m": 922, "457658": 1330, "459148": [457, 802], "46": 922, "4696": [225, 319, 847, 916], "47": [50, 188, 319, 630, 802, 828, 916, 922, 1322], "470": [861, 916], "47033": [626, 802, 1198, 1305], "47033046033698594": [626, 802, 1198, 1305], "475": [861, 916], "48": [12, 164, 251, 319, 614, 702, 802, 865, 916, 922], "4827": [225, 319, 847, 916], "485": 1336, "49": [188, 319, 828, 916, 922], "492474": [461, 802, 1068, 1305], "498": [226, 319, 848, 916], "4_500_000": 922, "4ab4a": 1328, "4d": [461, 802, 1068, 1305], "4f6228": [39, 319], "4f71": [39, 319], "4x": [222, 319], "5": [1, 7, 8, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 34, 36, 38, 40, 41, 44, 50, 51, 53, 54, 58, 96, 121, 124, 125, 126, 127, 128, 130, 135, 156, 157, 159, 162, 164, 168, 178, 181, 182, 183, 188, 189, 192, 197, 198, 199, 200, 201, 203, 204, 205, 207, 208, 209, 210, 212, 213, 215, 216, 218, 220, 221, 222, 224, 225, 226, 227, 228, 229, 231, 232, 233, 238, 239, 240, 242, 244, 245, 246, 251, 254, 261, 262, 265, 266, 269, 270, 271, 272, 273, 274, 276, 277, 280, 281, 283, 286, 287, 288, 289, 292, 293, 295, 296, 298, 300, 301, 302, 303, 306, 307, 308, 309, 310, 311, 312, 313, 319, 322, 323, 328, 329, 332, 347, 348, 353, 354, 355, 357, 359, 363, 368, 370, 376, 387, 388, 389, 391, 392, 394, 395, 405, 406, 407, 409, 410, 413, 416, 417, 418, 419, 420, 424, 427, 428, 429, 430, 434, 438, 440, 441, 442, 444, 445, 451, 455, 459, 461, 463, 464, 467, 469, 473, 474, 478, 479, 481, 484, 486, 488, 490, 493, 496, 497, 498, 499, 500, 504, 506, 513, 516, 517, 519, 520, 522, 525, 527, 528, 532, 533, 534, 535, 536, 537, 541, 542, 546, 552, 573, 575, 577, 589, 593, 594, 595, 596, 597, 598, 599, 601, 602, 604, 608, 609, 610, 611, 613, 614, 615, 616, 618, 619, 620, 621, 622, 624, 627, 629, 630, 631, 632, 633, 636, 647, 653, 663, 664, 665, 668, 669, 670, 688, 692, 703, 705, 709, 710, 711, 723, 725, 726, 728, 729, 730, 731, 732, 734, 736, 738, 739, 740, 741, 742, 743, 745, 748, 749, 750, 751, 752, 756, 758, 760, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 776, 780, 781, 783, 785, 786, 787, 791, 798, 802, 820, 821, 822, 823, 824, 828, 831, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 845, 846, 847, 848, 849, 850, 851, 854, 855, 861, 865, 871, 872, 873, 874, 875, 876, 877, 878, 882, 883, 885, 886, 889, 890, 892, 894, 895, 896, 897, 900, 901, 902, 903, 904, 905, 906, 907, 916, 922, 931, 934, 938, 941, 944, 945, 948, 950, 951, 952, 954, 956, 960, 965, 966, 967, 972, 983, 987, 993, 995, 1002, 1006, 1007, 1008, 1009, 1010, 1013, 1016, 1017, 1018, 1019, 1020, 1021, 1031, 1042, 1044, 1045, 1046, 1048, 1049, 1055, 1057, 1058, 1059, 1065, 1068, 1070, 1072, 1073, 1074, 1084, 1089, 1090, 1092, 1094, 1098, 1101, 1113, 1120, 1123, 1124, 1129, 1132, 1135, 1139, 1140, 1141, 1142, 1143, 1144, 1148, 1149, 1153, 1157, 1165, 1172, 1175, 1176, 1177, 1180, 1181, 1182, 1183, 1187, 1188, 1191, 1192, 1193, 1194, 1196, 1197, 1200, 1204, 1206, 1211, 1217, 1220, 1225, 1235, 1236, 1237, 1240, 1241, 1260, 1264, 1277, 1284, 1286, 1289, 1290, 1293, 1296, 1305, 1310, 1315, 1318, 1320, 1322, 1323, 1324, 1327, 1328, 1329, 1330, 1333, 1335, 1336], "50": [12, 27, 39, 188, 198, 208, 319, 395, 439, 444, 452, 743, 744, 802, 828, 916, 922, 995, 1008, 1056, 1245, 1305, 1321, 1322], "500": [39, 288, 319, 322, 419, 420, 424, 427, 429, 430, 434, 440, 442, 883, 916, 1030, 1032, 1038, 1193, 1194, 1196, 1305, 1310], "5000": [281, 319, 1289, 1305], "50000": 135, "500000": [427, 1030], "500000000": [434, 1038], "5000555": 922, "500_000": [419, 420, 424, 427, 429, 430, 434, 440, 442], "500m": [1030, 1032, 1038], "51": 922, "512": [44, 136, 222, 319, 376, 599, 802, 972, 1175, 1305], "51966": [692, 1264], "52": [293, 319, 453, 633, 802, 886, 916], "523599": 1330, "527525": [1199, 1305], "53": [453, 1057, 1333], "533316061": 1314, "533_316_061": 1314, "54": [465, 802, 1109, 1305, 1327, 1336], "540": [407, 603, 802], "540302": 1330, "543": 9, "543081": [397, 802, 998, 1305], "5432": 136, "54321": 9, "544": 1336, "544705": 734, "549306": [938, 1305], "55": [39, 52, 319, 1324, 1328, 1329], "5555": 922, "55550": 922, "56": [128, 673, 706, 802, 1246], "566371": [603, 802], "567": 27, "56789": [992, 1080, 1202, 1305], "57": [630, 802, 1202, 1305, 1330, 1336], "570796": [336, 338, 802, 933, 935, 1305, 1330], "575050513": [161, 164], "58": [244, 319], "581139": [1008, 1305], "584963": [547, 802], "587401": [393, 802, 1327], "59": [128, 188, 319, 417, 430, 440, 444, 474, 745, 788, 789, 790, 802, 828, 916, 922, 1017, 1034, 1044], "59815": [465, 802, 1327], "5_000_555": 922, "5th": [39, 319], "6": [1, 8, 13, 34, 36, 38, 39, 40, 41, 42, 43, 44, 49, 51, 53, 58, 88, 89, 96, 121, 124, 125, 126, 127, 139, 143, 144, 156, 178, 181, 184, 185, 189, 190, 191, 193, 194, 195, 197, 198, 201, 204, 205, 206, 207, 208, 210, 212, 214, 215, 216, 218, 220, 221, 222, 224, 225, 228, 229, 230, 231, 232, 233, 234, 237, 238, 241, 244, 245, 246, 248, 249, 251, 252, 253, 254, 255, 256, 257, 259, 262, 264, 265, 267, 268, 269, 270, 271, 273, 274, 275, 277, 278, 279, 283, 285, 286, 287, 289, 290, 291, 292, 293, 295, 296, 302, 312, 313, 319, 322, 323, 328, 332, 353, 354, 355, 357, 363, 371, 388, 389, 391, 392, 403, 404, 410, 413, 417, 421, 431, 435, 436, 437, 447, 448, 450, 453, 454, 457, 459, 468, 469, 474, 475, 478, 484, 486, 488, 506, 507, 508, 517, 520, 533, 534, 535, 536, 540, 552, 553, 589, 593, 600, 603, 604, 605, 610, 612, 614, 616, 618, 620, 622, 624, 627, 629, 630, 631, 636, 641, 647, 653, 658, 669, 670, 692, 703, 705, 710, 718, 720, 722, 729, 731, 738, 739, 740, 742, 745, 749, 752, 758, 763, 764, 768, 781, 785, 798, 802, 820, 823, 824, 825, 826, 829, 830, 832, 833, 834, 835, 838, 839, 840, 842, 843, 845, 846, 847, 849, 851, 852, 859, 861, 863, 865, 866, 867, 869, 871, 872, 873, 874, 875, 878, 881, 882, 885, 886, 889, 890, 896, 906, 907, 916, 922, 948, 950, 951, 952, 954, 960, 987, 993, 997, 999, 1004, 1005, 1010, 1013, 1039, 1048, 1058, 1065, 1072, 1084, 1090, 1114, 1115, 1124, 1127, 1140, 1141, 1142, 1143, 1147, 1165, 1179, 1182, 1183, 1188, 1190, 1195, 1197, 1199, 1201, 1206, 1211, 1214, 1225, 1230, 1241, 1264, 1276, 1286, 1305, 1310, 1315, 1318, 1320, 1322, 1323, 1327, 1333, 1334, 1336], "60": [39, 131, 198, 244, 319, 424, 429, 430, 440, 451, 474, 630, 687, 802, 1040, 1044, 1055, 1184, 1259, 1305, 1330], "600": [288, 319, 447, 448, 450, 883, 916, 922], "60000": 427, "600000": 922, "60000000": 434, "60206": [548, 802, 1327], "605551": 783, "605551275463989": 783, "609438": 1327, "60_000": [419, 420, 424, 427, 429, 430, 434, 440, 442], "61": [244, 319], "625": [624, 802], "626172": [655, 1227], "63": [630, 802], "63204": 1336, "6331e16": [1278, 1305, 1330], "636253": 1330, "64": [1, 52, 54, 65, 67, 70, 74, 81, 84, 155, 177, 281, 319, 398, 575, 599, 802, 1175, 1178, 1305, 1327], "64030": [692, 1264], "642093": 1330, "647961": 164, "64bit": [156, 606, 802, 1184, 1305], "65": [192, 319, 831, 916, 1062, 1305], "650": [482, 592, 802], "65280": [692, 1264], "654": [27, 781, 875, 916], "65432": 1331, "654321": 561, "65536": 1327, "66": [225, 288, 319, 630, 718, 802, 847, 883, 916, 1109, 1197, 1305], "663053": 128, "666": 922, "666000": 922, "666667": [188, 216, 290, 307, 319, 460, 767, 802, 828, 845, 884, 901, 916, 1067, 1305], "666f6f": [655, 1227], "67500": 780, "676": [226, 319, 848, 916], "678": [653, 660, 1225, 1232], "6789": [28, 922], "67890": 28, "686241": 1322, "69": [630, 802, 1109, 1305], "693147": [549, 802, 1154, 1156, 1305, 1327], "6_000_000": 1314, "7": [1, 16, 27, 34, 36, 38, 39, 40, 41, 42, 43, 44, 51, 53, 58, 143, 144, 156, 171, 178, 181, 184, 185, 186, 188, 190, 191, 194, 195, 197, 201, 204, 206, 210, 212, 214, 216, 224, 228, 230, 232, 234, 236, 237, 241, 244, 246, 248, 249, 251, 252, 254, 255, 256, 257, 259, 262, 264, 267, 268, 269, 270, 275, 277, 278, 279, 287, 289, 290, 291, 319, 322, 323, 328, 332, 354, 355, 357, 366, 404, 416, 417, 421, 428, 436, 438, 439, 444, 452, 454, 465, 478, 484, 488, 489, 506, 520, 533, 534, 535, 536, 593, 594, 604, 610, 614, 629, 630, 647, 663, 691, 705, 729, 738, 739, 742, 745, 746, 752, 757, 763, 764, 781, 785, 802, 820, 825, 826, 828, 830, 833, 835, 838, 840, 842, 843, 845, 846, 851, 857, 859, 862, 863, 865, 866, 867, 871, 875, 878, 916, 922, 938, 951, 952, 954, 963, 1016, 1017, 1021, 1026, 1031, 1042, 1043, 1048, 1056, 1058, 1071, 1093, 1108, 1127, 1140, 1141, 1142, 1143, 1187, 1188, 1200, 1206, 1235, 1263, 1305, 1310, 1315, 1320, 1322, 1323, 1324, 1327, 1329, 1333, 1336], "70": [188, 319, 718, 746, 802, 828, 916, 1109, 1305, 1322], "700": [288, 319, 883, 916], "702963": [39, 319], "7051579356916758811": 150, "707107": [365, 462, 627, 628, 725, 802, 962, 1069, 1305, 1330], "712389": 1330, "714": 1336, "714286": [489, 802, 1093, 1305], "718281828459045": [10, 457, 547, 802, 1062, 1154, 1305], "718282": [465, 802, 1071, 1305, 1327], "720": [407, 603, 802], "7264": 1336, "732051": [1220, 1305], "7415e16": 164, "742": [226, 319, 848, 916], "75": [39, 188, 192, 319, 332, 593, 601, 616, 618, 620, 622, 627, 629, 631, 764, 802, 828, 831, 916, 922, 1008, 1090, 1109, 1180, 1245, 1305, 1322, 1330, 1336], "7500": [223, 319], "7508": 1336, "754": [711, 802], "754888": [457, 802], "761594": [707, 802, 1279, 1305], "7654": 922, "765431": 1044, "7654321": 27, "76933c": [39, 319], "77": 1048, "78": [9, 673, 1246], "780": 9, "784": [225, 319, 847, 916], "785398": [340, 725, 726, 802, 937, 1305, 1330], "789": [10, 922], "79": [1109, 1305], "7d": 922, "8": [1, 11, 34, 36, 38, 40, 41, 42, 43, 44, 45, 50, 51, 53, 54, 58, 75, 79, 85, 143, 144, 156, 178, 181, 184, 185, 186, 188, 190, 191, 193, 194, 195, 197, 201, 204, 206, 208, 212, 214, 221, 224, 225, 226, 228, 229, 230, 232, 234, 237, 246, 248, 249, 251, 252, 254, 255, 256, 257, 259, 262, 264, 266, 267, 268, 270, 275, 277, 278, 279, 287, 290, 291, 293, 319, 332, 334, 346, 354, 355, 357, 401, 404, 405, 417, 444, 478, 485, 488, 489, 514, 516, 520, 533, 534, 535, 536, 575, 593, 594, 599, 610, 611, 615, 639, 645, 647, 671, 672, 687, 718, 723, 729, 734, 736, 739, 741, 749, 751, 756, 757, 760, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 781, 783, 786, 787, 791, 802, 820, 825, 826, 828, 830, 832, 833, 835, 838, 840, 843, 846, 847, 848, 851, 852, 861, 863, 866, 867, 871, 875, 878, 886, 916, 922, 951, 952, 954, 999, 1006, 1026, 1090, 1093, 1108, 1121, 1123, 1127, 1140, 1141, 1142, 1143, 1175, 1178, 1188, 1191, 1192, 1195, 1197, 1199, 1201, 1243, 1244, 1259, 1305, 1314, 1315, 1320, 1322, 1323, 1324, 1327, 1328, 1329, 1333, 1336], "80": [39, 192, 319, 831, 916], "800": [447, 448, 450, 1048], "8000": 136, "803065983": 128, "81": 1327, "814697265625": [1066, 1305], "816497": [267, 319], "8192": 134, "82": [225, 319, 847, 916], "8257e14": 1336, "83": [225, 319, 847, 916], "833": [225, 319, 847, 916], "833333": [307, 901], "848062": 1330, "848808": 164, "85": [39, 319, 1109, 1305, 1336], "850": [482, 592, 802], "8568409950394724": [1062, 1305], "8589934592": [639, 802], "86": 1336, "8601": 1328, "87": 1336, "876": 9, "88": [188, 319, 828, 916], "881374": [339, 802, 936, 1305], "888": [781, 875, 916], "8_000_000": 1314, "8a": [969, 970], "8nin": 1336, "9": [1, 9, 34, 36, 38, 39, 40, 41, 44, 50, 58, 178, 186, 188, 201, 203, 212, 216, 226, 228, 229, 244, 251, 253, 254, 257, 269, 270, 287, 291, 293, 312, 319, 328, 332, 334, 346, 354, 355, 357, 362, 364, 401, 404, 407, 417, 444, 470, 478, 488, 494, 514, 520, 531, 539, 577, 593, 594, 603, 610, 614, 615, 626, 629, 630, 641, 645, 660, 691, 699, 702, 732, 738, 739, 742, 745, 757, 790, 802, 828, 838, 843, 845, 848, 851, 865, 867, 878, 886, 906, 916, 922, 946, 947, 951, 952, 954, 959, 961, 1008, 1021, 1030, 1032, 1038, 1043, 1056, 1057, 1099, 1108, 1121, 1127, 1138, 1146, 1188, 1192, 1198, 1200, 1202, 1214, 1232, 1263, 1272, 1305, 1314, 1315, 1320, 1323, 1324, 1333], "90": [188, 226, 319, 691, 828, 848, 916, 1263, 1322, 1330], "90000": 780, "901234": [992, 1080, 1202, 1305], "909": [225, 319, 847, 916], "910": [225, 319, 660, 847, 916, 1232], "910t": [653, 660, 1225, 1232], "914": [225, 319, 847, 916], "9223372036854775807": [714, 802], "9223372036854775808": [550, 802], "927295": 1330, "928571": [463, 802, 1070, 1305], "93": [1109, 1305], "94": [329, 802], "9477376373212048": [1109, 1305], "95": [17, 329, 802, 922], "95b3d7": [39, 319], "96": [17, 188, 319, 329, 802, 828, 916, 1109, 1305], "961": 54, "963624": [462, 802, 1069, 1305], "964028": [244, 319], "96_067_179": 1314, "97": [17, 215, 319, 329, 802, 1109, 1305], "9774092659964970114": [483, 802], "978307200": [423, 1023], "978307200000": 443, "978307200000000": [423, 443, 1023, 1047], "978307200000000000": 1047, "978393600": [423, 1023], "978393600000": 443, "978393600000000": [423, 443, 1023, 1047], "978393600000000000": 1047, "978480000": [423, 1023], "978480000000": 443, "978480000000000": [423, 443, 1023, 1047], "978480000000000000": 1047, "98": [17, 215, 244, 319, 387, 477, 480, 646, 691, 709, 802, 1263], "987": [27, 561], "987000": 922, "9876": 9, "987654": [27, 922], "987654321": 10, "9876543210": 128, "987m": 922, "988": 10, "99": [17, 39, 199, 200, 215, 218, 244, 288, 319, 329, 387, 467, 469, 477, 480, 646, 709, 792, 802, 836, 837, 883, 916, 1048, 1062, 1074, 1305, 1327], "9914e218": 164, "993": [1090, 1305], "998347": [244, 319], "999": [416, 428, 922, 1016, 1031, 1325, 1336], "999000": 922, "999954": [244, 319], "999999": [697, 745, 788, 789, 790, 922, 1048, 1269], "999999\u00b5": 922, "9bbb59": [39, 319], "A": [13, 36, 39, 44, 45, 56, 57, 62, 68, 128, 134, 135, 136, 137, 148, 150, 155, 170, 185, 194, 203, 210, 225, 231, 233, 238, 244, 269, 272, 287, 288, 289, 293, 294, 319, 327, 392, 411, 412, 417, 441, 444, 458, 459, 467, 479, 481, 492, 495, 497, 498, 504, 544, 551, 552, 565, 579, 588, 589, 611, 616, 618, 620, 622, 624, 627, 629, 631, 651, 652, 653, 659, 660, 661, 662, 663, 664, 665, 668, 670, 673, 674, 675, 677, 688, 697, 732, 748, 749, 753, 802, 826, 833, 842, 847, 863, 883, 886, 887, 916, 922, 988, 1011, 1012, 1017, 1045, 1048, 1064, 1074, 1171, 1193, 1194, 1196, 1199, 1200, 1201, 1223, 1224, 1225, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1240, 1242, 1245, 1246, 1247, 1249, 1260, 1269, 1305, 1314, 1315, 1318, 1331, 1333], "AND": [719, 720, 781, 922, 1324], "ANDs": [378, 802, 974, 1305], "AS": [266, 319, 781, 782, 875, 916, 1314, 1321, 1322, 1323, 1324, 1325, 1327, 1328, 1329, 1330, 1331, 1333, 1335], "And": [695, 1267], "As": [12, 49, 88, 89, 121, 123, 124, 125, 127, 139, 143, 144, 152, 201, 276, 281, 319, 544, 792, 838, 916], "At": [44, 244, 319], "BY": [781, 875, 916, 1314, 1317, 1323, 1332, 1333], "Be": 916, "By": [5, 12, 14, 30, 50, 134, 135, 148, 210, 224, 225, 251, 253, 262, 267, 289, 290, 319, 363, 435, 439, 452, 537, 540, 546, 594, 609, 614, 617, 619, 621, 623, 625, 628, 630, 632, 638, 649, 716, 736, 743, 744, 746, 747, 748, 762, 783, 789, 790, 791, 802, 823, 842, 846, 847, 865, 871, 876, 884, 916, 960, 1039, 1043, 1056, 1144, 1187, 1210, 1221, 1295, 1305], "For": [14, 38, 39, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 192, 193, 198, 224, 225, 244, 251, 276, 305, 319, 322, 432, 433, 444, 460, 462, 463, 474, 544, 553, 565, 606, 644, 651, 659, 660, 661, 663, 665, 688, 738, 748, 752, 753, 798, 802, 831, 832, 847, 865, 899, 916, 920, 1048, 1067, 1069, 1070, 1073, 1159, 1184, 1217, 1223, 1231, 1232, 1233, 1235, 1237, 1260, 1284, 1305, 1310], "IF": 1326, "If": [36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 55, 56, 57, 58, 66, 121, 122, 123, 124, 125, 126, 127, 131, 134, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 148, 149, 151, 152, 153, 154, 157, 158, 159, 160, 165, 166, 167, 177, 181, 193, 198, 201, 208, 210, 212, 220, 221, 222, 225, 228, 229, 233, 240, 244, 251, 253, 254, 255, 259, 262, 264, 266, 269, 270, 273, 274, 276, 277, 283, 284, 286, 287, 288, 319, 322, 331, 333, 356, 363, 368, 389, 413, 417, 418, 432, 433, 441, 444, 470, 485, 490, 502, 523, 532, 537, 538, 544, 552, 553, 560, 561, 567, 569, 594, 599, 601, 604, 606, 608, 609, 610, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 635, 636, 638, 640, 644, 645, 650, 660, 661, 663, 665, 666, 667, 677, 678, 679, 680, 682, 683, 684, 687, 688, 689, 690, 694, 697, 715, 719, 721, 724, 728, 729, 733, 734, 738, 743, 744, 746, 747, 748, 751, 752, 758, 759, 760, 762, 764, 768, 774, 777, 778, 779, 784, 786, 789, 790, 792, 793, 802, 823, 824, 832, 834, 838, 842, 846, 847, 852, 856, 863, 865, 869, 871, 873, 875, 880, 882, 883, 891, 899, 909, 916, 920, 922, 929, 930, 953, 960, 965, 984, 995, 1013, 1017, 1018, 1036, 1037, 1045, 1048, 1073, 1089, 1090, 1094, 1108, 1109, 1113, 1130, 1139, 1144, 1145, 1151, 1159, 1178, 1180, 1182, 1184, 1186, 1187, 1188, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1204, 1206, 1208, 1210, 1213, 1217, 1218, 1222, 1232, 1233, 1235, 1237, 1238, 1239, 1245, 1249, 1250, 1251, 1252, 1254, 1255, 1256, 1259, 1260, 1261, 1262, 1266, 1269, 1277, 1280, 1284, 1286, 1294, 1305, 1310, 1314, 1315, 1317, 1325, 1333], "In": [50, 57, 136, 138, 149, 150, 153, 164, 168, 173, 178, 196, 198, 201, 210, 225, 226, 229, 240, 244, 251, 277, 286, 319, 322, 552, 553, 614, 673, 674, 802, 824, 838, 842, 847, 848, 865, 882, 916, 1066, 1073, 1178, 1183, 1246, 1305, 1310], "It": [31, 32, 33, 36, 40, 44, 45, 46, 47, 48, 49, 56, 57, 66, 68, 71, 89, 131, 144, 146, 148, 151, 152, 153, 154, 161, 162, 164, 165, 166, 167, 168, 169, 175, 188, 226, 236, 243, 266, 276, 281, 287, 288, 296, 305, 319, 322, 323, 405, 406, 439, 485, 544, 553, 564, 601, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 731, 778, 779, 798, 802, 819, 823, 824, 828, 834, 848, 852, 857, 875, 883, 890, 899, 916, 924, 990, 1006, 1007, 1043, 1090, 1180, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1205, 1207, 1284, 1289, 1305, 1310], "Its": [211, 319, 483, 802, 1088, 1305], "NO": 922, "NOT": [124, 221, 260, 319, 544, 563, 637, 802, 870, 916, 1333], "No": [20, 224, 319, 846, 916], "Not": [199, 224, 319, 468, 497, 498, 802, 823, 836, 846, 916, 1075, 1305], "ON": 1333, "OR": [721, 722, 838, 916, 922, 1324], "ORs": [383, 802, 979, 1305], "On": [711, 802, 850, 916], "One": [50, 188, 240, 276, 281, 319, 332, 593, 723, 735, 751, 757, 760, 767, 769, 772, 773, 782, 802, 828, 916, 922, 1008, 1305], "Or": [209, 210, 225, 251, 265, 289, 298, 319, 322, 461, 614, 647, 743, 744, 746, 747, 789, 790, 792, 798, 802, 841, 842, 847, 865, 874, 892, 916, 1068, 1305], "That": [140, 852, 916], "The": [20, 36, 37, 38, 39, 40, 44, 45, 46, 47, 48, 49, 50, 55, 56, 59, 64, 65, 67, 68, 76, 80, 81, 89, 90, 92, 121, 123, 124, 125, 127, 134, 135, 136, 137, 139, 143, 144, 145, 146, 148, 150, 151, 152, 153, 154, 157, 158, 159, 160, 164, 165, 166, 168, 170, 180, 188, 189, 191, 192, 193, 194, 197, 198, 201, 208, 209, 210, 211, 216, 222, 224, 225, 226, 229, 236, 242, 244, 251, 252, 253, 254, 257, 258, 259, 266, 276, 277, 282, 285, 289, 293, 294, 296, 297, 298, 305, 319, 330, 371, 372, 373, 374, 387, 388, 406, 408, 411, 412, 413, 421, 431, 435, 436, 439, 441, 444, 452, 453, 464, 467, 470, 474, 475, 483, 515, 519, 552, 553, 567, 594, 601, 604, 607, 608, 609, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 641, 644, 650, 654, 655, 659, 664, 665, 666, 667, 671, 672, 673, 674, 682, 683, 684, 685, 686, 687, 688, 698, 702, 708, 709, 710, 729, 732, 750, 754, 762, 764, 778, 779, 780, 781, 784, 792, 794, 795, 797, 798, 802, 803, 804, 807, 809, 810, 811, 818, 823, 828, 829, 831, 832, 834, 835, 838, 841, 842, 845, 846, 847, 848, 852, 857, 861, 865, 867, 868, 869, 875, 879, 881, 886, 887, 890, 892, 899, 916, 920, 921, 922, 928, 931, 968, 969, 970, 983, 994, 1007, 1008, 1011, 1012, 1013, 1021, 1035, 1039, 1040, 1043, 1045, 1048, 1056, 1057, 1073, 1074, 1077, 1088, 1122, 1126, 1159, 1178, 1180, 1182, 1186, 1187, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1214, 1217, 1222, 1226, 1227, 1236, 1237, 1238, 1239, 1243, 1244, 1245, 1246, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1286, 1288, 1290, 1297, 1299, 1301, 1305, 1306, 1311, 1312, 1313, 1314, 1319, 1333, 1334, 1336], "Then": 153, "There": 1333, "These": [1, 32, 39, 130, 136, 137, 173, 283, 319, 452, 801, 802, 920, 1043, 1056], "To": [38, 57, 199, 319, 395, 411, 412, 468, 469, 651, 658, 659, 660, 663, 673, 674, 683, 684, 685, 686, 695, 802, 836, 916, 995, 1011, 1012, 1075, 1223, 1230, 1231, 1232, 1235, 1245, 1246, 1267, 1286, 1305, 1333], "Will": [56, 57, 823, 824, 834, 861, 872, 916, 1305], "With": [143, 220, 262, 319, 363, 537, 638, 802, 823, 871, 916, 960, 1108, 1144, 1210, 1305], "_": [1, 50, 54, 173, 244, 274, 278, 319, 356, 391, 392, 523, 652, 660, 662, 664, 669, 670, 675, 678, 679, 987, 988, 989, 1224, 1232, 1236, 1241, 1242, 1247, 1251, 1281, 1305], "__array_ufunc__": 924, "__call__": 798, "__dataframe__": 122, "__enter__": 1333, "__exit__": 1333, "__getattr__": 798, "__getitem__": 698, "__init__": [1, 31, 32, 33, 49, 51, 52, 53, 54, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 161, 891, 1333], "__name__": [223, 319], "_bar_": 753, "_btm_by_a": [388, 802], "_btm_by_b": [388, 802], "_by_ca": [388, 710, 802], "_by_cb": [388, 710, 802], "_df": [1, 51], "_diff": [293, 319, 886, 916], "_eager": [544, 823, 916], "_expr": [1, 52], "_foo": 558, "_geventdataframeresult": [57, 824, 916], "_is_not_nan": [498, 802], "_is_odd": [257, 319, 867, 916], "_isnan": [497, 802], "_isnul": [500, 802], "_kwarg": [823, 916], "_ldf": 1, "_lf": 53, "_lower_boundari": [210, 319, 842, 916], "_mean_squar": [298, 892], "_not_nul": [499, 802], "_o": [391, 392, 669, 670, 987, 988, 1241, 1242], "_revers": [578, 582, 611, 802], "_right": [224, 225, 226, 319, 846, 847, 848, 916], "_suffix": 583, "_sum": [298, 892], "_top_by_a": [710, 802], "_top_by_b": [710, 802], "_train": [888, 916], "_upper_boundari": [210, 319, 842, 916], "_world": 753, "a1": [39, 51, 53, 319], "a101": 1336, "a123": [39, 319], "a2": [39, 51, 53, 319], "a_1": [679, 1251, 1281, 1305], "a_2": [1281, 1305], "a_3": [1281, 1305], "a_a": 782, "a_agg_list": [210, 319, 842, 916], "a_b_doubl": 749, "a_btm_by_a": [388, 802], "a_btm_by_b": [388, 802], "a_by_ca": [388, 710, 802], "a_by_cb": [388, 710, 802], "a_div_2": 1327, "a_div_5": 1327, "a_interpol": [489, 802], "a_is_even": [266, 319, 781, 875, 916], "a_isnul": [500, 802], "a_lag_": 732, "a_log2": 1327, "a_mod_2": 1327, "a_not_nul": [499, 802], "a_revers": [578, 582, 611, 802], "a_rol": 732, "a_suffix": 583, "a_times_2": [553, 802], "a_times_b": [552, 802], "a_top_by_a": [710, 802], "a_top_by_b": [710, 802], "a_txt": 782, "aa": [464, 651, 663, 750, 802, 922, 1008, 1223, 1235, 1305, 1328], "aaa": [1, 39, 319, 651, 663, 698, 700, 701, 922, 1223, 1235], "aaaa": [969, 970], "aabcdef": 684, "aad": [969, 970], "aag": 26, "aazz": 1328, "ab": [212, 228, 270, 293, 319, 674, 698, 700, 701, 802, 886, 916, 922, 1089, 1113, 1277, 1305, 1326, 1328], "ab12": 674, "ab12cd34ef": 674, "abc": [7, 16, 18, 19, 20, 21, 22, 23, 24, 25, 328, 657, 660, 673, 683, 802, 922, 1229, 1232, 1245, 1246], "abc123": 1328, "abc456": [673, 1245, 1246, 1328], "abcabc": 674, "abcd": 1328, "abcdeff": 683, "abf": [138, 149, 150], "abl": [96, 136, 544], "about": [96, 136, 644, 651, 659, 660, 663, 673, 674, 802, 920, 1217, 1223, 1231, 1232, 1235, 1245, 1246, 1305, 1336], "abov": [39, 225, 244, 319, 322, 792, 847, 916], "abs_a": 1327, "absolut": [138, 149, 150, 157, 158, 159, 160, 327, 460, 462, 463, 802, 927, 1067, 1069, 1070, 1305, 1327], "acc": [738, 739, 752, 776], "accent": 922, "accept": [36, 40, 44, 45, 46, 47, 48, 132, 134, 135, 138, 140, 142, 144, 146, 148, 151, 152, 153, 164, 180, 190, 209, 257, 258, 262, 265, 282, 293, 294, 298, 319, 328, 388, 395, 464, 490, 594, 608, 609, 647, 675, 702, 710, 718, 720, 722, 727, 730, 731, 732, 733, 741, 750, 766, 768, 771, 780, 784, 786, 792, 798, 802, 818, 830, 841, 867, 868, 871, 874, 879, 886, 887, 892, 916, 920, 921, 995, 1094, 1178, 1186, 1187, 1210, 1247, 1305], "access": [36, 40, 44, 45, 46, 47, 48, 51, 52, 53, 54, 140, 144, 146, 148, 150, 151, 152, 153, 177, 184, 222, 252, 253, 266, 319, 661, 698, 825, 875, 888, 916, 921, 1233, 1336], "accord": [252, 319, 601, 743, 744, 746, 747, 789, 790, 802, 1026, 1180, 1305], "accordingli": [132, 134, 135, 139, 140, 141, 142, 143, 144, 145, 146, 147], "account": [39, 128, 137, 150, 319, 435, 460, 462, 463, 802, 1039, 1067, 1069, 1070, 1305], "accumul": [738, 739, 752, 776], "acg": 26, "achiev": [229, 244, 305, 319, 392, 553, 670, 802, 988, 1159, 1242, 1305], "aco": 1326, "acosd": 1326, "across": [39, 50, 137, 189, 211, 224, 231, 233, 238, 259, 269, 319, 408, 483, 567, 720, 722, 738, 739, 741, 766, 768, 771, 786, 802, 829, 846, 869, 916, 1088, 1305], "action": [38, 319], "activ": [7, 8, 18, 19, 21, 22, 23, 24, 28, 29, 516, 660, 1123, 1232], "actual": [39, 124, 164, 168, 254, 319, 1212, 1305, 1328, 1335], "ad": [37, 39, 124, 139, 210, 266, 276, 281, 283, 288, 293, 294, 319, 334, 444, 467, 560, 561, 702, 738, 739, 781, 802, 842, 875, 883, 886, 887, 916, 922, 1048, 1074, 1284, 1289, 1305], "adbc": [37, 136, 137, 319], "adbc_driver_manag": 156, "adbc_ingest": [37, 319], "add": [38, 39, 135, 198, 210, 229, 293, 294, 295, 296, 319, 322, 406, 580, 581, 582, 583, 601, 702, 748, 752, 792, 802, 842, 846, 886, 887, 888, 889, 890, 916, 1073, 1305, 1310], "add_calendar_dai": 748, "add_calendar_month": 748, "add_calendar_year": 748, "add_chart": [39, 319], "add_dai": 748, "add_format": [39, 319], "add_hour": 748, "add_milli": 748, "add_second": 748, "add_seri": [39, 319], "add_week": 748, "add_worksheet": [39, 319], "addit": [29, 35, 37, 38, 39, 124, 133, 138, 139, 149, 150, 162, 164, 166, 168, 193, 197, 209, 227, 242, 257, 258, 265, 278, 285, 293, 294, 298, 319, 328, 422, 464, 467, 594, 647, 651, 659, 660, 663, 673, 674, 698, 702, 727, 730, 731, 732, 733, 750, 780, 781, 784, 798, 802, 835, 841, 867, 868, 874, 881, 886, 887, 892, 916, 922, 1014, 1022, 1074, 1223, 1231, 1232, 1235, 1245, 1246, 1287, 1305, 1315, 1333], "addition": [58, 252, 319, 922], "address": 660, "adjac": [39, 319], "adjust": [460, 462, 463, 644, 802, 1067, 1069, 1070, 1217, 1305], "adl": [138, 149, 150], "adlf": 150, "advanc": [39, 244, 319, 368, 544, 577, 580, 582, 584, 585, 965, 1151, 1336], "advantag": [39, 173, 243, 319], "advis": [39, 49, 89, 319], "aedt": 745, "aeiuo": [663, 1235], "af1": 50, "af2": 50, "af3": 50, "affect": [37, 157, 158, 159, 160, 319], "afm": 150, "afoo": [888, 916], "after": [39, 58, 124, 132, 134, 135, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 151, 152, 153, 180, 181, 198, 282, 285, 319, 387, 388, 389, 464, 594, 604, 697, 709, 710, 802, 818, 879, 881, 916, 983, 1073, 1182, 1269, 1290, 1305, 1320], "afterward": [49, 792], "ag": [236, 319, 857, 916, 1334], "again": [553, 802], "against": [37, 98, 134, 136, 201, 266, 319, 516, 663, 781, 838, 875, 916, 1123, 1235, 1314, 1333, 1335, 1336], "agg": [209, 210, 244, 251, 319, 329, 388, 470, 472, 477, 480, 552, 553, 594, 646, 647, 710, 717, 743, 746, 764, 802, 823, 824, 834, 841, 842, 861, 865, 872, 916, 922], "agg_group": [755, 802], "agg_list": [552, 802], "aggreg": [134, 135, 138, 146, 149, 203, 209, 210, 230, 232, 234, 237, 240, 244, 245, 246, 251, 267, 268, 287, 290, 298, 299, 301, 303, 319, 329, 378, 383, 386, 470, 486, 552, 553, 594, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 719, 720, 721, 722, 738, 739, 740, 741, 752, 757, 765, 766, 768, 770, 771, 776, 785, 786, 802, 842, 852, 853, 854, 855, 858, 859, 862, 865, 876, 877, 884, 892, 893, 895, 897, 916, 920, 974, 979, 982, 1091, 1192, 1193, 1194, 1196, 1199, 1200, 1201, 1305, 1321, 1323, 1326, 1332], "aggregate_funct": [244, 319, 922], "aho": [652, 662, 664, 675, 1224, 1234, 1236, 1247], "aiosqlit": 136, "alchemy_conn": 136, "algorithm": [179, 319, 335, 652, 662, 664, 675, 723, 802, 817, 916, 932, 1224, 1234, 1236, 1247, 1305], "alia": [1, 12, 50, 52, 54, 87, 184, 210, 228, 244, 251, 285, 293, 296, 319, 322, 328, 332, 372, 373, 374, 375, 377, 387, 391, 392, 400, 401, 402, 403, 404, 406, 409, 414, 415, 417, 418, 419, 420, 421, 422, 423, 424, 426, 427, 429, 430, 431, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 449, 451, 452, 453, 454, 455, 458, 459, 472, 474, 479, 481, 487, 490, 493, 496, 504, 506, 528, 540, 546, 551, 553, 557, 560, 561, 563, 565, 570, 573, 575, 577, 588, 589, 593, 595, 599, 601, 604, 606, 634, 636, 651, 652, 653, 654, 656, 657, 659, 660, 662, 663, 664, 665, 669, 670, 675, 676, 677, 678, 679, 680, 681, 685, 686, 688, 698, 699, 700, 701, 703, 708, 709, 711, 717, 718, 724, 725, 726, 730, 731, 732, 733, 743, 746, 748, 749, 752, 753, 758, 761, 763, 764, 776, 780, 784, 789, 792, 802, 842, 844, 851, 865, 881, 886, 890, 916, 1007, 1014, 1015, 1018, 1021, 1022, 1023, 1024, 1029, 1030, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1047, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1113, 1180, 1185, 1231, 1232, 1236, 1246, 1251, 1252, 1305], "alias": [266, 319, 560, 561, 875, 916], "alic": [134, 1334], "align": [10, 15, 16, 39, 50, 58, 319, 1334], "align_fram": 58, "all": [1, 4, 5, 8, 13, 17, 20, 25, 30, 36, 38, 39, 44, 45, 48, 50, 56, 63, 90, 107, 109, 121, 126, 131, 134, 135, 138, 139, 140, 142, 144, 145, 146, 148, 149, 151, 152, 161, 162, 165, 168, 173, 178, 179, 181, 188, 190, 192, 193, 200, 212, 217, 219, 221, 222, 223, 224, 226, 227, 228, 233, 235, 239, 240, 244, 247, 248, 252, 253, 254, 258, 264, 265, 269, 270, 274, 276, 277, 281, 284, 286, 287, 288, 289, 294, 296, 319, 322, 332, 334, 356, 371, 388, 399, 405, 411, 412, 413, 414, 444, 464, 469, 475, 482, 483, 486, 488, 492, 495, 499, 500, 505, 515, 516, 523, 541, 544, 552, 574, 577, 578, 580, 581, 582, 583, 584, 585, 592, 594, 604, 609, 611, 615, 639, 645, 647, 653, 657, 660, 661, 665, 668, 674, 682, 683, 684, 688, 710, 720, 729, 731, 738, 739, 740, 741, 750, 752, 757, 758, 761, 768, 776, 784, 785, 786, 792, 798, 802, 808, 814, 817, 820, 823, 824, 828, 830, 831, 832, 834, 837, 846, 848, 852, 856, 861, 863, 868, 872, 873, 874, 880, 882, 883, 887, 888, 890, 916, 922, 953, 1006, 1008, 1011, 1012, 1013, 1014, 1048, 1089, 1095, 1107, 1113, 1122, 1123, 1130, 1148, 1151, 1182, 1187, 1192, 1218, 1225, 1229, 1232, 1233, 1237, 1240, 1246, 1254, 1255, 1256, 1260, 1277, 1286, 1305, 1309, 1310, 1315, 1317, 1322, 1323, 1328, 1332, 1333, 1335, 1336], "all_compat": 1317, "all_data": 1333, "all_horizont": [192, 193, 319, 719, 831, 832, 916], "all_stat": 30, "alloc": [134, 135, 196, 247, 319, 802, 891, 920, 1066, 1305], "allow": [1, 8, 38, 39, 45, 46, 47, 48, 49, 89, 98, 122, 136, 139, 148, 151, 152, 153, 154, 161, 164, 165, 168, 173, 177, 222, 225, 227, 252, 253, 255, 277, 278, 281, 284, 297, 319, 435, 441, 444, 532, 552, 553, 560, 561, 606, 635, 687, 689, 690, 802, 846, 847, 852, 856, 880, 888, 916, 920, 922, 1039, 1045, 1048, 1139, 1159, 1184, 1204, 1259, 1261, 1262, 1286, 1287, 1305, 1328, 1336], "allow_alias": [560, 561], "allow_chunk": [164, 168], "allow_copi": [122, 177, 277, 319, 1286, 1305], "allow_dupl": [601, 802, 1180, 1305], "allow_infin": [164, 168], "allow_missing_column": [146, 153], "allow_nul": [161, 164, 168, 1336], "allow_object": 762, "allow_parallel": [225, 319, 846, 847, 916], "allow_pyarrow_filt": 154, "allow_time_zon": [164, 165, 168], "allowed_dtyp": [164, 165, 168, 1336], "almost": [57, 229, 305, 319, 687, 689, 690, 824, 916, 1159, 1259, 1261, 1262, 1305], "along": [36, 40, 44, 45, 46, 47, 48, 144, 146, 148, 151, 152, 153, 319, 916], "alpha": [460, 462, 463, 802, 834, 861, 872, 916, 922, 1067, 1069, 1070, 1305], "alpha_i": [461, 802, 1068, 1305], "alphabet": [922, 1336], "alphanumer": [695, 922, 1267], "alreadi": [37, 38, 97, 276, 319, 405, 516, 568, 715, 802, 872, 916, 1006, 1123, 1294, 1305], "also": [27, 36, 39, 45, 49, 124, 136, 139, 140, 145, 146, 148, 153, 163, 164, 167, 168, 173, 194, 209, 210, 236, 240, 244, 251, 253, 257, 265, 276, 288, 293, 296, 319, 401, 404, 413, 435, 438, 444, 470, 490, 553, 560, 561, 594, 604, 608, 609, 647, 673, 674, 675, 682, 683, 698, 729, 738, 739, 742, 745, 752, 754, 776, 792, 801, 802, 808, 841, 842, 857, 865, 867, 874, 883, 886, 888, 890, 916, 922, 1013, 1042, 1094, 1182, 1186, 1187, 1225, 1245, 1246, 1247, 1254, 1305, 1309, 1315, 1317, 1320, 1324, 1328, 1331, 1333, 1334], "alt": [319, 322, 1305, 1310], "altair": [156, 319, 322, 1305, 1310], "altern": [39, 319, 798, 1325], "although": [266, 319, 875, 916], "alwai": [13, 36, 38, 45, 66, 68, 71, 134, 180, 201, 209, 224, 225, 229, 282, 305, 319, 387, 388, 552, 564, 687, 709, 710, 792, 802, 818, 838, 846, 847, 852, 879, 916, 922, 983, 1159, 1259, 1290, 1305, 1314, 1315, 1333, 1336], "am": [676, 1248], "amarillo": 1328, "amaz": [319, 322, 1305, 1310], "amazonaw": 32, "ambigu": [438, 439, 452, 687, 690, 745, 1042, 1043, 1056, 1259, 1262], "america": 746, "amount": [49, 67, 89, 144, 148, 151, 152, 553, 748, 802, 1322], "amsterdam": [438, 1042], "an": [1, 30, 36, 37, 38, 39, 40, 44, 45, 46, 47, 48, 51, 53, 54, 66, 67, 68, 94, 98, 101, 104, 111, 113, 121, 123, 124, 127, 134, 135, 136, 137, 139, 141, 144, 145, 146, 148, 150, 151, 152, 153, 162, 164, 168, 182, 183, 184, 190, 196, 199, 203, 205, 210, 221, 222, 223, 225, 226, 229, 240, 244, 248, 249, 251, 252, 256, 266, 271, 277, 281, 283, 287, 288, 293, 296, 305, 319, 322, 330, 352, 355, 367, 373, 378, 381, 383, 384, 386, 401, 402, 403, 404, 405, 406, 413, 417, 418, 435, 438, 441, 455, 461, 469, 470, 476, 477, 480, 513, 516, 519, 521, 543, 544, 552, 553, 565, 567, 577, 578, 599, 600, 601, 609, 610, 614, 615, 616, 618, 620, 622, 624, 627, 629, 631, 650, 651, 654, 660, 663, 667, 687, 689, 690, 692, 694, 708, 711, 719, 724, 728, 743, 744, 746, 747, 749, 751, 754, 758, 759, 760, 761, 762, 774, 776, 777, 780, 784, 789, 790, 792, 793, 798, 802, 820, 821, 822, 824, 828, 830, 834, 838, 842, 847, 848, 852, 861, 863, 865, 866, 872, 875, 883, 886, 888, 890, 891, 899, 913, 916, 920, 921, 922, 949, 952, 964, 969, 974, 977, 979, 980, 982, 994, 996, 1002, 1003, 1004, 1005, 1006, 1013, 1017, 1045, 1059, 1066, 1068, 1108, 1120, 1123, 1126, 1128, 1150, 1159, 1187, 1188, 1192, 1193, 1194, 1195, 1196, 1197, 1199, 1200, 1201, 1205, 1207, 1222, 1223, 1226, 1232, 1235, 1239, 1259, 1261, 1262, 1264, 1266, 1286, 1288, 1305, 1323, 1325, 1328, 1332, 1333, 1335], "ana": [676, 1248], "anan": [676, 1248], "ananab": 1328, "and_": 802, "ang": 1328, "angl": [725, 726], "ani": [4, 31, 32, 33, 35, 36, 37, 38, 39, 40, 44, 45, 46, 47, 48, 55, 56, 57, 65, 66, 68, 71, 121, 122, 123, 124, 125, 126, 127, 131, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 144, 146, 148, 149, 150, 151, 152, 153, 154, 161, 162, 163, 164, 165, 166, 167, 168, 169, 173, 175, 178, 180, 186, 190, 192, 193, 198, 200, 201, 203, 205, 220, 222, 223, 224, 225, 226, 229, 233, 243, 248, 252, 253, 254, 266, 269, 272, 273, 276, 277, 278, 281, 282, 284, 287, 288, 296, 319, 322, 323, 328, 331, 332, 356, 387, 388, 389, 405, 406, 439, 440, 458, 459, 469, 470, 474, 477, 479, 481, 485, 494, 504, 511, 516, 523, 551, 552, 553, 560, 570, 573, 575, 577, 578, 580, 582, 584, 585, 588, 589, 593, 598, 601, 608, 609, 610, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 636, 640, 650, 652, 666, 683, 684, 685, 686, 687, 689, 690, 692, 694, 703, 709, 710, 711, 718, 719, 720, 722, 731, 733, 734, 735, 762, 764, 768, 778, 779, 786, 792, 802, 818, 823, 824, 830, 831, 832, 834, 837, 838, 846, 847, 848, 860, 863, 875, 879, 880, 883, 890, 891, 916, 920, 922, 924, 926, 929, 953, 983, 990, 1006, 1007, 1043, 1044, 1063, 1064, 1073, 1076, 1081, 1083, 1085, 1090, 1099, 1108, 1111, 1118, 1123, 1130, 1158, 1159, 1170, 1171, 1180, 1186, 1187, 1188, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1205, 1206, 1222, 1224, 1238, 1259, 1261, 1262, 1264, 1266, 1284, 1285, 1286, 1287, 1289, 1290, 1305, 1310, 1333, 1336], "anna": [236, 319, 857, 916], "anoth": [91, 163, 181, 189, 195, 209, 225, 259, 319, 405, 408, 415, 489, 519, 557, 563, 567, 608, 617, 619, 621, 623, 625, 628, 630, 632, 663, 802, 820, 829, 841, 847, 869, 888, 916, 1006, 1015, 1065, 1073, 1093, 1126, 1186, 1187, 1235, 1305, 1327, 1328], "anti": [224, 319, 846, 899, 916, 1205, 1207, 1305, 1321], "any_horizont": 721, "anyth": [38, 252, 319], "anywher": [375, 377, 687, 689, 690, 1259, 1261, 1262], "ap": 1328, "apach": [34, 40, 41, 44, 132, 136, 137, 140, 142, 150, 176, 319, 925], "apaya": [688, 1260], "api": [0, 32, 36, 40, 44, 45, 46, 47, 48, 122, 144, 146, 148, 151, 152, 153, 154, 177, 229, 305, 319, 553, 764, 802, 899, 916, 1159, 1305, 1332], "apia": [414, 1014], "app": [681, 1253], "appear": [39, 62, 124, 159, 160, 319, 674, 713, 802, 922, 1292, 1305, 1334], "append": [37, 38, 164, 198, 224, 225, 226, 319, 605, 792, 802, 846, 847, 848, 916, 1073, 1305], "appl": [185, 214, 224, 248, 249, 272, 300, 301, 303, 304, 306, 307, 308, 309, 310, 311, 312, 319, 388, 611, 656, 681, 710, 802, 846, 863, 894, 895, 897, 898, 900, 901, 902, 903, 904, 905, 906, 916, 1228, 1253, 1321, 1328], "appli": [10, 20, 36, 39, 45, 58, 136, 148, 161, 164, 168, 173, 188, 203, 226, 229, 243, 265, 266, 276, 305, 319, 344, 416, 419, 420, 421, 424, 425, 426, 427, 428, 429, 430, 431, 434, 436, 437, 440, 442, 453, 454, 456, 462, 463, 552, 553, 598, 616, 617, 618, 619, 622, 623, 629, 630, 647, 673, 674, 687, 689, 690, 694, 727, 738, 739, 752, 763, 764, 776, 781, 792, 802, 828, 848, 852, 860, 874, 875, 899, 916, 995, 1016, 1019, 1020, 1021, 1024, 1025, 1026, 1030, 1031, 1032, 1034, 1035, 1038, 1040, 1041, 1044, 1046, 1057, 1058, 1060, 1069, 1070, 1159, 1193, 1194, 1196, 1200, 1245, 1246, 1259, 1261, 1262, 1266, 1305, 1314], "applic": [277, 319, 553, 802], "apply_on_context_ent": 173, "appropri": [39, 154, 201, 277, 319, 444, 604, 802, 838, 916, 1048, 1182, 1305], "approx": [335, 802], "approx_n_uniqu": [319, 802, 916, 1305], "approxim": [44, 179, 319, 335, 461, 723, 802, 817, 916, 932, 1068, 1305, 1327, 1336], "april": [441, 1045, 1328, 1329], "ar": [1, 10, 11, 17, 20, 30, 32, 33, 36, 38, 39, 40, 44, 45, 46, 47, 48, 49, 50, 57, 58, 88, 89, 96, 102, 118, 121, 122, 123, 124, 125, 126, 127, 128, 131, 134, 135, 136, 137, 138, 139, 140, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 157, 158, 159, 160, 162, 164, 165, 166, 168, 173, 177, 180, 181, 186, 188, 192, 193, 196, 199, 201, 202, 203, 208, 209, 210, 222, 224, 225, 226, 227, 229, 235, 236, 242, 244, 251, 252, 253, 254, 257, 258, 260, 262, 265, 272, 276, 277, 278, 281, 282, 286, 288, 289, 293, 294, 297, 298, 319, 331, 333, 347, 363, 368, 387, 388, 389, 395, 401, 403, 404, 413, 439, 444, 452, 457, 459, 460, 461, 462, 463, 468, 470, 490, 492, 494, 495, 497, 498, 499, 500, 502, 507, 537, 544, 552, 589, 594, 601, 604, 607, 608, 609, 610, 614, 617, 619, 621, 623, 625, 626, 628, 630, 632, 638, 641, 644, 646, 647, 652, 661, 665, 667, 668, 671, 672, 673, 674, 675, 677, 688, 690, 692, 697, 702, 704, 708, 709, 710, 719, 720, 722, 727, 730, 731, 732, 733, 734, 741, 743, 744, 746, 747, 766, 768, 771, 780, 784, 786, 789, 790, 792, 794, 795, 797, 801, 802, 803, 804, 807, 808, 809, 810, 811, 814, 818, 823, 824, 828, 831, 832, 836, 838, 841, 842, 846, 847, 848, 852, 856, 857, 861, 863, 865, 867, 868, 870, 871, 874, 879, 882, 883, 886, 887, 888, 892, 916, 920, 922, 929, 930, 944, 960, 965, 983, 986, 995, 1004, 1005, 1013, 1043, 1048, 1056, 1062, 1064, 1066, 1067, 1068, 1069, 1070, 1075, 1077, 1079, 1094, 1097, 1099, 1100, 1102, 1103, 1104, 1105, 1109, 1114, 1144, 1151, 1171, 1180, 1182, 1186, 1187, 1188, 1198, 1210, 1214, 1217, 1224, 1233, 1237, 1239, 1243, 1244, 1245, 1246, 1249, 1260, 1262, 1264, 1269, 1276, 1284, 1286, 1287, 1288, 1290, 1297, 1299, 1301, 1305, 1306, 1309, 1311, 1312, 1313, 1315, 1317, 1320, 1325, 1333, 1336], "arbitrari": [78, 205, 319, 408, 802, 829, 916, 922], "arbitrarili": [229, 319], "arcco": [802, 1305], "arccosh": [802, 1305], "arcsin": [802, 1305], "arcsinh": [802, 1305], "arctan": [725, 726, 802, 1305], "arctan2": 726, "arctanh": [802, 1305], "aren": [36, 45, 319, 916], "arg": [31, 49, 60, 61, 63, 64, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 81, 82, 83, 84, 85, 86, 201, 243, 319, 344, 598, 727, 753, 802, 838, 860, 916, 920, 1159, 1305, 1318], "arg_max": [802, 1305], "arg_min": [802, 1305], "arg_sort": [802, 1305], "arg_tru": [728, 802, 1305], "arg_uniqu": [802, 1305], "arg_wher": [345, 802], "argmax": [552, 802], "argument": [35, 38, 44, 133, 134, 138, 146, 148, 149, 164, 166, 168, 186, 190, 197, 209, 210, 225, 242, 243, 251, 257, 258, 265, 278, 285, 289, 293, 294, 298, 319, 439, 452, 464, 470, 490, 552, 594, 598, 614, 647, 682, 683, 684, 702, 719, 725, 726, 727, 730, 731, 732, 733, 735, 750, 780, 784, 792, 798, 802, 830, 835, 841, 842, 847, 860, 865, 867, 868, 874, 881, 886, 887, 892, 913, 916, 920, 922, 1043, 1056, 1094, 1254, 1255, 1256, 1287, 1305, 1327, 1328], "aris": 136, "arithmet": [203, 319], "arm": 156, "arm64": 156, "around": [36, 45, 319, 916], "arr": [277, 319, 794, 1286, 1297, 1305], "arr_bar": 1323, "arr_foo": 1323, "arrai": [121, 125, 134, 135, 138, 146, 149, 175, 196, 197, 271, 276, 277, 278, 319, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 401, 402, 403, 404, 511, 526, 527, 528, 529, 531, 540, 541, 543, 546, 548, 552, 610, 616, 618, 620, 622, 624, 627, 629, 631, 637, 708, 731, 749, 781, 802, 835, 916, 921, 924, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 1002, 1003, 1004, 1005, 1010, 1066, 1118, 1133, 1134, 1135, 1136, 1138, 1146, 1147, 1148, 1150, 1153, 1155, 1156, 1188, 1193, 1194, 1196, 1199, 1200, 1201, 1208, 1212, 1280, 1284, 1286, 1287, 1288, 1305, 1326, 1332, 1335], "array_agg": 1326, "array_contain": 1326, "array_get": 1326, "array_length": 1326, "array_low": 1326, "array_mean": 1326, "array_revers": 1326, "array_sum": 1326, "array_to_str": 1326, "array_uniqu": 1326, "array_upp": 1326, "arraylik": [1010, 1305], "arrow": [40, 41, 46, 121, 136, 137, 140, 142, 151, 176, 222, 253, 254, 271, 273, 277, 319, 916, 925, 1280, 1286, 1305], "arrowinvaliderror": [38, 319], "as_": [1305, 1310], "as_dict": [135, 242, 319], "as_expr": 922, "as_seri": [181, 272, 319, 820, 916, 922], "asarrai": [175, 924], "ascend": [210, 251, 319, 614, 802, 842, 865, 916], "ascii": [7, 20, 391, 392, 652, 662, 664, 665, 669, 670, 675, 677, 688, 697, 922, 987, 988, 1224, 1234, 1236, 1237, 1241, 1242, 1247, 1249, 1260, 1269], "ascii_borders_onli": 20, "ascii_borders_only_condens": 20, "ascii_case_insensit": [652, 662, 664, 675, 1224, 1234, 1236, 1247], "ascii_ful": 20, "ascii_full_condens": 20, "ascii_horizontal_onli": 20, "ascii_lett": 1336, "ascii_markdown": 20, "ascii_no_bord": 20, "ascii_onli": 922, "ascii_t": 173, "ascii_uppercas": [287, 319], "asd": [653, 660, 1225, 1232], "asia": [128, 922, 1019, 1020, 1046], "asid": 444, "asin": 1326, "asind": 1326, "asof": [225, 319, 847, 916], "asof_join": [225, 319], "asofjoinstrategi": [225, 319, 847, 916], "assert": [157, 158, 159, 160, 164, 168, 251, 319, 814, 922], "assert_frame_equ": [158, 159, 195, 319, 1336], "assert_frame_not_equ": [157, 160], "assert_series_equ": [157, 160, 1065, 1305, 1336], "assert_series_not_equ": [158, 159], "assert_someth": 162, "assertionerror": [157, 158, 159, 160], "assign": [162, 210, 304, 319, 368, 544, 594, 604, 679, 680, 802, 842, 898, 916, 965, 1151, 1182, 1251, 1252, 1305], "associ": [37, 39, 50, 137, 139, 163, 166, 254, 319, 921, 1316, 1318, 1322], "assum": [32, 254, 319, 852, 899, 916, 1328], "assume_rol": 32, "assumpt": [552, 802], "async": [136, 824, 916], "async_engin": 136, "asynchron": [57, 136, 824, 916], "asyncio": [57, 136, 824, 916], "asyncresult": [57, 824, 916], "ata": 26, "atan": 1326, "atan2": [725, 726, 1326], "atan2_ab": 1330, "atan2d": [726, 1326], "atan2d_ab": 1330, "atand": 1326, "atg": 26, "atgataaaggag": 26, "atol": [157, 158, 159, 160], "attain": [647, 802], "attempt": [1, 408, 802, 829, 916], "attr": [319, 322, 1305, 1310], "attribut": [59, 62, 65, 66, 67, 68, 76, 80, 161, 319, 322, 794, 795, 797, 798, 803, 804, 807, 809, 810, 811, 891, 916, 1297, 1299, 1301, 1305, 1306, 1310, 1311, 1312, 1313], "attributeerror": 1, "audi": [272, 319, 611, 802], "august": 444, "australia": 745, "auth": 33, "authent": [38, 138, 146, 148, 149, 150, 151, 153, 319], "author": 1, "auto": [36, 40, 44, 45, 46, 47, 48, 58, 121, 123, 124, 125, 127, 143, 144, 146, 148, 151, 152, 153, 283, 319, 916, 1336], "auto_structifi": [257, 293, 319, 867, 886, 916], "autofilt": [39, 319], "autofit": [39, 319], "autogener": [134, 135, 139, 145, 148], "automat": [8, 36, 45, 121, 123, 124, 125, 127, 128, 134, 135, 136, 137, 139, 143, 144, 146, 148, 151, 152, 164, 168, 170, 257, 266, 293, 319, 552, 609, 682, 683, 684, 781, 802, 867, 875, 886, 916, 920, 1186, 1187, 1254, 1255, 1256, 1289, 1305, 1315, 1317, 1320, 1333], "autumn": [673, 674], "avail": [39, 44, 48, 130, 136, 137, 138, 149, 150, 162, 173, 244, 266, 318, 319, 444, 604, 781, 794, 795, 797, 801, 802, 803, 804, 807, 808, 809, 810, 811, 814, 875, 914, 915, 916, 920, 922, 1008, 1182, 1297, 1299, 1301, 1305, 1306, 1309, 1311, 1312, 1313, 1324], "available_timezon": [65, 922], "averag": [39, 319, 460, 461, 462, 463, 604, 802, 1067, 1068, 1069, 1070, 1182, 1305, 1322], "avg": 1326, "avocado": 1328, "avoid": [164, 168, 201, 253, 319, 330, 802, 838, 916], "avro": [34, 132, 319, 814], "avrocompress": [34, 319], "aw": [32, 36, 40, 44, 45, 46, 47, 48, 138, 144, 146, 148, 149, 151, 152, 153, 319, 916], "awai": 1327, "await": [57, 136, 824, 910, 916], "awar": [10, 136, 222, 253, 254, 273, 319, 461, 652, 662, 664, 675, 690, 802, 916, 1068, 1224, 1234, 1236, 1247, 1262, 1305], "aws_access_key_id": [38, 138, 149, 153, 319], "aws_region": [38, 149, 153, 319], "aws_secret_access_kei": [38, 138, 149, 153, 319], "awsassumerolekwarg": 32, "axi": [235, 286, 319, 322, 725, 726, 856, 882, 916, 1305, 1310], "aya": [677, 1249, 1260], "az": [138, 149, 150], "azur": [36, 38, 40, 44, 45, 46, 47, 48, 138, 144, 146, 148, 149, 150, 151, 152, 153, 319, 916], "azure_storage_account_kei": [138, 149, 150], "azure_storage_account_nam": [138, 149, 150], "b": [1, 10, 34, 36, 38, 40, 41, 44, 53, 58, 80, 93, 96, 121, 122, 123, 124, 125, 126, 127, 128, 134, 136, 139, 177, 178, 179, 180, 182, 183, 184, 185, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 203, 204, 206, 207, 208, 209, 210, 211, 212, 214, 215, 217, 219, 220, 221, 222, 223, 224, 227, 228, 230, 232, 234, 237, 239, 240, 241, 242, 243, 244, 245, 246, 248, 249, 250, 252, 253, 254, 255, 256, 257, 259, 262, 264, 265, 266, 267, 268, 270, 271, 272, 274, 275, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 309, 310, 311, 312, 313, 319, 322, 328, 330, 331, 333, 334, 344, 346, 351, 356, 371, 372, 373, 374, 375, 376, 377, 388, 389, 399, 406, 410, 441, 444, 464, 466, 468, 469, 470, 472, 475, 482, 483, 486, 488, 489, 490, 492, 495, 497, 498, 499, 500, 505, 511, 516, 523, 533, 534, 535, 536, 552, 553, 558, 567, 574, 577, 578, 579, 580, 581, 582, 583, 591, 592, 594, 598, 601, 604, 608, 609, 611, 613, 639, 645, 647, 654, 658, 663, 667, 673, 674, 698, 699, 710, 713, 717, 719, 720, 721, 722, 723, 727, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 749, 750, 751, 752, 753, 756, 757, 758, 760, 761, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 776, 778, 779, 781, 783, 784, 785, 786, 787, 791, 798, 802, 817, 818, 821, 822, 823, 824, 825, 826, 827, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 849, 850, 851, 852, 853, 854, 855, 858, 859, 860, 861, 862, 863, 864, 866, 867, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 886, 888, 889, 890, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 904, 905, 906, 907, 916, 922, 928, 931, 953, 968, 969, 970, 971, 972, 973, 986, 989, 990, 1007, 1010, 1045, 1048, 1062, 1065, 1066, 1073, 1076, 1094, 1099, 1118, 1140, 1141, 1142, 1143, 1180, 1185, 1226, 1230, 1235, 1239, 1245, 1246, 1270, 1272, 1273, 1275, 1287, 1292, 1305, 1315, 1317, 1318, 1320, 1321, 1322, 1323, 1328, 1329, 1330, 1333], "b1": [51, 53], "b2": [51, 53], "b345": [39, 319], "b4": [39, 319], "b_b": [266, 319], "b_btm_by_a": [388, 802], "b_btm_by_b": [388, 802], "b_by_ca": [388, 710, 802], "b_by_cb": [388, 710, 802], "b_is_not_nan": [498, 802], "b_isnan": [497, 802], "b_isnul": [500, 802], "b_not_nul": [499, 802], "b_revers": [578, 582, 611, 802], "b_suffix": 583, "b_sum": [298, 892], "b_top_by_a": [710, 802], "b_top_by_b": [710, 802], "ba": [408, 464, 567, 681, 750, 802, 922], "back": [4, 50, 153, 198, 210, 259, 277, 278, 319, 567, 594, 674, 802, 823, 842, 869, 891, 916, 1073, 1287, 1305], "backend": [38, 136, 137, 138, 149, 150, 319, 322, 1305, 1310], "background": [319, 323, 823, 915, 916], "backward": [44, 48, 200, 225, 319, 371, 413, 433, 469, 802, 837, 847, 916, 1013, 1037, 1076, 1305], "backward_fil": [475, 638, 802], "bad": [673, 674, 1245, 1246], "balanc": [167, 169, 1336], "ballon_dor": [659, 661, 1231, 1233], "banana": [185, 272, 301, 303, 306, 307, 308, 309, 310, 311, 312, 319, 388, 611, 656, 681, 710, 802, 895, 897, 900, 901, 902, 903, 904, 905, 906, 1328], "banded_column": [39, 319], "banded_row": [39, 319], "bar": [34, 36, 38, 40, 41, 42, 43, 44, 131, 143, 144, 181, 184, 185, 186, 190, 191, 192, 193, 194, 195, 198, 201, 203, 205, 206, 207, 212, 214, 215, 216, 218, 224, 228, 229, 230, 231, 232, 233, 234, 237, 238, 241, 244, 246, 248, 249, 252, 255, 256, 257, 259, 264, 267, 268, 269, 270, 271, 273, 274, 275, 277, 278, 279, 284, 285, 290, 291, 292, 297, 319, 322, 390, 408, 487, 557, 559, 560, 561, 563, 564, 565, 566, 567, 568, 569, 570, 644, 653, 655, 658, 660, 661, 676, 678, 680, 685, 686, 723, 734, 735, 736, 751, 756, 757, 760, 761, 765, 767, 769, 770, 772, 773, 780, 783, 787, 791, 792, 798, 802, 820, 825, 826, 830, 831, 832, 833, 838, 844, 845, 846, 859, 863, 866, 867, 880, 881, 885, 916, 921, 922, 985, 1130, 1217, 1225, 1227, 1230, 1232, 1233, 1248, 1252, 1257, 1258, 1305, 1319, 1321, 1322, 1323, 1325, 1328, 1331], "bar2": 1328, "bar22": [203, 319], "bar_": 678, "bar_3": [274, 319], "bar_4": [274, 319], "bar_a": [244, 319], "bar_at_2": 1323, "bar_avg": 1322, "bar_b": [244, 319], "bar_color": [39, 319], "bar_max": 1322, "bar_median": 1322, "bar_min": 1322, "bar_negative_border_color_sam": [39, 319], "bar_negative_color_sam": [39, 319], "bar_std": 1322, "bar_sum": 1322, "bar_var": 1322, "bare": [560, 561, 922], "base": [31, 39, 63, 107, 109, 166, 193, 201, 210, 226, 251, 319, 414, 422, 457, 460, 461, 462, 463, 470, 485, 489, 547, 548, 552, 553, 599, 601, 609, 614, 617, 619, 621, 623, 625, 628, 630, 632, 692, 802, 838, 842, 848, 865, 916, 922, 1014, 1022, 1062, 1067, 1068, 1069, 1070, 1090, 1093, 1154, 1155, 1159, 1178, 1180, 1186, 1187, 1264, 1296, 1305, 1321, 1327, 1336], "base64": [373, 374, 654, 655, 969, 970, 1226, 1227], "base_nam": [283, 319], "base_utc_offset": [422, 1022], "baseexcept": 1333, "basi": [39, 139, 164, 319], "basic": [39, 175, 319, 559, 924, 1336], "basic_chart": [39, 319], "batch": [41, 56, 57, 130, 135, 136, 142, 144, 152, 154, 253, 281, 319, 823, 824, 852, 916], "batch_siz": [36, 45, 134, 135, 136, 144, 152, 154, 281, 319, 916], "batchedcsvread": 135, "baz": [205, 215, 216, 285, 319, 661, 678, 680, 751, 760, 773, 798, 845, 881, 916, 921, 922, 1233, 1252, 1319, 1325, 1328], "bb": [922, 1008, 1305, 1328, 1333], "bbb": [1, 39, 319, 698, 700, 701, 922], "bc": [663, 674, 785, 1235], "bcbc45": 1328, "bea": 12, "bear": 922, "beauti": 12, "becaus": [144, 152, 196, 210, 227, 229, 287, 305, 319, 474, 516, 544, 802, 842, 899, 916, 1066, 1123, 1159, 1305], "becom": [166, 318, 914, 915], "bed3": [39, 319], "been": [5, 30, 39, 171, 177, 300, 319, 476, 553, 571, 604, 802, 894, 1182, 1305], "beetl": [272, 319, 611, 802], "befor": [39, 64, 65, 134, 136, 139, 148, 154, 157, 158, 159, 160, 170, 173, 198, 210, 225, 266, 276, 281, 285, 319, 381, 382, 384, 385, 403, 404, 405, 552, 594, 595, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 658, 697, 704, 732, 778, 779, 802, 842, 844, 847, 881, 916, 920, 977, 978, 980, 981, 1004, 1005, 1006, 1073, 1175, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1230, 1269, 1276, 1305, 1321], "beforehand": [687, 689, 690, 1259, 1261, 1262], "begin": [12, 39, 319, 460, 462, 463, 659, 688, 802, 1067, 1069, 1070, 1231, 1260, 1305], "behav": [201, 319, 470, 553, 683, 684, 802, 838, 916], "behavior": [44, 48, 146, 153, 192, 193, 201, 224, 225, 319, 355, 476, 519, 521, 658, 751, 760, 802, 831, 832, 838, 846, 847, 913, 916, 952, 1126, 1128, 1230], "behaviour": [10, 50, 58, 192, 193, 266, 319, 651, 659, 660, 663, 673, 674, 711, 781, 802, 831, 832, 875, 916, 1223, 1231, 1232, 1235, 1245, 1246], "behind": 170, "being": [13, 31, 32, 33, 36, 40, 44, 45, 46, 47, 48, 56, 57, 66, 68, 71, 131, 134, 135, 136, 139, 144, 145, 146, 148, 151, 152, 153, 154, 161, 162, 164, 165, 166, 167, 168, 169, 181, 197, 226, 266, 274, 276, 281, 287, 288, 319, 322, 323, 405, 406, 439, 485, 553, 601, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 658, 729, 731, 749, 778, 779, 802, 820, 823, 824, 834, 835, 848, 875, 883, 916, 990, 1006, 1007, 1043, 1090, 1180, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1230, 1281, 1284, 1289, 1305, 1310, 1336], "belong": [1, 210, 319, 842, 916], "below": [19, 38, 138, 139, 149, 150, 193, 201, 244, 319, 444, 469, 665, 673, 674, 688, 743, 744, 746, 747, 789, 790, 792, 798, 802, 838, 916, 1048, 1237, 1245, 1246, 1260], "benchmark": 134, "best": [229, 305, 319, 553, 802, 1159, 1305], "better": [229, 276, 277, 305, 319, 392, 553, 670, 802, 819, 899, 916, 988, 1205, 1207, 1242, 1305], "between": [24, 58, 92, 161, 162, 164, 168, 178, 186, 224, 246, 253, 311, 319, 356, 389, 409, 410, 444, 490, 514, 523, 533, 534, 535, 536, 595, 601, 602, 624, 625, 650, 666, 725, 726, 729, 734, 736, 775, 778, 779, 802, 846, 862, 905, 916, 953, 984, 989, 1009, 1010, 1048, 1094, 1121, 1130, 1140, 1141, 1142, 1143, 1175, 1180, 1181, 1197, 1222, 1238, 1305, 1322, 1330], "between_ab": [490, 802], "beyond": [695, 1267], "bia": [462, 463, 502, 626, 644, 802, 1069, 1070, 1109, 1198, 1217, 1305], "bias": [502, 644, 802, 1109, 1217, 1305], "big": 135, "big_fil": 135, "bigidx": 129, "bigqueri": 137, "bin": [406, 485, 601, 692, 718, 795, 802, 1007, 1090, 1180, 1264, 1299, 1305, 1310], "bin_count": [485, 802, 1090, 1305], "bin_i": [718, 802], "bin_x": [718, 802], "bin_xor_xi": [718, 802], "binari": [40, 136, 189, 259, 319, 372, 373, 374, 375, 376, 377, 408, 567, 654, 802, 829, 869, 916, 922, 968, 969, 971, 972, 973, 1226, 1324], "binary_str": [718, 802], "bind": 139, "birthdai": 134, "bit": [64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 81, 82, 83, 84, 85, 379, 380, 381, 382, 384, 385, 606, 651, 802, 975, 977, 978, 980, 981, 1184, 1223, 1305, 1324, 1328], "bit_and": 1326, "bit_count": 1326, "bit_length": 1326, "bit_or": 1326, "bit_xor": 1326, "bitmap": [196, 319, 1066, 1305], "bitwis": [332, 378, 383, 386, 593, 718, 719, 720, 721, 722, 802, 974, 979, 982, 1305, 1324, 1326], "bitwise_and": [802, 1305], "bitwise_count_on": [802, 1305], "bitwise_count_zero": [802, 1305], "bitwise_leading_on": [802, 1305], "bitwise_leading_zero": [802, 1305], "bitwise_or": [802, 1305], "bitwise_trailing_on": [802, 1305], "bitwise_trailing_zero": [802, 1305], "bitwise_xor": [802, 1305], "bla": [653, 660, 1225, 1232], "black": [229, 319, 372, 373, 374, 375, 377], "blindli": [516, 1123], "block": [20, 57, 209, 284, 319, 792, 824, 841, 863, 880, 889, 890, 899, 916, 1205, 1207, 1305], "blue": [49, 88, 89, 372, 373, 374, 375, 377, 715, 802, 1294, 1305], "bob": [134, 236, 319, 857, 916, 1334], "bodi": [39, 319, 323], "bold": [39, 319], "bom": [36, 45, 319, 916], "bool": [5, 7, 8, 9, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 36, 38, 39, 44, 45, 46, 47, 48, 50, 56, 57, 58, 88, 121, 122, 123, 124, 126, 127, 128, 131, 134, 135, 136, 138, 139, 140, 142, 144, 145, 146, 148, 149, 151, 152, 153, 154, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 172, 175, 177, 180, 181, 182, 183, 188, 190, 195, 200, 201, 202, 203, 207, 208, 209, 210, 214, 215, 217, 218, 219, 222, 224, 225, 233, 242, 244, 248, 252, 253, 254, 255, 260, 263, 265, 266, 269, 272, 274, 277, 278, 282, 283, 284, 285, 288, 289, 291, 293, 301, 303, 306, 309, 319, 330, 331, 332, 333, 334, 344, 347, 348, 351, 355, 356, 364, 369, 372, 373, 375, 377, 388, 389, 400, 401, 402, 403, 404, 405, 406, 413, 425, 440, 457, 458, 459, 460, 462, 463, 479, 481, 482, 485, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 504, 507, 508, 512, 516, 519, 521, 523, 532, 539, 544, 545, 551, 552, 553, 557, 558, 559, 560, 561, 562, 563, 564, 568, 569, 588, 589, 591, 593, 596, 597, 601, 604, 606, 615, 616, 618, 620, 622, 624, 626, 627, 629, 631, 635, 637, 639, 644, 646, 647, 650, 651, 652, 653, 654, 656, 662, 663, 664, 666, 673, 674, 675, 678, 679, 681, 687, 689, 690, 692, 694, 698, 700, 701, 710, 712, 715, 718, 719, 720, 721, 722, 724, 727, 728, 729, 733, 734, 737, 738, 743, 744, 746, 747, 758, 759, 762, 764, 768, 774, 777, 780, 781, 784, 786, 789, 790, 792, 793, 802, 818, 820, 821, 823, 824, 828, 830, 834, 837, 838, 841, 842, 846, 847, 852, 856, 861, 863, 870, 872, 874, 875, 879, 880, 881, 882, 883, 886, 891, 895, 897, 900, 903, 916, 920, 921, 922, 924, 929, 930, 941, 944, 945, 948, 952, 953, 961, 966, 968, 969, 971, 973, 984, 986, 990, 994, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1013, 1025, 1044, 1062, 1064, 1065, 1067, 1069, 1070, 1077, 1079, 1086, 1087, 1090, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1109, 1114, 1115, 1119, 1123, 1126, 1128, 1130, 1139, 1146, 1152, 1159, 1171, 1173, 1176, 1177, 1180, 1182, 1183, 1184, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1204, 1207, 1208, 1212, 1217, 1219, 1222, 1223, 1224, 1225, 1226, 1228, 1234, 1235, 1236, 1238, 1245, 1246, 1247, 1250, 1251, 1253, 1259, 1261, 1262, 1264, 1266, 1281, 1286, 1287, 1291, 1294, 1305, 1314, 1315, 1317, 1323, 1328, 1333], "boolean": [50, 164, 180, 201, 203, 265, 282, 319, 331, 332, 333, 347, 348, 351, 372, 375, 377, 388, 425, 470, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 507, 508, 512, 591, 593, 596, 597, 647, 667, 710, 717, 718, 727, 728, 784, 792, 802, 818, 838, 874, 879, 916, 922, 929, 930, 942, 944, 945, 948, 968, 1025, 1077, 1094, 1095, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1107, 1114, 1115, 1119, 1173, 1176, 1177, 1207, 1223, 1296, 1305, 1325], "border": 20, "both": [10, 25, 36, 45, 49, 88, 89, 136, 153, 184, 210, 224, 225, 226, 236, 251, 252, 278, 288, 319, 334, 395, 406, 444, 464, 490, 601, 614, 617, 619, 621, 623, 625, 628, 630, 632, 677, 743, 744, 746, 747, 789, 790, 798, 802, 813, 842, 846, 847, 848, 857, 865, 883, 916, 922, 995, 1048, 1094, 1249, 1287, 1305, 1333, 1334], "boto3": 32, "bottom": [180, 319, 388, 802, 818, 916], "bottom_k": [282, 319, 388, 709, 710, 802, 879, 916, 1290, 1305], "bottom_k_bi": [387, 709, 710, 802], "bound": [103, 134, 135, 196, 210, 319, 355, 395, 490, 519, 521, 544, 550, 714, 724, 743, 744, 746, 747, 789, 790, 802, 842, 916, 952, 995, 1066, 1094, 1126, 1128, 1157, 1293, 1305, 1323], "boundari": [210, 319, 395, 485, 695, 802, 842, 916, 995, 1090, 1267, 1305], "box": [20, 229, 319], "box_draw": 20, "branch": [56, 57, 823, 824, 834, 861, 872, 916], "break": [31, 32, 33, 36, 40, 44, 45, 46, 47, 48, 56, 57, 66, 68, 71, 131, 144, 146, 148, 151, 152, 153, 154, 161, 162, 164, 165, 166, 167, 168, 169, 224, 226, 266, 276, 281, 287, 288, 319, 322, 323, 405, 406, 439, 485, 553, 601, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 731, 778, 779, 802, 823, 824, 834, 846, 848, 875, 883, 916, 990, 1006, 1007, 1043, 1090, 1180, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1284, 1289, 1305, 1310], "breakpoint": [406, 485, 601, 802, 1007, 1090, 1180, 1305], "breezah": 148, "breviti": 173, "broadcast": [675, 731, 922, 1247], "broader": 922, "brotli": [44, 48, 319, 916], "brussel": [438, 1042], "bst": [418, 422, 438, 1018, 1022, 1042], "bucket": [38, 138, 149, 150, 153, 319, 439, 452, 485, 802, 1043, 1056, 1090, 1305], "bud": [673, 674, 1245, 1246], "budget": 1314, "buffer": [134, 135, 136, 196, 222, 319, 1066, 1305], "buffer_s": [222, 319], "bug": [552, 553, 802, 852, 899, 916, 1159, 1305], "build": [55, 122, 922, 1336], "built": 92, "builtin": [132, 134, 135, 139, 140, 141, 142, 143, 144, 145, 146, 147, 189, 319, 408, 802, 829, 916], "bundl": 173, "busi": [413, 729, 1013], "business_day_count": [413, 1013], "by_alternate_row": 1, "by_dtyp": 922, "by_first_letter_of_column_nam": 51, "by_first_letter_of_column_valu": 51, "by_index": 922, "by_left": [225, 319, 847, 916], "by_nam": 922, "by_pred": [252, 319], "by_right": [225, 319, 847, 916], "bye": 1, "byi": 1328, "bys": [210, 319, 842, 916], "byte": [34, 36, 39, 40, 41, 44, 45, 48, 132, 133, 134, 135, 139, 140, 141, 142, 143, 144, 145, 147, 148, 151, 152, 189, 196, 259, 319, 391, 392, 408, 567, 663, 664, 665, 669, 670, 677, 688, 802, 829, 869, 916, 987, 988, 1066, 1235, 1236, 1237, 1241, 1242, 1249, 1260, 1305, 1328], "bytesio": [39, 40, 41, 132, 134, 135, 139, 140, 141, 142, 143, 144, 145, 146, 147, 189, 259, 319, 408, 567, 802, 829, 869, 916], "c": [1, 10, 34, 36, 38, 40, 41, 44, 51, 53, 58, 96, 122, 124, 126, 128, 139, 148, 177, 178, 180, 181, 182, 183, 184, 185, 187, 190, 191, 192, 193, 194, 195, 197, 201, 203, 206, 207, 208, 209, 210, 212, 214, 215, 223, 224, 227, 228, 230, 232, 234, 237, 239, 240, 241, 242, 244, 245, 246, 248, 249, 250, 252, 255, 256, 257, 264, 265, 266, 267, 268, 270, 271, 274, 275, 276, 277, 278, 279, 282, 286, 287, 288, 290, 291, 293, 298, 301, 302, 303, 306, 307, 309, 312, 313, 319, 323, 328, 330, 331, 333, 351, 371, 388, 406, 444, 482, 490, 511, 523, 553, 560, 577, 578, 592, 594, 598, 601, 639, 679, 687, 710, 713, 720, 722, 723, 725, 726, 727, 730, 731, 733, 734, 735, 736, 738, 739, 741, 751, 752, 753, 756, 757, 760, 761, 763, 765, 766, 767, 768, 769, 770, 771, 772, 773, 781, 783, 785, 786, 787, 791, 798, 802, 818, 820, 821, 822, 823, 824, 825, 826, 827, 830, 831, 832, 833, 834, 835, 838, 841, 842, 846, 850, 859, 861, 863, 864, 866, 867, 872, 873, 874, 875, 879, 882, 883, 886, 888, 892, 895, 896, 897, 900, 901, 903, 906, 907, 916, 920, 922, 989, 1007, 1094, 1118, 1180, 1251, 1259, 1273, 1292, 1305, 1315, 1317, 1318, 1320, 1321, 1322, 1323, 1328, 1333], "c00": 922, "c01": 922, "c02": 922, "c03": 922, "c05": 922, "c1": 368, "c123": 1328, "c2": 368, "c20": 922, "c25": 922, "c3": 368, "c40": 922, "c45": 1328, "c4d79b": [39, 319], "c50": 922, "c567": [39, 319], "c60": 922, "c75": 922, "c80": 922, "c8ae6d2b276": [39, 319], "c93": 922, "c95": 922, "c96": 922, "c97": 922, "c98": 922, "c99": 922, "c_btm_by_a": [388, 802], "c_btm_by_b": [388, 802], "c_by_ca": [388, 710, 802], "c_by_cb": [388, 710, 802], "c_c_c": [781, 875, 916], "c_contigu": [277, 319], "c_max": [594, 802], "c_mean_squar": [298, 892], "c_min": [594, 802], "c_top_by_a": [710, 802], "c_top_by_b": [710, 802], "c_total": 1333, "cach": [49, 56, 57, 88, 89, 116, 140, 148, 151, 153, 157, 158, 159, 160, 172, 608, 609, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 687, 689, 690, 694, 802, 813, 823, 824, 834, 861, 872, 916, 986, 1186, 1187, 1259, 1261, 1262, 1266, 1305], "cadi": [244, 319], "cafe": [692, 1264], "caf\u00e9": [391, 392, 669, 670, 922, 987, 988, 1241, 1242], "calamin": 139, "calcul": [39, 44, 48, 50, 188, 210, 267, 290, 319, 409, 460, 461, 462, 463, 502, 514, 533, 540, 546, 550, 626, 644, 649, 714, 716, 736, 778, 779, 783, 791, 802, 828, 842, 876, 884, 916, 1008, 1009, 1067, 1068, 1069, 1070, 1109, 1121, 1140, 1198, 1217, 1221, 1295, 1305], "calendar": [64, 65, 210, 225, 251, 289, 319, 416, 426, 428, 435, 439, 452, 456, 461, 614, 617, 619, 621, 623, 625, 628, 630, 632, 743, 744, 746, 747, 748, 789, 790, 802, 842, 847, 865, 916, 1016, 1026, 1031, 1039, 1043, 1056, 1060, 1068, 1305], "calendar_year": [426, 456], "call": [36, 39, 40, 44, 45, 46, 47, 48, 49, 56, 57, 126, 135, 136, 139, 144, 146, 148, 151, 152, 153, 157, 158, 159, 160, 164, 168, 173, 180, 209, 210, 227, 229, 251, 266, 277, 282, 318, 319, 387, 388, 401, 404, 413, 552, 553, 577, 578, 580, 582, 584, 585, 608, 609, 640, 709, 710, 729, 735, 798, 802, 818, 823, 824, 834, 841, 842, 861, 865, 872, 875, 879, 913, 914, 915, 916, 920, 922, 983, 1013, 1159, 1187, 1213, 1286, 1290, 1305, 1315, 1319, 1333], "callabl": [51, 52, 53, 54, 148, 203, 229, 243, 248, 305, 319, 368, 544, 552, 553, 578, 579, 598, 615, 738, 739, 752, 763, 764, 776, 802, 852, 860, 863, 899, 916, 965, 1151, 1159, 1192, 1305], "caller": [137, 236, 319, 544, 852, 857, 899, 916], "cam": [248, 319, 863, 916], "can": [1, 14, 27, 36, 39, 40, 44, 45, 46, 47, 48, 49, 50, 56, 57, 64, 65, 67, 80, 88, 89, 124, 134, 135, 136, 139, 140, 144, 145, 146, 148, 151, 152, 153, 154, 162, 163, 164, 168, 170, 173, 175, 180, 182, 192, 193, 194, 203, 205, 209, 210, 217, 219, 221, 224, 225, 229, 240, 244, 251, 253, 254, 257, 259, 260, 265, 276, 277, 281, 282, 283, 287, 293, 296, 305, 319, 322, 331, 368, 388, 401, 404, 405, 408, 413, 432, 433, 435, 438, 441, 444, 452, 461, 467, 470, 490, 516, 544, 552, 553, 560, 564, 567, 568, 574, 577, 578, 580, 582, 584, 585, 594, 599, 601, 606, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 637, 639, 644, 647, 652, 661, 668, 673, 674, 675, 682, 683, 684, 687, 698, 710, 727, 729, 742, 745, 752, 754, 758, 759, 764, 781, 792, 798, 801, 802, 813, 818, 819, 823, 824, 829, 831, 832, 834, 842, 846, 847, 865, 867, 869, 870, 872, 874, 875, 879, 886, 889, 890, 916, 922, 924, 965, 1006, 1013, 1036, 1037, 1039, 1042, 1043, 1045, 1048, 1056, 1068, 1074, 1094, 1123, 1151, 1159, 1164, 1178, 1180, 1184, 1187, 1205, 1207, 1208, 1211, 1217, 1224, 1225, 1233, 1240, 1245, 1246, 1247, 1254, 1255, 1256, 1259, 1284, 1286, 1305, 1310, 1320, 1333], "cancel": [823, 916], "candid": [659, 661, 1231, 1233], "cannot": [1, 44, 48, 98, 101, 134, 135, 139, 140, 142, 145, 146, 153, 170, 173, 229, 254, 255, 277, 296, 305, 319, 373, 444, 464, 532, 553, 568, 635, 654, 679, 700, 764, 802, 872, 890, 891, 899, 916, 922, 969, 1048, 1139, 1159, 1204, 1226, 1251, 1286, 1305], "capabl": [1, 39, 319], "capac": [196, 263, 319, 1066, 1212, 1305], "capit": [695, 1267, 1328], "captur": [659, 661, 673, 674, 1231, 1233, 1245, 1246], "car": [248, 272, 319, 611, 802, 863, 916], "cardin": [179, 319, 335, 723, 802, 817, 916, 932, 1305], "care": [39, 260, 319, 553, 594, 637, 802, 870, 916, 1208, 1305], "cars_revers": [611, 802], "cartesian": [224, 319, 846, 916], "case": [39, 49, 50, 57, 96, 121, 123, 124, 125, 127, 136, 143, 144, 152, 153, 170, 198, 210, 222, 229, 244, 251, 253, 254, 273, 276, 277, 319, 414, 461, 552, 564, 565, 578, 614, 651, 652, 660, 662, 663, 664, 673, 674, 675, 695, 802, 824, 842, 865, 916, 920, 922, 1014, 1068, 1073, 1223, 1224, 1232, 1234, 1235, 1236, 1245, 1246, 1247, 1267, 1284, 1305], "cast": [1, 38, 52, 53, 121, 123, 124, 127, 157, 158, 159, 160, 203, 210, 243, 251, 276, 277, 281, 293, 319, 334, 403, 404, 415, 441, 444, 455, 593, 598, 599, 606, 608, 614, 667, 668, 697, 704, 708, 732, 733, 782, 802, 842, 860, 865, 886, 916, 920, 922, 990, 1004, 1005, 1015, 1045, 1048, 1059, 1178, 1184, 1239, 1240, 1269, 1276, 1282, 1286, 1288, 1289, 1305, 1326], "cast_str_to_int": [243, 319, 860, 916], "cast_to_supertyp": [802, 920], "cat": [26, 49, 88, 89, 406, 601, 651, 653, 693, 696, 708, 733, 797, 802, 922, 1007, 1090, 1180, 1223, 1225, 1265, 1268, 1301, 1305], "categor": [38, 49, 68, 88, 89, 91, 157, 158, 159, 160, 224, 274, 319, 390, 391, 392, 406, 601, 608, 609, 708, 802, 922, 985, 986, 987, 988, 989, 990, 1007, 1180, 1186, 1187, 1288, 1305], "categori": [39, 49, 68, 89, 274, 319, 390, 406, 485, 601, 802, 985, 1007, 1090, 1180, 1281, 1305], "categorical_as_str": [157, 158, 159, 160], "categoricalord": 62, "categoricaltyp": [271, 319], "caus": [104, 113, 122, 134, 135, 136, 148, 177, 198, 277, 319, 552, 802, 1073, 1286, 1305], "cba": 684, "cbrt": [802, 1305, 1326], "cbrt_a": 1327, "cc": [464, 750, 802, 922, 1008, 1305, 1328], "ccc": [1, 39, 319, 698, 700, 701, 922, 1328], "ccy": 1336, "cd": [674, 698, 700, 701, 922], "cd34": 674, "cdatainterfac": [176, 925], "cde": [922, 1328], "cdt": [439, 452, 1043, 1056], "ceil": [52, 802, 1305, 1326], "ceil_a": 1327, "cell": [15, 16, 39, 244, 319], "cent": [416, 1245], "center": [15, 16, 39, 319, 460, 462, 463, 615, 616, 618, 620, 622, 624, 627, 629, 631, 802, 1067, 1069, 1070, 1192, 1193, 1194, 1195, 1196, 1197, 1199, 1200, 1201, 1305], "central": [149, 150, 173, 502, 644, 802, 1109, 1217, 1305], "centuri": 1329, "certain": [45, 46, 47, 48, 57, 215, 289, 319, 683, 684, 798, 823, 824, 861, 916, 1305], "certainli": [687, 689, 690, 1259, 1261, 1262], "cest": [438, 1042], "cet": [438, 1042], "cfg": [2, 4, 17, 173], "cfg_ascii_fram": 173, "cfg_markdown": 173, "cfg_verbos": 173, "cfoo": [888, 916], "chain": [577, 578, 580, 582, 584, 585, 792], "chanc": [161, 164, 168, 1336], "chang": [30, 31, 32, 33, 36, 40, 44, 45, 46, 47, 48, 50, 56, 57, 66, 68, 71, 131, 134, 135, 136, 139, 144, 146, 148, 151, 152, 153, 154, 161, 162, 164, 165, 166, 167, 168, 169, 226, 266, 276, 281, 287, 288, 295, 319, 322, 323, 405, 406, 409, 439, 444, 485, 553, 594, 595, 601, 608, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 731, 778, 779, 802, 823, 824, 834, 848, 875, 883, 889, 916, 920, 922, 989, 990, 1006, 1007, 1043, 1048, 1090, 1175, 1180, 1186, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1212, 1284, 1289, 1305, 1310], "changes_length": [802, 920], "char": [27, 660, 1232], "char_length": 1328, "charact": [7, 9, 12, 20, 26, 27, 28, 36, 37, 45, 90, 133, 134, 135, 137, 148, 319, 391, 392, 435, 657, 658, 660, 665, 669, 670, 671, 672, 673, 674, 677, 678, 679, 682, 683, 684, 685, 686, 688, 695, 697, 861, 916, 922, 987, 988, 1039, 1229, 1230, 1232, 1237, 1241, 1242, 1243, 1244, 1245, 1246, 1249, 1250, 1251, 1254, 1255, 1256, 1260, 1267, 1269, 1328], "character_length": 1328, "characterist": [164, 168], "charli": [134, 1334], "chart": [39, 319, 322, 861, 916, 1305, 1310], "cheap": [182, 183, 258, 294, 319, 821, 822, 868, 887, 916, 994, 996, 1305], "cheaper": [519, 1126], "check": [38, 65, 98, 134, 135, 148, 157, 158, 159, 160, 172, 195, 220, 224, 319, 351, 372, 375, 377, 482, 490, 494, 512, 651, 656, 663, 681, 802, 846, 852, 916, 948, 968, 971, 973, 1065, 1086, 1087, 1096, 1099, 1106, 1108, 1119, 1223, 1228, 1235, 1253, 1305], "check_column_ord": [157, 158], "check_dtyp": [157, 158, 159, 160, 921, 1065, 1305], "check_exact": [157, 158, 159, 160], "check_nam": [159, 160, 1065, 1305], "check_ord": [159, 160], "check_row_ord": [157, 158], "choos": [44, 46, 48, 210, 244, 319, 444, 842, 916, 1048], "chrono": [36, 45, 92, 319, 441, 444, 687, 689, 690, 694, 916, 1045, 1048, 1259, 1261, 1262, 1266, 1328, 1329], "chunk": [14, 48, 130, 134, 135, 138, 144, 146, 148, 149, 151, 152, 153, 164, 168, 198, 223, 239, 277, 319, 334, 605, 802, 916, 931, 993, 1073, 1084, 1165, 1183, 1280, 1286, 1305], "chunk_length": 1305, "chunkedarrai": [121, 239, 319], "citi": [673, 674], "clang": 156, "clariti": [252, 319], "class": [1, 17, 31, 32, 33, 49, 51, 52, 53, 54, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 107, 109, 161, 162, 254, 319, 789, 798, 802, 808, 814, 826, 833, 866, 885, 891, 916, 921, 1285, 1305, 1309, 1317, 1333], "classmethod": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 189, 319, 408, 476, 802, 829, 916, 1315, 1333], "claus": [814, 1323, 1332], "clean": [687, 689, 690, 1259, 1261, 1262], "cleaner": 173, "cleanli": [10, 208, 319, 1333], "clear": [49, 88, 183, 319, 822, 916, 996, 1305], "clearer": 124, "clickhous": 137, "client": [32, 136], "clip": [802, 1305], "clipboard": [35, 133, 319, 814], "clone": [123, 124, 125, 126, 127, 182, 277, 319, 821, 916, 994, 1305], "close": [39, 136, 210, 251, 266, 319, 406, 490, 549, 601, 614, 617, 619, 621, 623, 625, 628, 630, 632, 644, 743, 744, 746, 747, 789, 790, 802, 842, 865, 875, 916, 1007, 1094, 1180, 1217, 1305], "closedinterv": [210, 251, 319, 490, 614, 617, 619, 621, 623, 625, 628, 630, 632, 743, 744, 746, 747, 789, 790, 802, 842, 865, 916, 1094, 1305], "closest": [121, 225, 319, 847, 916, 1322, 1327], "closur": [617, 619, 628, 630, 632, 802], "cloud": [33, 36, 38, 40, 44, 45, 46, 47, 48, 136, 138, 144, 146, 148, 149, 150, 151, 152, 153, 154, 319, 814, 916], "cloudi": [673, 674], "cloudpickl": 156, "cluster": 153, "cluster_with_column": [56, 57, 823, 824, 834, 861, 872, 916], "co": [660, 802, 1232, 1305, 1326], "coalesc": [224, 225, 288, 319, 488, 662, 664, 687, 802, 846, 847, 883, 916, 1236, 1259, 1321, 1326], "code": [173, 184, 224, 319, 372, 373, 374, 375, 377, 408, 553, 637, 802, 829, 846, 850, 916, 1208, 1305, 1315], "codebas": 173, "coeffici": [186, 319, 644, 802, 1217, 1305], "coerc": [58, 607, 802], "coercion": [45, 46, 47, 48, 56, 57, 607, 802, 823, 824, 834, 861, 872, 916], "col": [1, 12, 36, 39, 45, 50, 51, 52, 53, 125, 127, 148, 162, 164, 201, 209, 210, 218, 220, 224, 225, 226, 229, 240, 243, 244, 251, 252, 257, 265, 276, 281, 285, 287, 293, 298, 319, 323, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 376, 377, 387, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 477, 478, 479, 480, 481, 484, 485, 487, 488, 489, 490, 491, 493, 494, 496, 497, 498, 501, 502, 503, 504, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 575, 576, 577, 579, 581, 583, 586, 587, 588, 589, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 691, 692, 693, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 711, 712, 713, 714, 715, 716, 717, 718, 719, 721, 723, 727, 728, 730, 731, 732, 733, 735, 737, 740, 742, 743, 745, 746, 748, 752, 753, 754, 755, 756, 757, 765, 767, 769, 770, 772, 775, 776, 780, 781, 783, 785, 787, 788, 791, 792, 802, 838, 841, 842, 844, 846, 847, 848, 860, 865, 867, 874, 875, 881, 886, 888, 892, 916, 922, 1039, 1042, 1123, 1205, 1207, 1236, 1240, 1259, 1305, 1336], "col0": [164, 1336], "col1": [164, 244, 319, 916, 1336], "col2": [164, 244, 319, 916, 1336], "col3": [244, 319, 1336], "col4": 1336, "col_nam": [243, 319, 553, 792, 802, 860, 916], "cole": 131, "coli": [39, 319, 584, 585, 922, 1336], "collaps": [45, 46, 47, 48, 56, 57, 823, 824, 834, 861, 872, 916], "collapse_join": [45, 46, 47, 48, 56, 57, 823, 824, 834, 861, 872, 916], "collect": [53, 56, 57, 148, 149, 150, 154, 164, 165, 168, 192, 193, 227, 244, 266, 271, 284, 285, 319, 464, 494, 553, 732, 750, 754, 780, 781, 784, 802, 817, 818, 820, 821, 824, 827, 828, 829, 830, 831, 832, 835, 836, 837, 838, 839, 840, 841, 842, 843, 845, 846, 847, 848, 849, 851, 852, 853, 854, 855, 857, 858, 859, 860, 862, 863, 864, 865, 867, 869, 871, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 886, 888, 889, 890, 892, 893, 894, 895, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 913, 915, 916, 922, 1099, 1305, 1315, 1316, 1317, 1320, 1321, 1333, 1334, 1336], "collect_al": [53, 57, 823, 824, 916], "collect_all_async": [824, 916], "collect_async": [57, 916], "collect_schema": [53, 227, 319, 826, 833, 860, 866, 885, 916], "collis": 58, "colnam": [24, 39, 148, 319], "color": [49, 88, 89, 305, 319, 322, 372, 373, 374, 375, 377, 654, 715, 802, 899, 968, 969, 970, 971, 973, 1226, 1294, 1305, 1328], "column": [10, 16, 17, 18, 21, 22, 24, 38, 39, 44, 48, 49, 50, 51, 58, 65, 80, 89, 93, 97, 121, 123, 124, 125, 126, 127, 128, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 157, 158, 159, 160, 164, 178, 180, 181, 184, 186, 187, 190, 191, 192, 193, 194, 197, 201, 202, 205, 206, 208, 209, 210, 214, 215, 220, 221, 222, 224, 225, 226, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 248, 249, 251, 252, 253, 254, 256, 257, 258, 260, 265, 267, 268, 269, 272, 274, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 298, 304, 319, 322, 323, 330, 331, 333, 344, 353, 362, 364, 367, 388, 395, 399, 400, 406, 416, 417, 419, 420, 421, 424, 425, 426, 427, 428, 429, 430, 431, 434, 436, 437, 440, 441, 442, 444, 453, 454, 456, 464, 466, 470, 472, 485, 489, 490, 505, 511, 517, 519, 539, 543, 544, 553, 559, 560, 562, 564, 566, 577, 579, 580, 581, 582, 583, 584, 585, 594, 601, 605, 607, 608, 609, 610, 612, 613, 614, 617, 619, 621, 623, 625, 628, 630, 632, 639, 640, 646, 647, 650, 658, 663, 665, 666, 675, 679, 680, 687, 688, 689, 690, 691, 692, 694, 699, 702, 710, 715, 717, 719, 720, 721, 722, 723, 724, 725, 726, 727, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 750, 751, 752, 754, 755, 756, 757, 758, 759, 760, 761, 763, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 798, 802, 818, 820, 827, 830, 831, 832, 833, 835, 838, 841, 842, 846, 847, 848, 852, 853, 854, 855, 856, 858, 859, 862, 863, 865, 866, 867, 868, 870, 874, 876, 877, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 892, 898, 899, 916, 921, 922, 929, 930, 950, 959, 961, 964, 986, 989, 995, 1000, 1001, 1007, 1016, 1019, 1020, 1021, 1024, 1025, 1026, 1030, 1031, 1032, 1034, 1035, 1038, 1040, 1041, 1044, 1045, 1046, 1048, 1057, 1058, 1060, 1072, 1090, 1093, 1118, 1124, 1126, 1146, 1150, 1180, 1187, 1188, 1191, 1211, 1222, 1230, 1235, 1238, 1251, 1252, 1259, 1261, 1262, 1263, 1264, 1266, 1272, 1275, 1281, 1282, 1294, 1305, 1321, 1323, 1325, 1327, 1328, 1330, 1331, 1334, 1335, 1336], "column_0": [1, 229, 283, 319], "column_1": [229, 283, 319, 1330], "column_2": [283, 319, 1330], "column_abc": 15, "column_format": [39, 319], "column_nam": [248, 283, 319, 863, 916], "column_tot": [39, 319], "column_width": [39, 319], "column_x": [134, 135, 139, 145, 148], "column_xyz": 15, "columnar": [125, 127, 222, 253, 319], "columnformatdict": [39, 319], "columnnameorselector": [181, 190, 192, 193, 235, 242, 244, 254, 274, 284, 285, 286, 287, 319, 820, 830, 831, 832, 856, 880, 881, 882, 916], "columnnotfounderror": [205, 206, 319], "columntotalsdefinit": [39, 319], "columnwidthsdefinit": [39, 319], "colx": [39, 319, 584, 585, 922, 1320, 1336], "colz": [922, 1336], "com": [32, 39, 137, 319, 460, 462, 463, 659, 660, 661, 802, 1067, 1069, 1070, 1231, 1232, 1233, 1305], "combin": [44, 48, 56, 57, 58, 201, 210, 211, 225, 244, 251, 289, 319, 332, 345, 452, 461, 474, 568, 593, 609, 614, 682, 683, 684, 743, 744, 746, 747, 789, 790, 792, 802, 823, 824, 834, 842, 847, 861, 865, 872, 916, 1043, 1056, 1068, 1187, 1254, 1255, 1256, 1305, 1321, 1334], "come": [116, 137, 210, 284, 286, 319, 413, 432, 433, 502, 544, 729, 802, 842, 880, 882, 916, 1013, 1036, 1037, 1109, 1305], "comm_subexpr_elim": [56, 57, 823, 824, 834, 861, 872, 916], "comm_subplan_elim": [56, 57, 823, 824, 834, 861, 872, 916], "comma": [35, 36, 134, 135, 148, 319], "comment": [134, 135, 148], "comment_prefix": [134, 135, 148], "common": [50, 56, 57, 58, 96, 134, 135, 148, 288, 319, 578, 808, 823, 824, 834, 861, 872, 883, 916, 1309], "compact": 1331, "compani": 137, "compar": [153, 157, 158, 159, 160, 195, 201, 319, 458, 459, 479, 481, 490, 504, 551, 588, 589, 802, 838, 916, 989, 1064, 1065, 1171, 1305], "comparison": [154, 201, 319, 838, 916], "compat": [20, 39, 40, 41, 44, 48, 91, 271, 319, 651, 653, 659, 660, 661, 663, 673, 674, 916, 922, 1048, 1223, 1225, 1231, 1232, 1233, 1235, 1245, 1246, 1280, 1305, 1315, 1328, 1329, 1333], "compat_level": [40, 41, 271, 319, 1280, 1305], "compatibleframetyp": [1316, 1318, 1333], "compatlevel": [40, 41, 271, 319, 1280, 1305], "competit": [604, 802, 1182, 1305], "compil": [55, 349, 350, 509, 510, 946, 947, 1116, 1117], "complement": 922, "complet": [134, 136, 148, 1334], "complex": [165, 387, 388, 405, 709, 710, 802, 983, 1006, 1290, 1305], "compliant": [39, 319, 444, 1048], "compon": [417, 440, 444, 687, 690, 748, 1017, 1044, 1048, 1259, 1262], "compos": 1334, "composit": [80, 1336], "compound": [128, 254, 319, 922], "comprehens": 162, "compress": [34, 40, 41, 44, 46, 48, 319, 612, 802, 916, 1190, 1305], "compression_level": [44, 48, 319, 916], "comput": [56, 58, 94, 196, 209, 225, 244, 278, 284, 298, 311, 319, 327, 336, 337, 338, 339, 340, 341, 358, 359, 360, 365, 366, 370, 393, 396, 397, 398, 401, 402, 403, 404, 410, 457, 460, 461, 462, 463, 465, 502, 526, 527, 528, 529, 533, 534, 535, 536, 540, 546, 547, 548, 549, 574, 594, 595, 600, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 641, 642, 643, 644, 648, 706, 707, 715, 720, 722, 725, 726, 727, 734, 736, 749, 768, 778, 779, 792, 802, 823, 841, 844, 846, 847, 880, 888, 892, 905, 916, 927, 933, 934, 935, 936, 937, 938, 955, 956, 957, 962, 963, 967, 991, 997, 998, 999, 1002, 1003, 1004, 1005, 1010, 1062, 1066, 1067, 1068, 1069, 1070, 1071, 1109, 1133, 1134, 1135, 1136, 1140, 1141, 1142, 1143, 1147, 1153, 1154, 1155, 1156, 1164, 1175, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1214, 1215, 1216, 1217, 1220, 1278, 1279, 1287, 1294, 1305, 1327, 1330], "computeerror": [564, 692, 1264], "concat": [49, 88, 89, 97, 135, 225, 319, 847, 888, 916, 993, 1084, 1165, 1183, 1305, 1326], "concat_list": [516, 749], "concat_w": [266, 319, 781, 875, 916, 1326, 1333], "concaten": [49, 58, 88, 89, 203, 243, 319, 598, 650, 666, 731, 732, 733, 802, 860, 916, 993, 1165, 1222, 1238, 1305, 1328], "concatmethod": 58, "conclus": [125, 127, 319, 916], "concret": [164, 168], "condit": [39, 193, 201, 226, 252, 319, 470, 490, 656, 681, 728, 752, 792, 802, 838, 848, 916, 1094, 1305, 1321, 1326, 1332], "conditional_format": [39, 319], "conditionalformatdict": [39, 319], "config": [0, 50, 188, 257, 276, 293, 319, 652, 662, 664, 675, 743, 744, 746, 747, 748, 814, 823, 828, 867, 886, 916, 1224, 1236, 1247], "configur": [5, 32, 38, 138, 149, 150, 173, 319, 322, 815, 823, 891, 916, 1305, 1310], "configure_axisx": [319, 322, 1305, 1310], "configure_point": [319, 322, 1305, 1310], "conflat": [490, 802], "conform": 1336, "confus": [96, 331, 497, 498, 675, 802], "conjunct": [39, 88, 136, 139, 145, 162, 319, 758, 761, 916], "conn": 136, "connect": [36, 37, 40, 44, 45, 46, 47, 48, 68, 134, 136, 137, 140, 142, 144, 146, 148, 151, 152, 153, 154, 319, 815, 916], "connectionorcursor": [37, 136, 319], "connector": 137, "connectorx": [136, 137, 156], "consecut": [200, 319, 371, 469, 475, 650, 666, 673, 802, 837, 916, 1076, 1222, 1238, 1246, 1305], "consid": [31, 32, 33, 36, 40, 44, 45, 46, 47, 48, 56, 57, 66, 68, 71, 88, 89, 131, 134, 135, 136, 144, 146, 148, 151, 152, 153, 154, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 180, 192, 193, 195, 221, 226, 229, 235, 253, 266, 276, 281, 282, 284, 286, 287, 288, 319, 322, 323, 388, 395, 405, 406, 439, 474, 485, 552, 553, 560, 576, 577, 580, 582, 584, 585, 601, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 710, 731, 738, 752, 778, 779, 798, 802, 818, 823, 824, 831, 832, 834, 848, 856, 875, 879, 880, 882, 883, 899, 916, 922, 986, 990, 995, 1006, 1007, 1043, 1065, 1090, 1159, 1180, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1205, 1207, 1284, 1289, 1305, 1310, 1315], "consider": 131, "consist": [209, 242, 277, 319, 687, 743, 744, 841, 916, 922, 931, 1073, 1259, 1286, 1305], "consola": [39, 319], "const": 10, "constant": [196, 251, 319, 414, 461, 467, 802, 865, 916, 1014, 1066, 1068, 1074, 1305], "constrain": [50, 148, 192, 193, 319, 831, 832, 916, 922], "constraint": [201, 319, 470, 577, 578, 580, 582, 584, 585, 792, 802, 838, 916, 922], "construct": [49, 88, 89, 96, 121, 123, 124, 125, 126, 127, 128, 131, 136, 319, 476, 774, 777, 793, 798, 802, 829, 916, 986, 1305, 1320], "construct_categor": 49, "constructor": [131, 139, 168], "contain": [5, 36, 37, 38, 39, 45, 50, 55, 92, 123, 126, 128, 136, 137, 138, 146, 149, 150, 153, 163, 164, 166, 168, 180, 185, 192, 193, 194, 210, 218, 223, 240, 276, 277, 281, 282, 288, 300, 319, 331, 333, 356, 375, 377, 408, 482, 494, 523, 553, 650, 652, 656, 659, 661, 663, 666, 668, 680, 681, 697, 719, 720, 721, 722, 733, 764, 802, 818, 826, 829, 831, 832, 833, 842, 861, 879, 883, 894, 916, 920, 922, 929, 930, 953, 1086, 1087, 1130, 1165, 1222, 1224, 1228, 1231, 1233, 1235, 1238, 1240, 1252, 1253, 1269, 1280, 1286, 1305, 1323], "contains_with_expr": 372, "contains_with_lit": 372, "content": [13, 640, 802, 1213, 1305], "context": [49, 88, 89, 170, 240, 266, 319, 329, 470, 516, 552, 553, 564, 646, 647, 715, 735, 751, 754, 760, 761, 764, 773, 777, 780, 801, 802, 813, 814, 875, 888, 916, 1123, 1294, 1305, 1320, 1333, 1335], "contigu": [58, 121, 126, 134, 135, 138, 140, 142, 144, 146, 148, 149, 151, 152, 153, 247, 277, 319], "continu": [134, 406, 601, 644, 802, 1007, 1180, 1217, 1305, 1322], "contrast": 748, "control": [10, 11, 39, 57, 58, 139, 162, 164, 265, 266, 276, 319, 609, 647, 781, 802, 823, 824, 834, 874, 875, 891, 913, 916, 1187, 1284, 1305, 1317, 1320, 1333], "conveni": [198, 281, 319, 908, 931, 1073, 1305, 1315], "convers": [122, 139, 177, 222, 223, 253, 254, 273, 277, 278, 319, 418, 687, 689, 690, 694, 814, 1018, 1259, 1261, 1262, 1266, 1286, 1287, 1305, 1331, 1333], "convert": [38, 92, 122, 126, 138, 139, 145, 149, 177, 254, 272, 273, 274, 275, 276, 277, 278, 280, 281, 319, 367, 368, 407, 418, 441, 444, 543, 544, 552, 578, 603, 661, 687, 689, 690, 691, 692, 694, 699, 802, 916, 920, 964, 965, 989, 1018, 1045, 1048, 1150, 1151, 1233, 1259, 1261, 1262, 1263, 1264, 1266, 1272, 1275, 1283, 1284, 1285, 1286, 1287, 1289, 1305, 1328, 1330, 1331, 1333], "convert_time_zon": [438, 1042], "coo": [248, 319, 863, 916], "coord": 702, "coordin": [39, 319], "copi": [35, 121, 122, 133, 175, 177, 182, 183, 223, 271, 277, 278, 293, 319, 467, 802, 821, 822, 886, 916, 924, 994, 996, 1074, 1280, 1285, 1286, 1287, 1305, 1333], "corasick": [652, 662, 664, 675, 1224, 1234, 1236, 1247], "core": [1, 226, 319, 848, 916, 1333, 1336], "cores_right": [226, 319, 848, 916], "corner": [20, 39, 128, 319], "corr": 319, "corrcoef": [186, 319], "correct": [139, 145, 462, 463, 502, 544, 626, 644, 802, 852, 916, 920, 1069, 1070, 1109, 1198, 1217, 1305], "correctli": [39, 319, 552, 802], "correl": [186, 319, 734, 778], "correlationmethod": 734, "correspond": [210, 225, 251, 277, 289, 319, 388, 426, 435, 439, 452, 553, 604, 614, 617, 619, 621, 623, 625, 628, 630, 632, 710, 743, 744, 746, 747, 789, 790, 802, 823, 842, 847, 865, 916, 1026, 1039, 1043, 1056, 1182, 1305, 1322], "cosd": 1326, "cosh": [802, 1305], "cosin": [336, 337, 396, 397, 552, 802, 933, 934, 997, 998, 1305, 1330], "cost": [226, 254, 319, 673, 848, 916, 1246], "cost_usd": [673, 1246], "cot": [802, 1305, 1326], "cotang": [398, 802, 999, 1305, 1330], "cotd": 1326, "could": [38, 86, 94, 319, 641, 738, 748, 752, 802, 820, 828, 916, 1214, 1305], "count": [39, 154, 179, 188, 210, 240, 241, 251, 283, 289, 295, 310, 319, 335, 352, 361, 400, 413, 461, 485, 505, 513, 525, 530, 553, 576, 592, 614, 617, 619, 621, 623, 625, 628, 630, 632, 653, 713, 715, 723, 729, 737, 761, 772, 802, 817, 828, 842, 859, 865, 889, 904, 916, 922, 932, 949, 958, 1001, 1008, 1013, 1068, 1090, 1112, 1120, 1132, 1137, 1166, 1174, 1225, 1292, 1294, 1305, 1310, 1314, 1326], "count_digit": 653, "count_num": [39, 319], "counterpart": 131, "countri": [225, 319, 414, 847, 916, 1014], "country_holidai": [413, 729, 1013], "covari": [736, 779, 802, 920], "cover": 10, "cow": [671, 672, 1243, 1244], "cpu": [134, 135, 156, 276, 319, 823, 891, 916, 1284, 1305], "crab": [651, 663, 1223, 1235], "crate": [36, 45, 92, 319, 651, 653, 659, 660, 661, 663, 673, 674, 687, 689, 690, 694, 916, 922, 1223, 1225, 1231, 1232, 1233, 1235, 1245, 1246, 1259, 1261, 1262, 1266], "creat": [37, 39, 49, 89, 121, 125, 127, 134, 135, 136, 137, 140, 142, 146, 149, 150, 162, 163, 164, 165, 166, 167, 168, 169, 173, 182, 183, 210, 241, 244, 251, 276, 277, 289, 293, 296, 319, 322, 323, 417, 439, 452, 461, 544, 552, 605, 614, 617, 619, 621, 623, 625, 628, 630, 632, 732, 742, 743, 744, 745, 746, 747, 748, 788, 789, 790, 798, 802, 821, 822, 828, 834, 842, 865, 886, 890, 916, 994, 996, 1007, 1017, 1043, 1056, 1068, 1172, 1180, 1183, 1284, 1286, 1305, 1310, 1332, 1333, 1336], "create_async_engin": 136, "create_engin": [37, 319], "creation": 135, "credenti": [31, 32, 33, 36, 40, 44, 45, 46, 47, 48, 144, 146, 148, 151, 152, 153, 319, 814, 916], "credential_provid": [36, 40, 44, 45, 46, 47, 48, 144, 146, 148, 151, 152, 153, 319, 916], "credentialproviderfunct": [36, 40, 44, 45, 46, 47, 48, 144, 146, 148, 151, 152, 153, 319, 916], "cross": [224, 319, 846, 916, 1321], "crustacean": [663, 1235], "cst": [439, 452, 1043, 1056], "csv": [35, 36, 45, 46, 47, 48, 133, 134, 135, 139, 148, 319, 814, 916], "csvencod": [134, 135, 148], "csvquotestyl": [36, 45, 319, 916], "ctx": [1314, 1316, 1317, 1318, 1319, 1320, 1333], "cube": [1, 54, 393, 599, 802, 991, 1305, 1327], "cuda": 891, "cum_count": [802, 1305], "cum_count_revers": [400, 802], "cum_max": [802, 1305], "cum_max_all_fil": [401, 802], "cum_max_revers": [401, 802], "cum_min": [802, 1305], "cum_min_revers": [402, 802], "cum_prod": [328, 802, 1305], "cum_prod_revers": [403, 802], "cum_reduc": 738, "cum_sum": [487, 594, 703, 741, 802, 844, 916, 1108, 1305], "cum_sum_revers": [404, 802], "cumsum_horizont": 740, "cumul": [400, 401, 402, 403, 404, 737, 738, 739, 740, 741, 802, 1001, 1002, 1003, 1004, 1005, 1305], "cumulative_ev": [802, 1305], "cumulative_sal": [594, 802], "current": [2, 3, 5, 6, 30, 36, 37, 40, 44, 45, 46, 47, 48, 128, 136, 137, 144, 146, 148, 151, 152, 153, 161, 162, 164, 165, 166, 167, 168, 169, 182, 183, 190, 224, 225, 248, 266, 276, 281, 319, 322, 323, 422, 544, 595, 802, 821, 822, 830, 846, 847, 863, 875, 891, 916, 922, 994, 996, 1014, 1022, 1175, 1284, 1289, 1305, 1310, 1317, 1333], "cursor": [37, 136, 319], "custom": [1, 27, 38, 39, 51, 52, 53, 54, 95, 167, 169, 188, 229, 244, 305, 319, 368, 413, 441, 444, 544, 552, 553, 615, 715, 729, 763, 764, 802, 828, 852, 899, 916, 965, 1013, 1045, 1048, 1151, 1159, 1192, 1294, 1305, 1336], "customis": [39, 319], "cut": [601, 802, 1180, 1305], "cxx": 1328, "cypher": 136, "d": [28, 34, 36, 38, 39, 40, 41, 44, 124, 154, 178, 201, 208, 210, 211, 212, 215, 224, 228, 270, 271, 281, 287, 291, 301, 303, 306, 307, 308, 309, 310, 311, 312, 319, 328, 330, 400, 423, 441, 444, 490, 559, 598, 639, 653, 660, 673, 674, 679, 687, 689, 690, 730, 731, 748, 754, 781, 802, 838, 842, 846, 875, 895, 897, 900, 901, 902, 903, 904, 905, 906, 916, 922, 989, 1001, 1023, 1045, 1048, 1094, 1118, 1225, 1232, 1245, 1246, 1251, 1259, 1261, 1262, 1273, 1305, 1321, 1323, 1325, 1328, 1329], "d1": [39, 319, 417], "d2": 417, "d3": 417, "d789": [39, 319], "d_4": [679, 1251], "dai": [64, 65, 81, 210, 223, 225, 251, 289, 319, 322, 413, 432, 433, 435, 436, 439, 441, 444, 445, 452, 454, 461, 614, 617, 619, 621, 623, 625, 628, 630, 632, 729, 742, 743, 744, 745, 746, 747, 748, 789, 790, 802, 842, 847, 865, 916, 922, 1013, 1036, 1037, 1039, 1040, 1043, 1045, 1048, 1049, 1056, 1058, 1068, 1305, 1329], "dark": 1314, "data": [0, 1, 10, 18, 19, 21, 24, 28, 34, 36, 37, 38, 39, 40, 41, 44, 45, 46, 47, 48, 49, 50, 51, 53, 56, 57, 58, 63, 64, 65, 67, 77, 78, 80, 81, 89, 92, 96, 98, 101, 115, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 133, 134, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 151, 152, 153, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 175, 177, 183, 184, 194, 197, 198, 208, 209, 210, 222, 223, 224, 227, 229, 242, 243, 247, 252, 253, 254, 256, 260, 263, 271, 276, 277, 278, 281, 283, 293, 297, 317, 319, 323, 331, 332, 333, 336, 337, 338, 339, 340, 341, 344, 347, 348, 349, 350, 351, 353, 356, 358, 359, 360, 365, 366, 367, 369, 370, 372, 373, 374, 375, 376, 377, 389, 390, 391, 392, 395, 396, 397, 398, 399, 406, 407, 408, 413, 414, 415, 416, 419, 420, 421, 422, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 439, 440, 442, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 459, 461, 466, 477, 479, 480, 481, 485, 488, 490, 491, 492, 493, 494, 495, 496, 497, 498, 504, 505, 509, 510, 512, 517, 523, 525, 532, 543, 545, 551, 553, 588, 589, 593, 594, 601, 603, 604, 607, 608, 609, 610, 612, 613, 617, 619, 621, 623, 625, 628, 630, 632, 633, 635, 637, 642, 643, 644, 650, 653, 654, 655, 658, 659, 660, 661, 665, 666, 667, 668, 669, 670, 677, 678, 679, 680, 687, 688, 689, 690, 692, 694, 697, 706, 707, 708, 711, 712, 715, 718, 724, 732, 735, 742, 743, 744, 745, 746, 747, 748, 758, 759, 761, 762, 763, 764, 774, 777, 788, 789, 790, 793, 798, 802, 814, 821, 822, 823, 824, 829, 833, 835, 841, 842, 866, 870, 886, 916, 921, 924, 929, 930, 942, 944, 945, 946, 947, 948, 950, 952, 953, 964, 966, 968, 969, 970, 972, 984, 985, 987, 988, 994, 995, 996, 1007, 1008, 1013, 1014, 1015, 1016, 1019, 1020, 1021, 1022, 1024, 1025, 1026, 1030, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1046, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1065, 1068, 1072, 1073, 1090, 1095, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1107, 1114, 1115, 1116, 1117, 1119, 1124, 1130, 1132, 1139, 1150, 1152, 1159, 1173, 1180, 1182, 1186, 1187, 1188, 1190, 1191, 1202, 1204, 1212, 1217, 1222, 1223, 1225, 1226, 1227, 1229, 1230, 1231, 1232, 1233, 1237, 1238, 1239, 1240, 1241, 1242, 1249, 1250, 1251, 1252, 1259, 1260, 1261, 1262, 1264, 1266, 1269, 1280, 1285, 1286, 1287, 1288, 1291, 1304, 1305, 1314, 1321, 1328, 1333, 1335], "data_bar": [39, 319], "data_bar_2010": [39, 319], "data_label": [39, 319], "data_page_s": [44, 48, 319, 916], "databas": [37, 120, 136, 137, 319, 814], "datafram": [0, 1, 7, 8, 9, 10, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 45, 46, 47, 48, 50, 51, 52, 53, 54, 56, 57, 58, 76, 93, 96, 97, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 148, 151, 152, 153, 157, 158, 161, 162, 173, 317, 318, 322, 323, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 387, 388, 389, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 440, 441, 442, 444, 445, 446, 447, 448, 449, 450, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 688, 691, 692, 693, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 725, 726, 727, 728, 729, 730, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 756, 757, 758, 759, 760, 761, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 776, 780, 781, 782, 783, 784, 785, 786, 787, 788, 790, 791, 792, 798, 802, 814, 823, 824, 826, 828, 830, 833, 835, 839, 842, 846, 847, 848, 849, 850, 852, 856, 857, 861, 864, 866, 873, 875, 880, 881, 882, 883, 885, 888, 892, 893, 895, 896, 897, 899, 900, 901, 902, 903, 904, 905, 906, 907, 909, 910, 916, 922, 1007, 1008, 1042, 1068, 1090, 1159, 1180, 1236, 1240, 1251, 1252, 1275, 1281, 1282, 1294, 1305, 1314, 1315, 1316, 1317, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1327, 1328, 1329, 1330, 1331, 1333, 1336], "dataframeplot": [319, 322], "dataload": [281, 319], "datapoint": [210, 319, 842, 916], "dataset": [14, 44, 68, 134, 135, 138, 139, 145, 148, 149, 154, 224, 281, 319, 502, 802, 814, 846, 852, 916, 1109, 1305, 1334], "datat": [39, 319], "datatyp": [36, 45, 121, 123, 124, 125, 127, 129, 141, 143, 144, 146, 147, 152, 153, 165, 166, 168, 194, 203, 319, 389, 464, 639, 708, 731, 750, 762, 798, 802, 814, 833, 916, 921, 922, 984, 1008, 1061, 1159, 1211, 1288, 1305, 1331], "date": [16, 39, 50, 65, 134, 135, 137, 139, 145, 146, 148, 151, 153, 154, 181, 188, 208, 210, 223, 225, 251, 266, 319, 322, 351, 413, 415, 416, 417, 418, 421, 423, 425, 426, 428, 431, 432, 433, 435, 436, 437, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 461, 512, 594, 614, 617, 619, 621, 623, 625, 628, 630, 632, 687, 689, 708, 729, 743, 744, 746, 747, 754, 762, 788, 802, 820, 828, 842, 847, 865, 916, 922, 948, 1013, 1015, 1016, 1017, 1018, 1021, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1060, 1068, 1119, 1168, 1169, 1259, 1261, 1288, 1305, 1326, 1329, 1331], "date32": [223, 319], "date_format": [36, 45, 319, 916], "date_min": 435, "date_minus_1y_2mon": 1039, "date_part": 1326, "date_plus_1i": [435, 1039], "date_rang": [225, 289, 319, 421, 423, 436, 443, 454, 746, 747, 847, 916, 1021, 1035, 1040, 1041, 1057, 1058], "date_right": [225, 319, 847, 916], "datetim": [16, 36, 39, 45, 50, 92, 128, 138, 146, 149, 151, 153, 164, 165, 166, 168, 181, 188, 208, 210, 223, 225, 251, 266, 289, 319, 322, 351, 413, 414, 415, 416, 417, 418, 419, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 461, 512, 561, 594, 614, 617, 619, 621, 623, 625, 628, 630, 632, 687, 690, 708, 729, 742, 743, 744, 746, 747, 748, 754, 762, 789, 790, 802, 820, 828, 842, 847, 865, 916, 921, 922, 948, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1068, 1119, 1168, 1169, 1259, 1262, 1286, 1288, 1305, 1328, 1329], "datetime_format": [36, 45, 319, 916], "datetime_rang": [210, 319, 415, 418, 432, 433, 435, 438, 439, 445, 446, 447, 448, 449, 450, 451, 452, 455, 617, 619, 621, 623, 625, 628, 630, 632, 743, 744, 802, 842, 916, 1014, 1015, 1018, 1022, 1023, 1024, 1029, 1030, 1032, 1034, 1036, 1037, 1038, 1039, 1042, 1043, 1047, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "datetime_str": 441, "datetimeindex": 126, "david": 1334, "day_nam": [441, 444], "day_of_month": [421, 436, 454], "day_of_year": [421, 436, 454], "daylight": [210, 225, 251, 289, 319, 414, 422, 435, 439, 452, 614, 617, 619, 621, 623, 625, 628, 630, 632, 743, 744, 746, 747, 748, 789, 790, 802, 842, 847, 865, 916, 1022, 1039, 1043, 1056], "dayofweek": 1329, "dayofyear": 1329, "days_diff": 445, "db": [37, 136, 137, 319], "dbapi2": 136, "dbc": [653, 1225], "dbreadengin": 137, "dbwriteengin": [37, 319], "dbwritemod": [37, 319], "dd": [39, 319, 1328], "ddd": [1, 39, 319, 698, 700, 701], "dddd": 1328, "ddof": [267, 290, 319, 365, 370, 540, 546, 627, 628, 631, 632, 649, 716, 734, 736, 778, 779, 783, 791, 802, 876, 884, 916, 962, 967, 1147, 1153, 1199, 1201, 1221, 1295, 1305], "ddww": 1328, "de": 1328, "deal": [44, 48, 222, 319, 331, 333, 438, 604, 687, 690, 719, 720, 721, 722, 745, 802, 916, 929, 930, 1042, 1182, 1259, 1262, 1305], "debug": [29, 852, 916, 1336], "decad": [1314, 1329], "decai": [460, 461, 462, 463, 802, 1067, 1068, 1069, 1070, 1305], "decemb": [444, 1048], "decim": [9, 10, 11, 27, 28, 36, 39, 45, 134, 135, 148, 319, 323, 633, 691, 802, 916, 922, 1202, 1263, 1305, 1327], "decimal_comma": [134, 135, 148], "decimal_separ": [9, 27], "declar": [121, 123, 124, 125, 127, 136, 143, 144, 152, 276, 281, 319, 916, 922, 1314], "decod": [134, 135, 667], "decompos": [285, 319, 881, 916], "decompress": [44, 46, 48, 319, 916], "decor": [49, 51, 52, 53, 54, 164, 168, 229, 319, 553, 802, 813, 814, 1159, 1305], "dedic": [1, 122, 222, 253, 319, 922, 1333], "deem": [188, 319, 828, 916], "deepcopi": [182, 319, 821, 916, 994, 1305], "def": [1, 49, 51, 52, 53, 54, 136, 162, 164, 168, 173, 243, 283, 319, 328, 598, 657, 660, 684, 718, 763, 802, 824, 860, 916, 922, 1229, 1232, 1336], "default": [4, 5, 9, 10, 14, 27, 30, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 50, 56, 57, 58, 62, 65, 66, 67, 121, 123, 124, 125, 126, 127, 128, 134, 135, 137, 139, 140, 142, 143, 144, 145, 146, 148, 151, 152, 153, 157, 159, 161, 162, 163, 164, 165, 166, 167, 168, 173, 188, 189, 192, 193, 196, 205, 209, 210, 211, 222, 224, 225, 233, 235, 242, 244, 251, 252, 253, 254, 255, 259, 262, 266, 267, 269, 274, 276, 277, 281, 284, 286, 287, 288, 290, 295, 304, 319, 330, 331, 333, 356, 363, 368, 406, 408, 413, 438, 444, 457, 459, 460, 462, 463, 483, 519, 523, 532, 537, 538, 540, 544, 546, 547, 552, 560, 561, 564, 567, 586, 587, 589, 594, 595, 601, 604, 608, 609, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 635, 638, 640, 649, 650, 659, 666, 677, 682, 683, 684, 687, 689, 690, 692, 694, 715, 716, 719, 721, 724, 728, 729, 733, 734, 736, 743, 744, 745, 746, 747, 748, 751, 754, 758, 759, 760, 762, 768, 774, 777, 780, 783, 784, 786, 789, 790, 791, 793, 802, 823, 824, 828, 829, 831, 832, 834, 841, 842, 846, 847, 856, 865, 869, 871, 875, 876, 880, 882, 883, 884, 889, 891, 898, 916, 922, 929, 930, 953, 960, 965, 995, 1007, 1008, 1013, 1042, 1048, 1062, 1066, 1067, 1069, 1070, 1088, 1126, 1130, 1139, 1144, 1145, 1151, 1168, 1169, 1175, 1180, 1182, 1186, 1187, 1192, 1193, 1194, 1195, 1196, 1197, 1199, 1200, 1201, 1204, 1210, 1213, 1221, 1222, 1223, 1231, 1235, 1238, 1249, 1254, 1255, 1256, 1259, 1261, 1262, 1264, 1266, 1284, 1286, 1294, 1295, 1305, 1327, 1336], "default_match": [651, 663], "default_scop": 33, "defaultdict": [254, 319], "defer": [173, 319, 322, 323, 1305, 1310], "defin": [36, 39, 45, 65, 68, 136, 143, 161, 162, 164, 181, 192, 193, 197, 210, 229, 240, 243, 251, 288, 305, 319, 392, 490, 519, 553, 598, 601, 613, 614, 617, 619, 621, 623, 625, 628, 630, 632, 665, 670, 677, 688, 695, 743, 744, 746, 747, 764, 784, 789, 790, 802, 820, 831, 832, 835, 842, 860, 865, 883, 899, 916, 921, 922, 988, 1094, 1126, 1159, 1180, 1191, 1237, 1242, 1249, 1260, 1267, 1305], "definit": [39, 319, 502, 802, 921, 922, 1109, 1305], "deflat": [34, 319], "deg": 1330, "degre": [267, 290, 319, 540, 546, 603, 627, 628, 631, 632, 649, 716, 726, 736, 778, 779, 783, 791, 802, 876, 884, 916, 1199, 1201, 1221, 1295, 1305, 1326], "delet": [68, 1321, 1335], "delimit": [43, 45, 144, 152, 244, 274, 319, 650, 666, 916, 1222, 1238, 1281, 1305], "delta": [38, 138, 149, 267, 290, 319, 540, 546, 627, 628, 631, 632, 649, 716, 736, 778, 779, 783, 791, 802, 814, 876, 884, 916, 1199, 1201, 1221, 1295, 1305], "delta_merge_opt": [38, 319], "delta_table_opt": [138, 149], "delta_write_opt": [38, 319], "deltalak": [38, 138, 149, 156, 319], "deltat": [38, 138, 149, 319], "demo": [39, 319], "demonstr": [134, 474, 802, 922], "dens": [20, 208, 319, 604, 802, 1182, 1305], "densiti": [1305, 1310], "depend": [44, 49, 55, 89, 136, 156, 178, 319, 349, 350, 509, 510, 553, 564, 601, 604, 748, 751, 754, 760, 802, 926, 946, 947, 1116, 1117, 1180, 1182, 1305, 1336], "deploi": [164, 168], "deprec": [38, 134, 135, 161, 162, 163, 164, 168, 171, 179, 235, 277, 295, 300, 319, 420, 455, 476, 571, 608, 650, 658, 717, 726, 734, 735, 802, 817, 834, 856, 869, 882, 888, 889, 894, 916, 1020, 1028, 1029, 1059, 1087, 1186, 1222, 1230, 1286, 1305], "depth": 131, "desc": [922, 1314, 1317, 1321, 1323], "descend": [50, 260, 265, 319, 344, 364, 539, 604, 637, 646, 647, 715, 727, 802, 870, 874, 916, 941, 961, 1106, 1146, 1182, 1208, 1219, 1294, 1305], "describ": [164, 208, 319, 916, 1305], "descript": [210, 319, 842, 916, 1321, 1322, 1323, 1324, 1325, 1327, 1328, 1329, 1331, 1334, 1335], "deseri": [131, 259, 319, 476, 567, 802, 869, 916], "deserializ": [189, 259, 319, 408, 567, 802, 829, 869, 916], "design": [276, 281, 319], "desir": [164, 224, 319, 368, 455, 544, 846, 916, 965, 1059, 1151], "destin": 137, "detail": [55, 122, 136, 137, 157, 159, 177, 210, 319, 444, 708, 802, 842, 891, 916, 1048, 1288, 1305, 1336], "determin": [14, 36, 39, 45, 50, 58, 86, 131, 134, 135, 136, 139, 145, 146, 148, 153, 155, 180, 184, 203, 210, 222, 223, 229, 251, 282, 283, 289, 319, 388, 425, 438, 485, 544, 564, 601, 607, 609, 644, 652, 665, 687, 688, 690, 691, 710, 745, 774, 777, 793, 802, 818, 825, 826, 833, 842, 865, 879, 885, 916, 1025, 1042, 1090, 1151, 1180, 1186, 1187, 1217, 1224, 1259, 1262, 1263, 1305], "dev": [176, 925, 1199, 1305], "develop": [137, 164, 168], "deviat": [267, 319, 462, 627, 628, 649, 783, 802, 876, 916, 1069, 1221, 1305, 1322], "devic": [276, 319, 823, 891, 916, 1284, 1305], "devicememoryresourc": 891, "dfdf0": [236, 319, 857, 916, 1320], "df1": [50, 58, 157, 158, 195, 198, 236, 266, 291, 319, 857, 916, 1317, 1319, 1320, 1321, 1333], "df2": [50, 58, 157, 158, 195, 198, 291, 319, 1317, 1319, 1320, 1321, 1333], "df3": [50, 319], "df4": 319, "df5": 319, "df6": 319, "df_a": 1333, "df_a1": 58, "df_a2": 58, "df_a3": 58, "df_agg_nuniqu": [240, 319], "df_b": 1333, "df_current_batch": 135, "df_d1": 58, "df_d2": 58, "df_from_str_repr": [275, 319], "df_h1": 58, "df_h2": 58, "df_new_grid": [488, 802], "df_nuniqu": [240, 319], "df_original_grid": [488, 802], "df_panda": 1315, "df_pd": 122, "df_tempor": [617, 619, 621, 623, 625, 628, 630, 632, 802], "dfi": [122, 177], "diagon": [58, 283, 319], "diagonal_relax": 58, "dict": [30, 36, 37, 38, 39, 40, 44, 45, 46, 47, 48, 51, 53, 55, 121, 123, 124, 125, 126, 127, 131, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 164, 202, 222, 242, 248, 252, 253, 254, 272, 273, 276, 281, 283, 319, 802, 863, 916, 920, 921, 922, 1079, 1305, 1318], "dictat": [435, 802, 920, 1039], "dictionari": [30, 36, 39, 40, 44, 45, 46, 47, 48, 55, 80, 121, 123, 124, 125, 127, 131, 134, 135, 136, 137, 141, 143, 144, 146, 147, 148, 151, 152, 153, 222, 242, 252, 253, 254, 272, 273, 276, 281, 319, 916, 921], "did": [414, 1014], "diff": [293, 319, 445, 446, 447, 448, 449, 450, 451, 533, 802, 886, 916, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1140, 1305], "differ": [39, 44, 92, 95, 116, 134, 139, 154, 157, 159, 173, 192, 198, 210, 211, 222, 224, 244, 251, 253, 254, 273, 276, 277, 283, 319, 409, 421, 435, 436, 438, 444, 453, 459, 474, 483, 514, 533, 535, 544, 553, 586, 587, 589, 594, 608, 609, 687, 713, 751, 754, 760, 802, 831, 832, 834, 842, 846, 865, 916, 922, 989, 1009, 1021, 1039, 1040, 1042, 1048, 1057, 1064, 1073, 1088, 1121, 1140, 1142, 1159, 1168, 1169, 1171, 1186, 1187, 1259, 1305, 1329, 1331, 1333], "digit": [66, 598, 633, 634, 660, 802, 922, 1202, 1203, 1225, 1232, 1305, 1336], "dimens": [121, 123, 125, 127, 143, 144, 152, 319, 610, 802, 916, 1188, 1286, 1305], "dimension": [123, 125, 127, 277, 319, 916, 1305], "direct": [39, 137, 146, 150, 153, 262, 276, 287, 319, 363, 537, 638, 802, 871, 916, 960, 1144, 1210, 1305], "directli": [6, 30, 39, 57, 136, 164, 168, 173, 254, 276, 319, 460, 462, 463, 609, 777, 802, 824, 916, 1067, 1069, 1070, 1187, 1284, 1305, 1317, 1333, 1336], "directori": [39, 44, 146, 148, 151, 153, 319, 920], "dirpath": [34, 36, 40, 41, 44, 148, 319], "disabl": [44, 48, 49, 88, 89, 146, 151, 165, 222, 319, 823, 916], "disable_string_cach": 89, "disallow": 164, "discard": [201, 319, 470, 802, 838, 916, 1077, 1305], "disco": [662, 664, 1234, 1236], "discont": [662, 664, 1234, 1236], "discourag": [553, 802], "discoveri": [244, 319], "discret": [406, 409, 457, 485, 514, 533, 601, 802, 1007, 1009, 1062, 1090, 1121, 1140, 1180, 1305], "disk": [44, 45, 46, 47, 48, 140, 319, 568, 872, 916], "dispatch": 922, "displai": [7, 10, 11, 12, 13, 17, 18, 19, 23, 24, 25, 39, 188, 208, 319, 828, 834, 916], "distanc": [225, 319, 485, 802, 847, 916, 1090, 1305], "distinct": [39, 168, 242, 244, 297, 319, 369, 493, 496, 545, 604, 613, 748, 802, 966, 1098, 1101, 1152, 1182, 1191, 1305, 1322, 1332, 1334, 1336], "distinct_count": [44, 48, 319, 916], "distinguish": [444, 1048], "distribut": [502, 644, 802, 1109, 1217, 1305], "div": 1326, "divid": [20, 406, 439, 452, 460, 462, 463, 474, 502, 601, 802, 1007, 1043, 1056, 1067, 1069, 1070, 1109, 1180, 1305, 1322, 1327], "divis": [474, 711, 802, 1327], "divisor": [267, 290, 319, 540, 546, 627, 628, 631, 632, 649, 716, 736, 778, 779, 783, 791, 802, 876, 884, 916, 1199, 1201, 1221, 1295, 1305], "dl": [281, 319], "do": [1, 39, 45, 46, 47, 48, 50, 56, 57, 123, 124, 127, 134, 146, 148, 153, 157, 158, 159, 160, 178, 188, 190, 198, 221, 224, 225, 244, 248, 271, 283, 287, 319, 322, 405, 413, 516, 552, 673, 674, 682, 683, 684, 734, 774, 777, 793, 802, 819, 823, 824, 828, 830, 834, 846, 847, 852, 861, 863, 872, 891, 916, 922, 1006, 1013, 1073, 1123, 1245, 1246, 1254, 1255, 1256, 1289, 1305, 1310], "do_polars_oper": 29, "do_someth": 136, "do_various_th": 173, "doc": [38, 40, 41, 137, 140, 142, 157, 159, 175, 176, 186, 319, 924, 925], "document": [32, 92, 137, 175, 319, 323, 441, 444, 668, 687, 689, 690, 694, 798, 891, 924, 989, 1045, 1048, 1240, 1259, 1261, 1262, 1266], "doe": [10, 36, 38, 45, 50, 58, 110, 121, 123, 124, 125, 127, 128, 134, 135, 136, 137, 138, 139, 143, 144, 148, 149, 152, 154, 183, 198, 201, 205, 210, 211, 223, 224, 252, 253, 254, 284, 293, 296, 319, 322, 323, 455, 470, 474, 483, 544, 553, 652, 662, 664, 675, 683, 684, 713, 798, 802, 822, 823, 828, 838, 842, 846, 852, 880, 886, 890, 916, 996, 1059, 1073, 1077, 1088, 1212, 1224, 1234, 1236, 1247, 1305, 1310, 1328], "doesn": [38, 134, 148, 210, 225, 319, 457, 802, 842, 847, 916, 1062, 1305], "dog": [651, 693, 696, 733, 1223, 1265, 1268], "doi": 1329, "dollar": [673, 674, 1245, 1246], "domain": [1, 660, 1232], "don": [58, 210, 225, 229, 284, 287, 319, 405, 516, 553, 594, 802, 842, 847, 880, 916, 922, 1006, 1123, 1159, 1305], "done": [135, 154, 173, 179, 225, 319, 334, 335, 594, 802, 817, 820, 847, 916, 932, 1305], "dot": [50, 568, 798, 802, 872, 916, 1305], "doubl": [278, 319, 673, 674, 1245, 1246], "dow": 1329, "down": [148, 151, 152, 153, 154, 181, 319, 389, 473, 802, 1080, 1305], "download": [144, 148, 151, 152, 568, 872, 916], "downstream": [277, 319, 637, 802, 1208, 1305], "dr": 150, "drago": [665, 1237], "dragon": 665, "dragonfr": 1237, "dragonfruit": [665, 677, 688, 1237, 1249, 1260], "dramat": 139, "draw": [20, 25, 164, 168, 1336], "drawback": 798, "drawfn": 1336, "drawing_charact": 20, "dremio": 136, "driver": [37, 136, 137, 319], "drop": [1, 124, 191, 192, 193, 229, 284, 293, 319, 409, 411, 412, 514, 515, 601, 802, 831, 832, 880, 886, 916, 1009, 1011, 1012, 1121, 1122, 1180, 1305, 1332], "drop_dupl": [284, 319, 880, 916], "drop_empty_row": [139, 145], "drop_first": [274, 319, 1281, 1305], "drop_in_plac": 319, "drop_nan": [319, 412, 802, 916, 1012, 1305], "drop_nul": [319, 411, 802, 916, 1011, 1305], "dset": 154, "dst": [439, 452, 1043, 1056], "dst_offset": [414, 1014], "dt": [1, 39, 50, 139, 145, 251, 319, 614, 748, 802, 811, 865, 916, 922, 1313, 1328, 1329], "dt1": 1328, "dt2": 1328, "dtm": [39, 319, 417, 444, 922, 1017, 1048, 1328], "dtm_iso": 444, "dtm_iso_strict": 444, "dtype": [10, 39, 49, 53, 59, 65, 80, 88, 89, 99, 121, 123, 125, 127, 128, 134, 135, 136, 137, 139, 143, 144, 145, 148, 152, 161, 162, 163, 164, 168, 175, 177, 181, 184, 210, 225, 251, 275, 276, 277, 278, 281, 287, 296, 319, 389, 390, 391, 392, 403, 404, 444, 455, 464, 477, 511, 519, 550, 552, 553, 560, 599, 606, 607, 614, 639, 641, 667, 687, 704, 708, 714, 724, 731, 750, 754, 758, 759, 761, 762, 763, 764, 774, 777, 784, 793, 802, 820, 825, 842, 847, 865, 890, 916, 921, 922, 924, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 984, 985, 986, 987, 988, 989, 994, 1004, 1005, 1008, 1009, 1048, 1059, 1066, 1096, 1114, 1115, 1118, 1126, 1150, 1157, 1159, 1178, 1189, 1211, 1214, 1239, 1259, 1276, 1283, 1284, 1286, 1287, 1288, 1289, 1293, 1305, 1333, 1336], "dtype_format": [39, 319], "dtypekind": 177, "dtypelik": [175, 924], "dtypeoper": [1, 53], "dubiou": 92, "due": [210, 225, 251, 254, 289, 319, 330, 422, 435, 439, 452, 577, 578, 580, 582, 584, 585, 614, 617, 619, 621, 623, 625, 628, 630, 632, 729, 743, 744, 746, 747, 789, 790, 802, 820, 842, 847, 865, 916, 1022, 1039, 1043, 1056], "dummi": [274, 319, 1281, 1305], "duplic": [50, 97, 217, 224, 225, 226, 284, 288, 319, 330, 491, 577, 601, 802, 846, 847, 848, 880, 883, 916, 1095, 1180, 1305, 1334], "duplicateerror": [601, 802, 1180, 1305], "dur": [226, 319, 848, 916], "durat": [173, 225, 289, 319, 414, 422, 444, 445, 446, 447, 448, 449, 450, 451, 455, 461, 708, 743, 744, 746, 747, 789, 790, 802, 847, 916, 921, 922, 1014, 1022, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1059, 1068, 1286, 1288, 1305], "dure": [49, 96, 134, 135, 148, 173, 198, 319, 1073, 1305], "dutch": [413, 729, 1013], "dynam": [210, 319, 368, 544, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 802, 842, 916, 920, 965, 1151], "dynamicgroupbi": [210, 319], "e": [10, 34, 36, 38, 40, 41, 44, 45, 122, 131, 134, 140, 142, 146, 151, 153, 154, 166, 189, 201, 208, 212, 221, 228, 270, 271, 277, 287, 319, 328, 408, 457, 461, 464, 490, 547, 553, 558, 559, 560, 561, 562, 564, 565, 566, 568, 569, 570, 639, 644, 663, 683, 684, 695, 750, 764, 781, 792, 802, 829, 838, 850, 863, 916, 922, 1062, 1068, 1094, 1217, 1235, 1267, 1305, 1323, 1328, 1336], "e101": [39, 319], "e_filt": [564, 566], "e_sum_ov": [564, 566], "e_sum_slic": [564, 566], "each": [36, 39, 45, 50, 59, 66, 76, 135, 136, 139, 144, 152, 157, 158, 159, 160, 162, 185, 187, 194, 201, 208, 209, 210, 223, 225, 229, 242, 244, 251, 253, 255, 276, 281, 285, 288, 289, 297, 298, 300, 302, 304, 305, 313, 319, 344, 388, 391, 392, 406, 439, 452, 470, 493, 496, 522, 525, 532, 542, 549, 553, 601, 604, 612, 613, 620, 624, 635, 640, 647, 660, 664, 665, 669, 670, 677, 679, 680, 688, 695, 710, 724, 727, 733, 758, 759, 784, 792, 802, 823, 826, 827, 833, 838, 842, 847, 861, 865, 881, 883, 892, 894, 896, 898, 899, 907, 916, 941, 987, 988, 993, 1007, 1043, 1056, 1098, 1101, 1129, 1132, 1139, 1149, 1180, 1182, 1190, 1191, 1204, 1213, 1232, 1236, 1237, 1241, 1242, 1249, 1251, 1252, 1260, 1267, 1275, 1305, 1322, 1333, 1334, 1336], "eager": [210, 225, 244, 287, 319, 415, 418, 421, 423, 432, 433, 435, 436, 438, 439, 443, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 617, 619, 621, 623, 625, 628, 630, 632, 724, 728, 743, 744, 746, 747, 754, 758, 759, 774, 777, 780, 781, 784, 789, 790, 793, 801, 802, 842, 847, 852, 916, 1014, 1015, 1018, 1021, 1022, 1023, 1024, 1029, 1030, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1047, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1333], "eagerli": [544, 1314], "ear": [677, 688, 1249], "earlier": [225, 319, 847, 916], "earliest": [210, 319, 438, 687, 690, 745, 842, 908, 916, 1042, 1259, 1262], "easi": 173, "easiest": 178, "easili": [50, 257, 281, 293, 298, 319, 784, 798, 867, 886, 892, 916], "east": [68, 153, 226, 319, 848, 916], "ebf1d": [39, 319], "eee": [1, 39, 319, 922], "ef": 674, "effect": [39, 203, 210, 319, 422, 474, 553, 579, 581, 583, 734, 802, 842, 889, 890, 916, 1014, 1022], "effici": [122, 136, 221, 223, 319, 552, 802], "efgh": 1328, "eg": [17, 25, 39, 58, 137, 173, 276, 319, 439, 687, 690, 711, 802, 922, 1259, 1262], "egnaro": 1328, "either": [80, 164, 220, 224, 225, 226, 242, 251, 252, 276, 277, 319, 461, 552, 599, 601, 614, 687, 719, 727, 731, 784, 802, 823, 846, 847, 848, 850, 865, 916, 920, 922, 1068, 1178, 1180, 1259, 1305, 1318, 1336], "element": [13, 14, 25, 159, 160, 163, 166, 178, 180, 187, 220, 244, 252, 265, 267, 282, 290, 319, 336, 337, 338, 339, 340, 341, 352, 353, 387, 388, 393, 396, 397, 398, 399, 401, 402, 403, 404, 405, 411, 412, 465, 466, 470, 483, 494, 505, 513, 515, 516, 517, 520, 525, 533, 534, 535, 536, 540, 546, 548, 549, 552, 553, 594, 595, 604, 607, 615, 616, 618, 620, 622, 624, 626, 627, 629, 631, 636, 641, 642, 643, 647, 648, 649, 679, 680, 691, 706, 707, 709, 710, 716, 727, 736, 778, 779, 783, 791, 802, 818, 827, 874, 876, 879, 884, 916, 933, 934, 935, 936, 937, 938, 949, 950, 983, 991, 994, 997, 998, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1011, 1012, 1071, 1072, 1077, 1078, 1089, 1099, 1108, 1110, 1112, 1113, 1120, 1122, 1123, 1124, 1127, 1132, 1140, 1141, 1142, 1143, 1155, 1156, 1159, 1175, 1182, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1206, 1214, 1215, 1216, 1220, 1221, 1251, 1252, 1263, 1277, 1278, 1279, 1283, 1290, 1291, 1295, 1305, 1322, 1323], "elementwis": [552, 594, 615, 616, 618, 620, 622, 624, 627, 629, 631, 802, 1192, 1193, 1194, 1195, 1196, 1197, 1199, 1200, 1201, 1305], "elif": 792, "elig": [852, 916], "elimin": [502, 802, 1109, 1305], "elis": [236, 319, 857, 916], "ellips": 20, "ellipsi": [208, 319], "elppa": 1328, "els": [135, 792], "email": [660, 1232], "email_part": [660, 1232], "emphas": [319, 323], "emploi": 922, "empti": [13, 34, 36, 45, 101, 124, 134, 135, 139, 145, 148, 182, 183, 210, 235, 286, 319, 650, 658, 762, 780, 821, 822, 842, 856, 882, 916, 922, 994, 996, 1078, 1096, 1110, 1222, 1230, 1305], "en": [20, 39, 319], "enabl": [28, 29, 44, 48, 49, 88, 89, 138, 146, 149, 151, 153, 157, 158, 159, 160, 172, 175, 257, 278, 293, 319, 331, 333, 608, 609, 637, 652, 662, 664, 675, 715, 798, 802, 823, 867, 886, 916, 924, 929, 930, 1186, 1187, 1208, 1224, 1234, 1236, 1247, 1287, 1294, 1305], "enable_string_cach": 88, "enclos": [476, 802], "encod": [62, 68, 79, 131, 134, 135, 148, 274, 319, 322, 373, 476, 612, 654, 699, 802, 969, 1190, 1226, 1281, 1305, 1310], "encount": [112, 134, 135, 148, 210, 319, 586, 587, 667, 668, 734, 738, 752, 802, 842, 916, 1168, 1169, 1239, 1240, 1305], "end": [36, 39, 45, 134, 135, 148, 210, 244, 319, 372, 375, 377, 414, 439, 464, 538, 651, 656, 660, 665, 671, 677, 681, 682, 683, 686, 724, 729, 742, 743, 744, 745, 746, 747, 750, 758, 759, 789, 790, 792, 798, 802, 842, 861, 916, 922, 971, 1014, 1043, 1106, 1145, 1228, 1232, 1237, 1243, 1249, 1253, 1254, 1255, 1260, 1305, 1328], "endpoint": [406, 601, 802, 1007, 1180, 1305], "ends_a": 1328, "ends_in_digit": 1328, "ends_with": [372, 377, 651, 681, 922, 1253, 1326], "ends_with_expr": 375, "ends_with_lit": 375, "engin": [14, 37, 136, 137, 139, 170, 209, 224, 229, 277, 284, 305, 319, 552, 781, 802, 823, 841, 846, 852, 856, 880, 891, 899, 913, 916, 1159, 1286, 1305, 1317, 1333], "engine_opt": [37, 139, 319], "enginetyp": [823, 916], "enough": [516, 644, 802, 1123, 1217, 1305], "ensur": [10, 39, 137, 163, 166, 175, 201, 209, 242, 252, 277, 319, 490, 552, 802, 838, 841, 852, 891, 916, 920, 922, 924, 1286, 1305], "enter": 173, "entir": [39, 56, 57, 139, 145, 319, 823, 824, 916], "entri": [173, 319, 916, 921, 1333], "entropi": [802, 1305], "enumer": [68, 126, 134, 135, 139, 145, 148, 223, 319], "env": [4, 169], "env_onli": 30, "environ": [4, 30, 36, 40, 44, 45, 46, 47, 48, 144, 146, 148, 151, 152, 153, 167, 170, 276, 319, 916], "eol_char": [134, 135, 148], "eparg": 1328, "epoch": [64, 65, 754, 1329], "epoch_": [423, 1023], "epoch_n": [423, 1023], "epochtimeunit": [423, 754, 1023], "eq": [201, 319, 459, 470, 802, 838, 916, 1064, 1305], "eq_miss": [802, 1171, 1305], "equal": [49, 89, 134, 135, 148, 157, 158, 159, 160, 210, 225, 226, 236, 265, 319, 406, 452, 458, 459, 479, 504, 544, 589, 601, 607, 615, 616, 618, 620, 622, 624, 627, 629, 631, 647, 671, 672, 675, 697, 727, 778, 779, 792, 798, 802, 842, 847, 848, 857, 874, 916, 1007, 1043, 1064, 1151, 1171, 1180, 1192, 1193, 1194, 1195, 1196, 1197, 1199, 1200, 1201, 1243, 1244, 1247, 1269, 1305, 1322, 1325, 1336], "equival": [39, 121, 123, 124, 125, 127, 143, 144, 152, 210, 220, 240, 319, 328, 332, 392, 458, 459, 461, 474, 479, 481, 504, 551, 573, 575, 588, 589, 590, 593, 599, 670, 693, 695, 696, 703, 711, 718, 802, 842, 916, 988, 1063, 1064, 1068, 1083, 1085, 1108, 1111, 1158, 1170, 1171, 1242, 1265, 1267, 1268, 1305, 1315, 1323], "err": 661, "error": [14, 38, 57, 107, 111, 113, 123, 124, 127, 134, 135, 146, 148, 153, 244, 252, 277, 319, 330, 355, 356, 373, 413, 519, 521, 523, 544, 577, 609, 651, 654, 659, 661, 663, 667, 668, 687, 689, 690, 694, 802, 820, 824, 891, 899, 916, 952, 953, 969, 1013, 1126, 1128, 1130, 1187, 1223, 1226, 1231, 1233, 1235, 1239, 1240, 1259, 1261, 1262, 1266, 1286, 1305, 1331], "escap": [90, 134, 135, 137, 148, 657, 673, 674, 1229, 1245, 1246], "esp": 14, "especi": [162, 613, 802, 916, 1191, 1305], "espresso": 922, "est": 746, "establish": [136, 173], "estim": [134, 135, 179, 196, 319, 335, 462, 463, 502, 723, 802, 817, 916, 932, 1066, 1069, 1070, 1109, 1305], "estimated_s": [319, 1305], "etc": [21, 38, 39, 134, 138, 139, 140, 142, 149, 150, 319, 553, 802, 920, 922, 1205, 1207, 1305, 1329], "eu": [149, 150], "eur": [208, 319, 1336], "europ": [418, 422, 438, 1018, 1022, 1042], "eval": [275, 319, 552, 553, 749, 802, 1159, 1283, 1305], "evalu": [45, 46, 47, 48, 153, 199, 201, 225, 319, 332, 345, 347, 348, 379, 380, 381, 382, 384, 385, 405, 470, 487, 507, 508, 544, 593, 594, 719, 721, 724, 728, 743, 744, 746, 747, 749, 758, 759, 774, 777, 780, 784, 789, 790, 792, 793, 802, 823, 838, 844, 846, 847, 916, 942, 944, 945, 975, 976, 977, 978, 980, 981, 1006, 1077, 1114, 1115, 1296, 1305, 1325], "even": [36, 45, 134, 224, 319, 461, 598, 601, 802, 846, 916, 922, 1068, 1180, 1305], "evenli": [210, 319, 842, 916], "event": [57, 824, 916], "eventu": [37, 319], "ever": [594, 802], "everi": [14, 36, 45, 134, 135, 139, 145, 148, 204, 210, 273, 289, 319, 347, 348, 349, 350, 353, 355, 361, 401, 402, 403, 404, 405, 439, 452, 466, 478, 509, 510, 514, 517, 520, 521, 522, 530, 533, 538, 542, 613, 658, 738, 739, 802, 840, 842, 916, 944, 945, 946, 947, 950, 952, 958, 1002, 1003, 1004, 1005, 1006, 1043, 1056, 1072, 1082, 1116, 1117, 1121, 1124, 1127, 1128, 1129, 1137, 1140, 1145, 1149, 1191, 1230, 1305], "everybodi": [652, 675, 1224, 1247], "everyth": 922, "ew": [460, 462, 463, 802, 1067, 1069, 1070, 1305], "ewm_mean": [802, 1305], "ewm_mean_bi": [802, 1305], "ewm_std": [802, 1305], "ewm_var": [802, 1305], "ewma": [461, 802, 1068, 1305], "exact": [159, 162, 164, 168, 225, 263, 319, 335, 474, 658, 685, 686, 687, 689, 690, 711, 802, 847, 916, 1230, 1259, 1261, 1262], "exactli": [123, 124, 127, 157, 158, 159, 160, 163, 164, 168, 319, 679, 680, 685, 686, 748, 916, 1212, 1251, 1252, 1257, 1258, 1305], "exampl": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 58, 59, 68, 76, 80, 88, 89, 93, 96, 97, 98, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 134, 135, 136, 137, 138, 139, 143, 144, 145, 148, 149, 150, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 169, 170, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 259, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 319, 322, 323, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 776, 777, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 798, 802, 814, 817, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 888, 889, 890, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 916, 920, 921, 926, 927, 928, 929, 930, 931, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1079, 1080, 1081, 1082, 1084, 1086, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1272, 1273, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1305, 1310, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1325, 1327, 1328, 1329, 1330, 1331, 1333, 1334, 1335], "exc_tb": 1333, "exc_typ": 1333, "exc_val": 1333, "exce": [208, 319], "excel": [35, 39, 133, 139, 319, 814], "excelread": 139, "excelspreadsheetengin": 139, "except": [0, 190, 205, 212, 225, 228, 248, 270, 319, 609, 665, 688, 750, 802, 814, 830, 847, 863, 916, 922, 984, 1089, 1113, 1187, 1237, 1260, 1277, 1286, 1305, 1332], "exclud": [164, 168, 210, 319, 388, 401, 404, 413, 490, 560, 710, 729, 798, 802, 842, 916, 922, 1013, 1094, 1305], "excluded_dtyp": [164, 165, 168], "exclus": [252, 319, 718, 724, 758, 759, 802], "execut": [38, 49, 58, 136, 137, 227, 266, 319, 408, 516, 715, 781, 802, 819, 823, 829, 852, 861, 875, 891, 916, 920, 1123, 1294, 1305, 1315, 1316, 1317, 1319, 1333, 1335], "execute_glob": 1333, "execute_opt": [136, 137], "exist": [1, 37, 38, 39, 50, 68, 97, 138, 146, 149, 153, 164, 190, 205, 244, 248, 283, 288, 293, 294, 319, 330, 372, 375, 377, 417, 438, 673, 674, 732, 802, 826, 830, 833, 863, 866, 883, 885, 886, 887, 916, 922, 1017, 1042, 1245, 1246, 1335], "existing_t": 1335, "existing_table_path": [38, 319], "exit": [49, 88, 173, 1320, 1333], "exp": [460, 461, 462, 463, 802, 1067, 1068, 1069, 1070, 1305, 1326], "exp_a": 1327, "expand": [134, 146, 148, 153, 466, 558, 562, 607, 701, 802, 920, 922, 1072, 1305], "expand_selector": 922, "expans": 698, "expect": [36, 40, 44, 45, 46, 47, 48, 66, 68, 71, 102, 110, 118, 134, 136, 144, 146, 148, 151, 152, 153, 158, 160, 319, 544, 553, 762, 802, 850, 852, 916], "expens": [134, 135, 144, 146, 148, 152, 153, 167, 169, 222, 229, 252, 253, 254, 283, 284, 319, 553, 802, 826, 828, 833, 866, 880, 885, 916, 1073, 1159, 1305, 1336], "experiment": [226, 281, 319, 848, 886, 916], "expiri": [36, 40, 44, 45, 46, 47, 48, 144, 146, 148, 151, 152, 153, 319, 916], "explain": [56, 57, 178, 227, 319, 823, 824, 916, 1332], "explainformat": [834, 916], "explicit": [39, 96, 136, 148, 162, 266, 288, 319, 444, 776, 875, 883, 916, 1048], "explicitli": [68, 96, 137, 162, 164, 173, 205, 224, 319, 608, 784, 802, 813, 846, 916, 1333], "explod": [319, 388, 472, 594, 610, 710, 802, 916, 920, 1188, 1305, 1323], "explor": [188, 319, 828, 916], "expon": [599, 802, 1178, 1305, 1327], "exponenti": [460, 461, 462, 463, 465, 599, 802, 1067, 1068, 1069, 1070, 1071, 1305, 1327], "export": [39, 40, 41, 176, 222, 223, 253, 254, 271, 273, 276, 319, 798, 922, 925, 1280, 1305], "expos": 814, "expr": [1, 50, 51, 52, 53, 54, 197, 199, 200, 224, 225, 226, 240, 244, 252, 257, 258, 276, 281, 293, 294, 319, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 793, 794, 795, 797, 798, 802, 803, 804, 807, 808, 809, 810, 811, 835, 836, 837, 846, 847, 848, 862, 867, 868, 886, 887, 916, 920, 922, 1006, 1013, 1016, 1017, 1031, 1039, 1063, 1064, 1068, 1075, 1076, 1081, 1083, 1085, 1111, 1123, 1129, 1145, 1149, 1158, 1170, 1171, 1223, 1228, 1235, 1253, 1305, 1331], "expr1": [1325, 1333], "expr2": [1325, 1333], "expr_unique_subset": [240, 319], "express": [0, 8, 45, 46, 47, 48, 56, 57, 161, 164, 168, 180, 197, 199, 201, 209, 215, 224, 225, 229, 240, 244, 252, 257, 258, 262, 265, 276, 281, 282, 293, 294, 296, 298, 305, 319, 328, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 344, 345, 349, 350, 351, 352, 353, 356, 367, 372, 373, 374, 375, 376, 377, 388, 391, 392, 395, 396, 397, 398, 399, 405, 406, 407, 408, 410, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 459, 461, 464, 466, 467, 469, 470, 474, 476, 477, 479, 480, 481, 482, 487, 490, 491, 492, 493, 494, 495, 496, 504, 505, 509, 510, 512, 513, 516, 517, 523, 525, 543, 544, 550, 551, 552, 553, 557, 558, 559, 560, 561, 562, 563, 564, 565, 567, 568, 569, 571, 573, 575, 577, 578, 580, 582, 584, 585, 588, 589, 591, 593, 594, 598, 599, 600, 601, 603, 607, 608, 609, 610, 612, 613, 635, 636, 637, 640, 642, 643, 645, 647, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 673, 674, 675, 677, 678, 679, 680, 688, 692, 702, 703, 706, 707, 710, 711, 712, 714, 715, 717, 718, 719, 720, 722, 724, 725, 726, 727, 728, 730, 731, 732, 733, 734, 735, 736, 738, 739, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 758, 759, 760, 761, 762, 763, 764, 766, 768, 771, 774, 776, 777, 778, 779, 780, 782, 784, 786, 788, 789, 790, 792, 793, 798, 801, 814, 818, 823, 824, 834, 835, 838, 841, 846, 847, 861, 867, 868, 871, 872, 874, 879, 886, 887, 888, 890, 892, 899, 916, 920, 922, 949, 995, 1006, 1013, 1016, 1017, 1031, 1048, 1063, 1064, 1068, 1074, 1083, 1085, 1094, 1111, 1120, 1123, 1158, 1159, 1170, 1171, 1186, 1187, 1206, 1210, 1223, 1224, 1225, 1229, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1239, 1240, 1245, 1246, 1247, 1260, 1264, 1305, 1323, 1325, 1327, 1328, 1332], "exprmetanamespac": [557, 563], "ext": 136, "extend": [0, 124, 291, 319, 467, 802, 814, 920, 931, 1074, 1305], "extend_const": [802, 1305], "extens": [278, 319, 1287, 1305], "extern": [888, 916], "extra": [38, 134, 135, 138, 140, 142, 146, 148, 149, 150, 153, 198, 210, 319, 802, 842, 916, 920, 1073, 1305], "extract": [128, 178, 266, 319, 416, 419, 421, 424, 426, 427, 428, 429, 430, 431, 434, 436, 437, 440, 442, 444, 445, 446, 447, 448, 449, 450, 451, 453, 454, 456, 598, 660, 661, 662, 667, 668, 677, 679, 802, 1016, 1019, 1020, 1021, 1024, 1026, 1030, 1031, 1032, 1034, 1035, 1038, 1040, 1041, 1044, 1046, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1057, 1058, 1060, 1232, 1233, 1234, 1239, 1240, 1249, 1326], "extract_mani": [664, 1236], "extract_numb": [598, 802], "extracted_nr": 660, "extrem": [467, 615, 802, 1074, 1192, 1305], "extrema": [639, 802, 1211, 1305], "f": [51, 135, 136, 201, 208, 223, 271, 277, 283, 287, 319, 328, 368, 376, 544, 639, 658, 687, 690, 732, 802, 838, 916, 922, 965, 1151, 1230, 1259, 1262, 1305, 1310, 1323], "f32": [1, 53, 181, 266, 275, 281, 319, 639, 781, 802, 820, 875, 916, 922, 1157, 1305, 1331], "f4": [277, 319], "f5ed2452": [39, 319], "f64": [7, 9, 10, 11, 15, 18, 19, 21, 22, 23, 24, 25, 27, 50, 52, 54, 58, 76, 122, 124, 143, 154, 161, 164, 181, 182, 183, 186, 188, 189, 190, 192, 194, 199, 200, 203, 207, 208, 209, 210, 215, 216, 224, 225, 231, 232, 233, 234, 238, 244, 245, 246, 264, 265, 267, 269, 281, 290, 293, 298, 301, 303, 306, 307, 308, 309, 311, 312, 319, 327, 330, 336, 337, 338, 339, 340, 341, 359, 365, 370, 376, 389, 393, 394, 396, 397, 398, 406, 407, 411, 412, 440, 457, 458, 459, 460, 461, 462, 463, 464, 465, 468, 469, 473, 474, 479, 481, 488, 489, 497, 498, 499, 500, 502, 504, 516, 527, 528, 540, 546, 547, 548, 549, 551, 554, 555, 556, 572, 575, 577, 586, 587, 588, 589, 595, 599, 601, 602, 603, 604, 608, 609, 615, 616, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 641, 642, 643, 644, 648, 649, 702, 706, 707, 711, 716, 725, 726, 730, 732, 734, 736, 749, 750, 764, 767, 768, 769, 781, 783, 791, 798, 802, 820, 821, 828, 830, 831, 836, 837, 841, 842, 845, 846, 847, 854, 855, 862, 874, 876, 884, 886, 888, 892, 895, 897, 900, 901, 902, 903, 905, 906, 916, 922, 933, 934, 935, 936, 937, 938, 956, 962, 967, 972, 991, 992, 997, 998, 999, 1007, 1008, 1011, 1012, 1044, 1067, 1068, 1069, 1070, 1071, 1075, 1080, 1090, 1092, 1093, 1123, 1134, 1135, 1147, 1153, 1154, 1155, 1156, 1175, 1178, 1180, 1182, 1187, 1192, 1194, 1195, 1197, 1198, 1199, 1201, 1202, 1203, 1214, 1215, 1216, 1220, 1278, 1279, 1293, 1305, 1314, 1322, 1323, 1327, 1330, 1333, 1336], "f_string": 753, "fa1e": [692, 1264], "face": [36, 40, 44, 45, 46, 47, 48, 144, 146, 148, 151, 152, 153, 319, 916], "facil": 136, "facilit": [184, 319], "factor": [460, 462, 463, 708, 802, 1067, 1069, 1070, 1288, 1305], "fail": [36, 37, 38, 40, 44, 45, 46, 47, 48, 122, 138, 140, 144, 146, 148, 149, 151, 152, 153, 177, 277, 284, 319, 345, 442, 544, 687, 689, 690, 694, 802, 880, 916, 1159, 1259, 1261, 1262, 1266, 1286, 1305, 1331], "fall": [153, 406, 601, 802, 823, 891, 916, 1007, 1180, 1305, 1322], "fals": [5, 7, 8, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 28, 30, 36, 38, 39, 44, 45, 46, 47, 48, 50, 56, 57, 58, 122, 123, 124, 126, 127, 128, 134, 135, 136, 138, 139, 140, 142, 144, 145, 146, 148, 149, 151, 152, 153, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 177, 180, 181, 182, 183, 188, 195, 203, 207, 208, 209, 210, 214, 215, 217, 218, 219, 222, 224, 225, 227, 232, 233, 239, 240, 242, 244, 245, 252, 253, 254, 255, 257, 260, 263, 265, 266, 269, 272, 274, 277, 278, 282, 283, 284, 288, 289, 291, 293, 301, 303, 306, 307, 309, 312, 319, 331, 332, 333, 344, 347, 348, 351, 355, 356, 364, 369, 372, 375, 377, 388, 389, 400, 401, 402, 403, 404, 405, 406, 413, 425, 440, 457, 458, 459, 460, 462, 463, 481, 482, 485, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 504, 507, 508, 512, 516, 519, 521, 523, 532, 539, 544, 545, 551, 552, 553, 557, 559, 560, 561, 563, 565, 568, 569, 588, 589, 591, 593, 596, 597, 601, 604, 615, 616, 618, 620, 622, 624, 626, 627, 629, 631, 635, 637, 639, 644, 646, 647, 650, 651, 652, 653, 656, 662, 663, 664, 666, 667, 673, 674, 675, 678, 679, 681, 687, 689, 690, 692, 710, 712, 715, 718, 719, 720, 721, 722, 724, 727, 728, 729, 733, 734, 737, 738, 743, 744, 746, 747, 758, 759, 762, 768, 774, 777, 780, 781, 784, 786, 789, 790, 792, 793, 802, 818, 820, 821, 822, 823, 824, 828, 834, 841, 842, 846, 847, 850, 852, 861, 867, 870, 872, 874, 875, 879, 880, 883, 886, 891, 895, 897, 900, 901, 903, 906, 916, 920, 922, 929, 930, 941, 944, 945, 948, 952, 953, 961, 966, 968, 969, 971, 973, 984, 986, 990, 993, 994, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1013, 1025, 1044, 1064, 1065, 1067, 1069, 1070, 1077, 1079, 1084, 1086, 1094, 1095, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1109, 1114, 1115, 1119, 1123, 1126, 1128, 1130, 1139, 1146, 1152, 1165, 1171, 1173, 1176, 1177, 1180, 1182, 1183, 1184, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1204, 1208, 1212, 1217, 1219, 1222, 1223, 1224, 1225, 1228, 1234, 1235, 1236, 1238, 1239, 1245, 1246, 1247, 1250, 1251, 1253, 1259, 1261, 1262, 1264, 1281, 1286, 1287, 1291, 1294, 1296, 1305, 1315, 1317, 1323, 1328, 1333], "far": [39, 319], "fashion": [224, 319, 834, 861, 872, 916], "fast": [44, 46, 48, 167, 169, 319, 467, 637, 802, 916, 920, 1074, 1208, 1305, 1336], "fast_executemani": [37, 319], "faster": [45, 46, 47, 48, 56, 57, 136, 139, 198, 277, 287, 319, 553, 713, 802, 823, 824, 834, 861, 872, 916, 1073, 1159, 1305], "fastexcel": [139, 156], "favor": [37, 319], "fay": 131, "feat1": [276, 281, 319], "feat2": [276, 281, 319], "feather": [40, 140, 151, 319, 814], "featur": [1, 44, 55, 66, 68, 71, 276, 281, 319], "feature_0": [888, 916], "feature_0_train": [888, 916], "feature_1": [888, 916], "feature_nam": [281, 319], "feb": [156, 1328], "februari": 1328, "fed": 683, "feel": [652, 675, 1224, 1247], "fetch": [130, 823, 916], "fetch_california_h": [281, 319], "few": [208, 319], "fewer": [665, 688, 916, 1237, 1260], "ff": 1322, "ff00": [692, 1264], "fff": 1, "ffff00": [373, 374, 654, 969, 970, 1226], "ffffff": [39, 319], "ffi": [196, 319, 1066, 1305], "fgg": 922, "fghi": 1328, "fh": 135, "fiction": 1314, "field": [35, 36, 38, 45, 80, 114, 117, 124, 285, 319, 368, 544, 552, 553, 579, 581, 583, 612, 660, 661, 667, 679, 680, 700, 701, 702, 708, 715, 738, 739, 763, 784, 802, 881, 916, 965, 1151, 1159, 1190, 1233, 1251, 1252, 1273, 1275, 1288, 1305, 1329], "field_0": [368, 544, 965, 1151], "field_1": [368, 544, 965, 1151], "field_2": [965, 1151], "field_n": [368, 544, 965, 1151], "field_nam": [553, 802, 1159, 1305], "figsiz": [568, 861, 872, 916], "figur": [568, 634, 802, 872, 916, 1203, 1305], "file": [2, 3, 5, 6, 32, 34, 35, 36, 40, 41, 42, 43, 44, 45, 46, 47, 48, 132, 133, 134, 135, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 189, 198, 259, 319, 408, 476, 567, 571, 802, 829, 869, 916, 920, 1073, 1305], "file_cache_ttl": [144, 148, 151, 152], "filenam": 140, "filesystem": [38, 138, 149, 150, 319], "fill": [50, 58, 182, 199, 200, 262, 287, 319, 323, 371, 401, 404, 468, 469, 475, 488, 489, 616, 618, 620, 622, 624, 627, 629, 631, 638, 753, 774, 777, 793, 802, 836, 837, 871, 888, 916, 1075, 1076, 1092, 1093, 1172, 1193, 1194, 1196, 1199, 1200, 1201, 1210, 1305], "fill_char": [671, 672, 1243, 1244], "fill_nan": [200, 319, 469, 802, 837, 916, 1076, 1305], "fill_nul": [50, 199, 319, 468, 802, 836, 888, 916, 1075, 1305], "fill_valu": [262, 287, 319, 638, 802, 871, 916, 1210, 1305], "fillnullstrategi": [200, 319, 469, 802, 837, 916, 1076, 1305], "film": 1314, "filter": [1, 45, 46, 47, 48, 51, 56, 57, 148, 149, 153, 154, 192, 193, 217, 218, 219, 244, 305, 319, 564, 566, 656, 681, 717, 742, 745, 752, 780, 781, 792, 802, 823, 824, 831, 832, 834, 844, 861, 872, 875, 899, 916, 922, 1207, 1305, 1321], "final": [13, 39, 50, 153, 225, 227, 319, 460, 462, 463, 802, 828, 847, 916, 920, 1067, 1069, 1070, 1305, 1334], "find": [58, 206, 319, 636, 651, 652, 664, 802, 1206, 1224, 1236, 1245, 1305], "find_pat": 663, "fine": [823, 913, 916], "finish": [198, 319, 1073, 1305], "finit": [492, 711, 734, 802, 1097, 1305], "first": [44, 50, 134, 135, 139, 140, 142, 145, 146, 148, 153, 157, 158, 159, 160, 178, 208, 210, 212, 224, 225, 228, 229, 239, 243, 244, 251, 270, 274, 275, 283, 284, 289, 296, 302, 319, 344, 346, 355, 405, 409, 433, 435, 439, 455, 474, 484, 493, 506, 514, 516, 521, 522, 544, 552, 553, 565, 574, 598, 599, 614, 636, 647, 651, 658, 659, 663, 665, 667, 668, 673, 674, 688, 695, 730, 731, 738, 752, 756, 792, 798, 802, 842, 843, 846, 847, 851, 860, 865, 880, 888, 890, 896, 916, 922, 941, 952, 1006, 1008, 1009, 1037, 1039, 1043, 1059, 1089, 1098, 1113, 1121, 1123, 1128, 1129, 1151, 1159, 1206, 1219, 1230, 1231, 1233, 1235, 1237, 1239, 1240, 1245, 1246, 1260, 1267, 1277, 1281, 1283, 1286, 1305, 1325, 1326, 1328, 1334, 1336], "first_column": [39, 319], "first_non_nul": [544, 1151], "first_part": [679, 680, 1251, 1252], "fisher": [502, 644, 802, 1109, 1217, 1305], "fit": [131, 222, 263, 287, 319, 639, 777, 802, 1211, 1212, 1305], "five": [280, 319, 1336], "fix": [10, 59, 68, 162, 455, 748, 1059], "flag": [55, 138, 149, 161, 277, 319, 637, 651, 659, 660, 663, 673, 674, 802, 834, 852, 916, 922, 1208, 1223, 1231, 1232, 1235, 1245, 1246, 1286, 1305, 1328], "flat": [131, 254, 319, 517, 610, 802, 1124, 1188, 1305], "flatten": 802, "flavour": [39, 136, 319], "flight": 136, "flight_sql": 136, "flightsql": 136, "float": [10, 11, 36, 39, 45, 69, 70, 134, 135, 148, 154, 157, 158, 159, 160, 161, 164, 168, 177, 188, 192, 196, 199, 225, 246, 255, 276, 277, 311, 319, 351, 394, 406, 411, 412, 440, 457, 458, 459, 460, 462, 463, 468, 473, 474, 479, 481, 488, 492, 495, 497, 498, 499, 500, 504, 512, 532, 547, 551, 554, 568, 572, 586, 587, 588, 589, 599, 601, 602, 615, 616, 618, 620, 622, 624, 625, 627, 629, 631, 633, 635, 641, 711, 775, 777, 802, 828, 831, 836, 847, 862, 872, 905, 916, 922, 948, 984, 992, 1007, 1008, 1010, 1011, 1012, 1044, 1062, 1066, 1067, 1069, 1070, 1075, 1080, 1090, 1109, 1119, 1139, 1154, 1168, 1169, 1178, 1179, 1180, 1181, 1192, 1193, 1194, 1195, 1196, 1197, 1199, 1200, 1201, 1202, 1204, 1207, 1214, 1217, 1221, 1276, 1286, 1295, 1305, 1333, 1336], "float16": [281, 319], "float32": [1, 10, 36, 45, 53, 181, 203, 275, 276, 277, 281, 319, 461, 802, 820, 916, 922, 1068, 1096, 1157, 1284, 1286, 1289, 1305], "float4": [266, 319, 781, 875, 916, 1331], "float64": [10, 36, 39, 45, 124, 134, 143, 161, 164, 184, 194, 196, 203, 256, 281, 293, 319, 336, 337, 338, 339, 340, 341, 376, 389, 396, 397, 398, 407, 440, 461, 464, 497, 498, 603, 642, 643, 706, 707, 750, 764, 774, 777, 793, 798, 802, 825, 833, 866, 886, 916, 921, 922, 1044, 1068, 1287, 1293, 1305], "float_list": 76, "float_precis": [9, 10, 27, 36, 39, 45, 319, 916], "float_scientif": [36, 45, 319, 916], "floatfmt": 11, "floor": [52, 474, 802, 1305, 1326], "floor_a": 1327, "floordiv": [711, 802], "fmt": [11, 225, 319, 487, 753, 802, 844, 847, 916], "fmt_number": [319, 323], "fmt_str_length": [12, 743, 744, 746, 747], "fmt_table_cell_list_len": 13, "fmt_titl": [39, 319], "fn": [738, 739, 752, 776], "foggi": [673, 674, 1245, 1246], "fold": [319, 565, 730, 738, 739, 776], "folder": 154, "follow": [39, 44, 55, 134, 135, 136, 138, 139, 145, 148, 149, 150, 210, 225, 229, 243, 251, 277, 289, 319, 435, 439, 452, 461, 552, 598, 599, 604, 614, 617, 619, 621, 623, 625, 626, 628, 630, 632, 641, 700, 711, 726, 743, 744, 746, 747, 764, 789, 790, 792, 794, 795, 797, 802, 803, 804, 807, 809, 810, 811, 842, 847, 860, 865, 916, 922, 1039, 1043, 1056, 1068, 1178, 1182, 1205, 1207, 1214, 1286, 1297, 1299, 1301, 1305, 1306, 1311, 1312, 1313, 1331, 1336], "font": [39, 319], "font_color": [39, 319], "font_siz": [39, 319], "foo": [34, 36, 38, 40, 41, 42, 43, 44, 131, 143, 144, 181, 184, 185, 186, 190, 191, 192, 193, 194, 195, 198, 201, 203, 205, 206, 207, 211, 212, 213, 214, 215, 216, 218, 224, 228, 229, 230, 231, 232, 233, 234, 237, 238, 241, 244, 246, 248, 249, 252, 255, 256, 257, 259, 261, 264, 267, 268, 269, 270, 271, 273, 274, 275, 277, 278, 279, 283, 284, 285, 290, 291, 292, 297, 319, 390, 406, 408, 435, 478, 484, 487, 506, 557, 559, 560, 561, 563, 564, 565, 566, 567, 568, 569, 570, 601, 610, 650, 653, 655, 658, 660, 661, 666, 676, 678, 680, 682, 683, 684, 685, 686, 693, 696, 705, 723, 734, 735, 736, 751, 755, 756, 757, 760, 761, 765, 767, 769, 770, 772, 773, 775, 780, 783, 787, 791, 792, 798, 802, 820, 825, 826, 830, 831, 832, 833, 838, 844, 845, 846, 859, 863, 866, 867, 880, 881, 885, 888, 916, 921, 922, 985, 1007, 1039, 1130, 1178, 1180, 1188, 1225, 1227, 1230, 1232, 1233, 1248, 1252, 1257, 1258, 1265, 1268, 1305, 1319, 1321, 1322, 1323, 1325, 1328, 1331], "foo1": 1328, "foo11": [203, 319], "foo_": [562, 678, 753], "foo_1": [274, 319], "foo_2": [274, 319], "foo_3_4": 1328, "foo_a": [244, 319], "foo_a_bar_1": 753, "foo_at_1": 1323, "foo_b": [244, 319], "foo_b_bar_2": 753, "foo_bar": [557, 563, 678, 762, 1319], "foo_bar2": [557, 563], "foo_bar_baz": 678, "foo_c_bar_3": 753, "foo_low": [693, 1328], "foo_mean": 1323, "foo_q25": 1322, "foo_q50": 1322, "foo_q75": 1322, "foo_std": 1322, "foo_strip": 682, "foo_strip_end": 683, "foo_strip_start": 684, "foo_sum": [1322, 1323], "foo_uniqu": 1323, "foo_upp": [696, 1328], "foo_var": 1322, "foobar": [685, 686, 1257, 1258, 1328], "foobarbar": [686, 1258], "foofoobar": [685, 1257], "foral": [460, 462, 463, 802, 1067, 1069, 1070, 1305], "forc": [225, 229, 277, 305, 319, 544, 846, 847, 899, 916, 1159, 1286, 1305], "force_parallel": [225, 319, 846, 847, 916], "form": [36, 45, 121, 123, 124, 125, 127, 143, 144, 152, 222, 253, 287, 319, 444, 595, 695, 802, 916, 1048, 1175, 1267, 1305, 1328], "format": [7, 11, 15, 16, 20, 35, 36, 39, 40, 41, 44, 45, 92, 132, 134, 135, 136, 139, 140, 142, 145, 148, 154, 176, 189, 197, 208, 222, 235, 244, 253, 254, 259, 273, 286, 317, 319, 323, 408, 439, 441, 444, 567, 568, 569, 687, 689, 690, 694, 748, 802, 829, 834, 835, 856, 869, 882, 916, 925, 1045, 1048, 1259, 1261, 1262, 1266, 1304, 1328, 1329], "formul": [192, 319, 831, 832, 916], "formula": [39, 319, 457, 802, 1062, 1305], "fortran": [276, 277, 319], "forward": [200, 225, 262, 319, 363, 413, 432, 469, 475, 537, 638, 802, 837, 847, 871, 916, 960, 1013, 1036, 1076, 1144, 1210, 1305], "forward_fil": [289, 319, 371, 401, 404, 638, 802], "found": [20, 36, 39, 45, 93, 114, 117, 124, 128, 146, 153, 194, 266, 319, 636, 663, 668, 685, 686, 687, 690, 802, 875, 916, 1206, 1235, 1240, 1257, 1258, 1259, 1262, 1305, 1317, 1333], "four": [280, 319, 1333], "fourth": [502, 802, 1109, 1305], "frac": [460, 461, 462, 463, 644, 802, 1067, 1068, 1069, 1070, 1217, 1305], "fraction": [36, 45, 157, 158, 159, 160, 255, 319, 440, 532, 595, 635, 687, 690, 802, 916, 1044, 1139, 1175, 1204, 1259, 1262, 1305], "fragment": 1333, "frame": [36, 37, 39, 45, 50, 57, 58, 124, 135, 139, 145, 157, 158, 181, 182, 188, 222, 223, 227, 229, 236, 240, 243, 252, 253, 254, 266, 281, 287, 288, 319, 444, 781, 820, 821, 828, 857, 860, 875, 883, 916, 922, 994, 1048, 1305, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1332, 1336], "frame_data": [1316, 1319], "frameinittyp": [319, 916], "frametyp": [50, 1333], "framework": [244, 286, 319, 882, 916], "freedom": [267, 290, 319, 540, 546, 627, 628, 631, 632, 649, 716, 736, 778, 779, 783, 791, 802, 876, 884, 916, 1199, 1201, 1221, 1295, 1305], "freeli": [781, 875, 916, 922], "freez": [39, 319], "freeze_pan": [39, 319], "frequenc": [289, 319, 715, 802, 1294, 1305], "frequent": [1205, 1207, 1305], "fri": [319, 322], "fridai": [210, 319, 413, 441, 729, 842, 916, 1013, 1045, 1048], "friendship": 12, "from": [2, 3, 4, 5, 6, 10, 16, 28, 32, 35, 36, 38, 39, 40, 44, 45, 46, 47, 48, 50, 58, 68, 80, 92, 96, 112, 116, 121, 122, 123, 124, 125, 126, 127, 128, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 178, 181, 188, 189, 190, 196, 198, 201, 202, 208, 210, 222, 223, 224, 225, 226, 227, 235, 244, 248, 251, 252, 254, 255, 257, 258, 266, 274, 281, 283, 284, 286, 287, 288, 289, 295, 319, 322, 323, 368, 376, 406, 407, 408, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 459, 461, 464, 474, 476, 488, 502, 520, 532, 544, 553, 561, 586, 587, 589, 594, 595, 598, 601, 603, 614, 615, 617, 619, 621, 623, 625, 628, 630, 632, 635, 647, 659, 660, 665, 667, 677, 682, 683, 684, 685, 686, 687, 688, 689, 690, 694, 713, 725, 726, 729, 730, 742, 743, 744, 745, 746, 747, 748, 762, 777, 781, 788, 789, 790, 798, 801, 802, 820, 828, 829, 830, 838, 842, 846, 847, 848, 856, 863, 865, 867, 868, 875, 880, 882, 883, 888, 889, 916, 922, 965, 972, 1007, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1064, 1066, 1068, 1073, 1109, 1127, 1139, 1151, 1168, 1169, 1171, 1172, 1175, 1180, 1192, 1204, 1231, 1232, 1237, 1239, 1249, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1266, 1281, 1296, 1305, 1314, 1315, 1316, 1317, 1322, 1323, 1324, 1325, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336], "from_arrai": 781, "from_arrow": 122, "from_json": 802, "from_panda": 122, "from_repr": [275, 319, 1283, 1305], "fromkei": [51, 53], "front": [210, 319, 842, 916], "fruit": [272, 319, 611, 656, 681, 688, 802, 1228, 1253, 1260], "fruits_revers": [611, 802], "fsspec": [134, 135, 140, 142, 149, 150, 156], "fsspecfileio": 150, "full": [11, 44, 48, 50, 58, 65, 92, 124, 127, 134, 135, 136, 138, 143, 144, 146, 148, 149, 150, 152, 153, 154, 224, 288, 319, 665, 667, 673, 674, 687, 688, 689, 690, 694, 743, 744, 846, 852, 883, 916, 922, 1237, 1239, 1245, 1246, 1259, 1260, 1261, 1262, 1266, 1305, 1321, 1336], "full_sent": 733, "fulli": [166, 243, 255, 277, 319], "funcnam": [39, 319], "function": [0, 31, 32, 33, 36, 39, 40, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 66, 68, 71, 88, 89, 119, 122, 126, 128, 131, 132, 134, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 151, 152, 153, 154, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 171, 173, 175, 177, 180, 186, 189, 196, 203, 226, 229, 235, 243, 244, 248, 266, 276, 277, 278, 281, 282, 283, 286, 287, 288, 305, 319, 322, 323, 331, 368, 387, 388, 405, 406, 408, 439, 460, 462, 463, 485, 544, 552, 553, 578, 579, 594, 598, 601, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 641, 644, 664, 708, 709, 710, 719, 723, 731, 735, 737, 738, 739, 751, 752, 754, 756, 757, 760, 763, 764, 767, 769, 772, 774, 776, 778, 779, 783, 787, 791, 793, 798, 802, 814, 818, 824, 829, 848, 852, 856, 860, 863, 875, 879, 882, 883, 890, 899, 916, 920, 924, 965, 983, 990, 1006, 1007, 1043, 1066, 1067, 1069, 1070, 1090, 1151, 1159, 1180, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1205, 1207, 1212, 1214, 1217, 1236, 1284, 1287, 1289, 1290, 1305, 1310, 1321, 1322, 1323, 1324, 1325, 1327, 1328, 1329, 1331, 1332, 1333, 1334, 1335, 1336], "function_nam": 920, "further": 798, "futur": [57, 177, 188, 224, 260, 319, 824, 828, 846, 870, 916], "g": [36, 45, 131, 134, 138, 140, 142, 149, 154, 166, 177, 189, 221, 277, 287, 319, 328, 408, 461, 464, 553, 639, 750, 802, 829, 863, 916, 1068, 1305, 1336], "g1": [470, 717, 802], "g2": [470, 717, 802], "g_1": [644, 802, 1217, 1305], "gag": 26, "gamma": [460, 462, 463, 802, 1067, 1069, 1070, 1305], "gantt": [861, 916], "gather": [135, 204, 319, 344, 478, 520, 727, 802, 840, 916, 941, 1082, 1127, 1305], "gather_everi": [319, 802, 916, 1305], "gb": [196, 319, 376, 1066, 1305], "gbp": 1336, "gc": [38, 138, 149, 150, 319], "gca": 26, "gcaacgcatata": 26, "gcp": [33, 36, 40, 44, 45, 46, 47, 48, 144, 146, 148, 150, 151, 152, 153, 319, 916], "gdp": [225, 319, 847, 916], "gdp2": [225, 319, 847, 916], "gdp_date": [225, 319, 847, 916], "ge": [802, 1305], "gener": [1, 131, 136, 137, 155, 161, 162, 163, 164, 165, 166, 168, 177, 184, 186, 244, 255, 274, 277, 283, 319, 532, 635, 640, 724, 743, 746, 758, 759, 761, 777, 789, 790, 802, 916, 984, 1139, 1204, 1213, 1281, 1305, 1336], "geq": [460, 462, 463, 802, 1067, 1069, 1070, 1305], "germani": [225, 319, 847, 916], "get": [50, 57, 68, 141, 147, 154, 178, 180, 184, 185, 194, 202, 205, 207, 210, 212, 213, 217, 219, 220, 228, 231, 238, 239, 244, 251, 252, 256, 261, 264, 270, 278, 282, 292, 302, 313, 319, 329, 342, 343, 344, 346, 354, 357, 369, 376, 388, 390, 401, 402, 403, 404, 413, 423, 471, 477, 484, 501, 503, 506, 518, 524, 545, 554, 555, 556, 564, 566, 572, 586, 587, 596, 597, 602, 613, 614, 645, 649, 658, 704, 705, 709, 710, 712, 716, 727, 729, 751, 756, 760, 764, 765, 766, 767, 769, 770, 771, 773, 783, 787, 791, 802, 818, 823, 824, 826, 833, 839, 842, 843, 849, 851, 865, 866, 873, 878, 879, 885, 896, 907, 916, 920, 921, 926, 939, 940, 941, 942, 943, 951, 954, 966, 972, 985, 993, 1002, 1003, 1004, 1005, 1013, 1023, 1061, 1078, 1079, 1084, 1089, 1094, 1095, 1107, 1110, 1113, 1125, 1131, 1152, 1160, 1162, 1163, 1165, 1167, 1168, 1169, 1176, 1177, 1181, 1191, 1218, 1221, 1230, 1277, 1281, 1287, 1291, 1295, 1305], "get_chunk": 1305, "get_column": [177, 279, 319], "get_column_index": 319, "get_worksheet_by_nam": [39, 319], "gevent": [57, 156, 824, 916], "gh": 674, "gh45": 674, "gh45ij67kl": 674, "ghi": [328, 660, 802, 922, 1232], "gil": [553, 802], "git": 55, "github": [137, 319], "give": [144, 151, 152, 225, 235, 284, 286, 319, 423, 474, 502, 607, 711, 715, 802, 814, 847, 856, 880, 882, 916, 1023, 1109, 1294, 1305, 1332], "given": [39, 50, 98, 103, 120, 121, 123, 124, 125, 127, 134, 135, 136, 137, 139, 140, 142, 143, 144, 145, 146, 148, 151, 152, 153, 159, 160, 161, 162, 164, 166, 167, 168, 169, 175, 196, 197, 199, 210, 220, 229, 242, 243, 252, 253, 254, 262, 265, 281, 288, 319, 351, 363, 368, 376, 388, 395, 414, 418, 441, 443, 444, 457, 461, 485, 490, 512, 537, 544, 547, 553, 594, 598, 604, 607, 608, 610, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 636, 638, 660, 661, 671, 672, 687, 690, 697, 700, 710, 750, 751, 760, 763, 764, 777, 778, 779, 802, 835, 842, 852, 860, 871, 874, 883, 899, 916, 921, 922, 924, 948, 960, 965, 972, 995, 1014, 1018, 1045, 1047, 1048, 1062, 1066, 1068, 1090, 1094, 1108, 1119, 1144, 1151, 1154, 1157, 1159, 1172, 1178, 1182, 1188, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1206, 1210, 1232, 1233, 1243, 1244, 1259, 1262, 1269, 1293, 1296, 1305, 1314, 1316, 1321, 1323, 1324, 1327, 1328, 1333, 1335, 1336], "glimps": [188, 212, 319], "glob": [134, 135, 146, 148, 151, 152, 153], "global": [49, 88, 89, 139, 155, 164, 172, 266, 319, 608, 609, 781, 802, 875, 916, 986, 989, 1186, 1187, 1305, 1315, 1317, 1332], "gmt": [418, 422, 438, 1018, 1022, 1042], "go": [12, 134, 135, 148, 656, 1228], "godfath": 1314, "goe": 12, "gonfruit": 1260, "good": [44, 46, 48, 222, 319, 916, 1327], "goodby": 1, "googl": [33, 138, 149, 150], "gpu": [276, 319, 823, 891, 913, 916, 1284, 1305], "gpu_devic": [276, 319], "gpudevic": [276, 319], "gpuengin": [823, 916], "grade": [1109, 1305], "grain": [823, 913, 916], "granular": 1333, "grape": 1328, "graph": [56, 136, 227, 319, 568, 823, 844, 888, 916], "graphviz": [227, 319, 568, 872, 916], "great": [319, 323], "great_tabl": [319, 323], "greater": [182, 225, 319, 479, 481, 490, 644, 671, 672, 680, 697, 802, 847, 916, 1094, 1217, 1243, 1244, 1252, 1269, 1305], "greatest": [1322, 1326], "greatli": [140, 151], "green": [49, 88, 89, 305, 715, 802, 899, 1294, 1305], "greenlet": [57, 824, 916], "greet": 1, "grid": [488, 802], "grid_point": [488, 802], "gridlin": [39, 319], "gross": 1314, "group": [9, 27, 44, 48, 135, 153, 181, 209, 210, 223, 240, 242, 244, 251, 254, 287, 289, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 319, 322, 329, 388, 405, 466, 472, 477, 480, 516, 552, 553, 564, 566, 594, 604, 613, 614, 646, 647, 651, 659, 660, 661, 663, 673, 674, 710, 715, 764, 802, 820, 841, 842, 865, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 916, 920, 922, 1006, 1123, 1191, 1223, 1231, 1232, 1233, 1235, 1245, 1246, 1294, 1305, 1314, 1322, 1332, 1333], "group_bi": [210, 240, 244, 251, 289, 318, 319, 329, 388, 470, 472, 477, 480, 552, 553, 594, 646, 647, 710, 717, 743, 746, 764, 802, 823, 824, 834, 842, 861, 865, 872, 914, 916, 922], "group_by_dynam": [251, 319, 865, 916], "group_by_partit": [861, 916], "group_col": [470, 717, 802], "group_df": [305, 899], "group_dtyp": [594, 802], "group_index": [659, 1231], "group_to_row": [594, 802], "groupbi": [209, 319, 553, 764, 802], "grow": [291, 319], "grown": [214, 319], "gt": [319, 323, 802, 1305], "gte": [470, 717, 802], "guarante": [44, 48, 134, 135, 180, 188, 211, 282, 284, 319, 387, 388, 483, 708, 709, 710, 802, 818, 828, 879, 880, 916, 983, 1088, 1288, 1290, 1305], "guid": [802, 920, 1336], "gzip": [44, 48, 319, 916], "h": [287, 319, 328, 441, 444, 639, 673, 674, 687, 690, 694, 802, 1245, 1246, 1259, 1262, 1266, 1328, 1329], "ha": [38, 39, 50, 57, 126, 136, 148, 171, 177, 289, 295, 300, 319, 387, 388, 405, 476, 552, 565, 571, 665, 688, 698, 709, 710, 734, 751, 760, 798, 802, 824, 889, 894, 899, 916, 983, 994, 1006, 1008, 1237, 1260, 1290, 1305], "half": [281, 319, 439, 460, 461, 462, 463, 802, 1043, 1067, 1068, 1069, 1070, 1305], "half_lif": [460, 461, 462, 463, 802, 1067, 1068, 1069, 1070, 1305], "ham": [34, 36, 38, 40, 41, 44, 181, 184, 185, 186, 190, 191, 192, 193, 194, 195, 201, 206, 211, 212, 214, 224, 228, 230, 232, 234, 237, 241, 246, 248, 249, 252, 255, 256, 257, 264, 267, 268, 270, 274, 275, 277, 278, 279, 284, 290, 291, 319, 390, 568, 569, 798, 820, 825, 826, 830, 831, 832, 833, 838, 846, 859, 863, 866, 867, 880, 888, 916, 985, 1321, 1322], "ham_a": [274, 319], "ham_b": [274, 319], "ham_right": [224, 319, 846, 916], "hamburg": 798, "hand": [39, 134, 135, 148, 319, 533, 534, 535, 536, 1140, 1141, 1142, 1143], "handi": [413, 729, 1013], "handl": [38, 56, 57, 58, 95, 128, 134, 135, 148, 154, 201, 205, 319, 409, 514, 658, 697, 802, 823, 824, 838, 916, 920, 1009, 1121, 1230, 1269, 1305], "handler": [132, 134, 135, 139, 140, 141, 142, 143, 144, 145, 146, 147, 189, 319, 408, 802, 829, 916], "happen": [136, 418, 601, 802, 1018, 1180, 1305], "hard": [148, 852, 916], "harder": [210, 319, 842, 916], "hardwar": 1336, "has_head": [134, 135, 139, 145, 148], "has_nul": [802, 1087, 1305], "has_prefix": 681, "has_suffix": 656, "has_two": 1323, "has_valid": 1305, "hash": [211, 319, 802, 1305], "hash_row": 319, "hat": [673, 674, 1245, 1246], "have": [5, 14, 30, 39, 49, 50, 65, 89, 122, 132, 134, 135, 137, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 178, 189, 198, 222, 224, 225, 244, 247, 251, 253, 254, 273, 281, 296, 319, 405, 408, 460, 462, 463, 553, 565, 604, 608, 609, 614, 661, 675, 731, 802, 829, 846, 847, 856, 865, 889, 890, 916, 920, 922, 1006, 1008, 1067, 1069, 1070, 1073, 1182, 1186, 1187, 1245, 1247, 1305, 1332, 1334, 1336], "haystack": [660, 1232], "he": 683, "head": [68, 148, 208, 228, 270, 319, 334, 506, 802, 851, 916, 1113, 1277, 1305], "header": [36, 39, 44, 45, 48, 128, 134, 135, 139, 145, 148, 194, 283, 319, 916], "header_format": [39, 319], "header_nam": [283, 319], "headerless": 148, "heap": [196, 319, 802, 920, 1066, 1305], "heatmap": [39, 319], "heavili": 153, "height": [39, 131, 164, 193, 319, 322, 1305, 1310], "hell": [682, 1254], "hello": [1, 20, 682, 683, 684, 922, 1130, 1254, 1255, 1256, 1316, 1319], "hello_": 753, "hello_data": 1319, "hello_world": 1319, "help": [39, 157, 158, 159, 160, 319, 916], "helper": [319, 323, 798], "henc": [673, 1246], "here": [36, 38, 39, 40, 44, 45, 46, 47, 48, 121, 123, 124, 125, 127, 136, 137, 138, 143, 144, 146, 148, 149, 150, 151, 152, 153, 162, 164, 168, 178, 244, 319, 413, 552, 553, 568, 661, 668, 729, 802, 872, 916, 922, 1013, 1240], "hex": [373, 374, 654, 655, 692, 969, 970, 1226, 1227, 1264], "hexadecim": [969, 970], "hf": [36, 40, 44, 45, 46, 47, 48, 144, 146, 148, 151, 152, 153, 319, 916], "hf_token": [36, 40, 44, 45, 46, 47, 48, 144, 146, 148, 151, 152, 153, 319, 916], "hi": [1, 1328], "hidden": [39, 319], "hidden_column": [39, 319], "hide": [21, 22, 23, 24], "hide_gridlin": [39, 319], "hide_password": 136, "high": [254, 319, 323, 601, 802, 814, 1180, 1305], "higher": [44, 48, 188, 246, 311, 319, 602, 624, 625, 775, 802, 828, 862, 905, 916, 1008, 1181, 1197, 1305], "highest": [319, 323, 604, 714, 734, 802, 916, 1182, 1305], "highli": [802, 920], "hippopotamu": [671, 672, 1243, 1244], "hist": [802, 1305, 1310], "histogram": [1305, 1310], "hit": [819, 916], "hive": [146, 151, 153], "hive_partit": [146, 151, 153], "hive_schema": [146, 151, 153], "hmm": 922, "hold": [263, 277, 319, 1286, 1305], "holidai": [413, 729, 1013], "home": [695, 1267], "horizont": [20, 58, 97, 203, 214, 231, 233, 238, 269, 287, 319, 720, 722, 731, 732, 733, 738, 739, 741, 749, 752, 766, 768, 771, 776, 786, 888, 916], "host": [55, 134, 140, 142, 153], "hour": [144, 148, 151, 152, 210, 225, 251, 289, 319, 427, 429, 430, 434, 435, 439, 440, 444, 446, 452, 461, 614, 617, 619, 621, 623, 625, 628, 630, 632, 743, 744, 745, 746, 747, 748, 788, 789, 790, 802, 842, 847, 865, 916, 922, 1039, 1043, 1050, 1056, 1068, 1305, 1329], "hours_diff": 446, "hous": [281, 319], "how": [11, 36, 38, 39, 40, 44, 45, 46, 47, 48, 50, 58, 97, 137, 144, 146, 148, 151, 152, 153, 193, 201, 224, 225, 244, 287, 288, 319, 352, 409, 438, 488, 513, 514, 594, 607, 626, 687, 690, 729, 745, 792, 802, 838, 846, 847, 883, 888, 916, 920, 949, 1009, 1042, 1120, 1121, 1198, 1259, 1262, 1305], "howev": [1, 124, 136, 146, 153, 173, 196, 229, 277, 319, 594, 802, 823, 916, 1066, 1305], "hstack": [97, 319], "html": [32, 39, 40, 41, 122, 136, 140, 142, 175, 176, 177, 186, 319, 924, 925], "http": [20, 32, 39, 40, 41, 68, 122, 136, 137, 140, 142, 175, 176, 177, 186, 319, 568, 659, 661, 872, 916, 924, 925, 1231, 1233], "httpmethod": 68, "hug": [36, 40, 44, 45, 46, 47, 48, 144, 146, 148, 151, 152, 153, 319, 916], "hut": [673, 674, 1245, 1246], "hvplot": [319, 322, 1305, 1310], "hyperbol": [337, 339, 341, 397, 643, 707, 802, 934, 936, 938, 998, 1216, 1279, 1305], "hyperloglog": [179, 319, 335, 723, 802, 817, 916, 932, 1305], "hyphen": [650, 1222], "hypothesi": [162, 164, 167, 168, 1336], "i": [1, 12, 14, 17, 31, 32, 33, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 55, 56, 57, 58, 64, 65, 66, 67, 68, 71, 81, 89, 93, 95, 96, 97, 98, 99, 100, 102, 103, 108, 114, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 130, 131, 134, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 172, 173, 178, 179, 180, 181, 183, 184, 188, 189, 192, 193, 195, 196, 198, 201, 205, 209, 210, 211, 212, 215, 216, 220, 222, 223, 224, 225, 226, 227, 228, 229, 235, 236, 240, 242, 243, 244, 248, 249, 251, 252, 253, 254, 255, 258, 259, 260, 262, 264, 265, 266, 267, 270, 271, 276, 277, 278, 281, 282, 283, 284, 286, 287, 288, 289, 290, 294, 296, 297, 305, 319, 322, 323, 328, 331, 333, 334, 335, 345, 348, 355, 356, 363, 368, 387, 388, 389, 391, 392, 405, 406, 408, 411, 412, 413, 414, 417, 425, 432, 433, 435, 439, 441, 444, 452, 460, 461, 462, 463, 466, 470, 474, 483, 485, 487, 490, 502, 508, 515, 516, 519, 521, 523, 532, 537, 538, 540, 544, 546, 549, 552, 553, 557, 559, 560, 561, 563, 564, 565, 567, 576, 594, 599, 601, 604, 606, 607, 608, 609, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 635, 636, 637, 638, 640, 641, 644, 645, 646, 647, 649, 650, 651, 652, 653, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 677, 680, 682, 683, 684, 687, 688, 689, 690, 692, 694, 695, 697, 702, 709, 710, 715, 716, 719, 720, 721, 722, 723, 728, 729, 731, 732, 733, 735, 736, 737, 738, 739, 743, 744, 746, 747, 752, 756, 757, 758, 759, 761, 762, 764, 767, 769, 772, 774, 777, 778, 779, 780, 781, 783, 787, 789, 790, 791, 792, 793, 798, 802, 817, 818, 819, 822, 823, 824, 826, 828, 829, 831, 832, 833, 834, 838, 841, 842, 845, 846, 847, 848, 850, 852, 856, 857, 861, 863, 865, 866, 868, 869, 870, 871, 872, 873, 874, 875, 876, 879, 880, 882, 883, 884, 885, 887, 890, 891, 899, 909, 916, 920, 922, 929, 930, 931, 932, 945, 952, 953, 960, 965, 983, 986, 987, 988, 990, 995, 996, 1006, 1007, 1008, 1011, 1012, 1013, 1014, 1017, 1025, 1039, 1043, 1045, 1048, 1056, 1065, 1066, 1067, 1068, 1069, 1070, 1072, 1073, 1077, 1078, 1088, 1089, 1090, 1094, 1096, 1106, 1108, 1109, 1110, 1113, 1115, 1122, 1123, 1126, 1128, 1130, 1139, 1144, 1145, 1151, 1159, 1178, 1180, 1182, 1184, 1186, 1187, 1188, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1204, 1205, 1206, 1207, 1208, 1210, 1213, 1214, 1217, 1218, 1221, 1222, 1223, 1224, 1225, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1249, 1252, 1254, 1255, 1256, 1259, 1260, 1261, 1262, 1264, 1266, 1267, 1269, 1277, 1280, 1284, 1286, 1287, 1289, 1290, 1294, 1295, 1305, 1310, 1314, 1315, 1320, 1324, 1325, 1328, 1331, 1333, 1334, 1336], "i0e0": 1336, "i16": [1, 53, 421, 436, 454, 639, 802, 922, 1040, 1283, 1305, 1336], "i32": [1, 53, 121, 124, 128, 161, 163, 164, 257, 266, 319, 354, 355, 357, 389, 416, 424, 426, 427, 428, 429, 430, 434, 456, 639, 729, 792, 802, 867, 916, 951, 952, 954, 1016, 1026, 1030, 1031, 1032, 1038, 1060, 1157, 1305, 1325, 1329, 1336], "i64": [1, 10, 13, 16, 17, 21, 27, 51, 52, 53, 54, 58, 59, 76, 96, 121, 122, 123, 124, 125, 126, 127, 128, 131, 134, 136, 143, 144, 148, 178, 180, 181, 182, 183, 185, 189, 190, 193, 194, 197, 198, 200, 201, 204, 205, 207, 208, 209, 210, 212, 214, 215, 217, 219, 221, 224, 225, 226, 228, 229, 230, 236, 237, 242, 243, 244, 245, 248, 249, 250, 251, 255, 257, 259, 262, 264, 265, 266, 268, 270, 272, 279, 282, 283, 284, 285, 286, 287, 288, 289, 291, 293, 295, 296, 297, 298, 299, 301, 302, 303, 305, 306, 309, 312, 313, 319, 328, 330, 334, 344, 349, 350, 352, 353, 358, 360, 361, 362, 363, 364, 366, 369, 371, 387, 388, 395, 401, 402, 403, 404, 405, 406, 409, 410, 423, 443, 445, 446, 447, 448, 449, 450, 451, 461, 464, 466, 467, 469, 470, 471, 472, 474, 475, 477, 478, 480, 484, 486, 487, 488, 489, 490, 493, 494, 496, 497, 498, 499, 500, 503, 506, 509, 510, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 544, 545, 546, 550, 552, 553, 573, 574, 575, 577, 578, 580, 582, 584, 585, 590, 594, 595, 598, 599, 600, 601, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 635, 637, 638, 639, 640, 645, 646, 647, 665, 673, 674, 688, 692, 697, 698, 700, 701, 702, 703, 704, 705, 709, 710, 711, 712, 714, 717, 724, 727, 730, 731, 732, 733, 738, 739, 740, 741, 742, 745, 748, 749, 750, 751, 752, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 768, 770, 771, 773, 776, 780, 781, 782, 785, 786, 787, 788, 792, 798, 802, 818, 820, 821, 823, 824, 829, 830, 832, 835, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 851, 852, 853, 857, 858, 860, 861, 863, 864, 865, 867, 869, 871, 873, 874, 875, 877, 878, 879, 880, 881, 882, 883, 886, 889, 890, 892, 893, 895, 896, 897, 899, 900, 903, 906, 907, 916, 922, 926, 927, 928, 931, 950, 955, 957, 959, 960, 961, 963, 966, 983, 995, 996, 1002, 1003, 1004, 1005, 1006, 1007, 1023, 1047, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1072, 1073, 1074, 1076, 1077, 1081, 1082, 1084, 1089, 1091, 1099, 1113, 1121, 1122, 1124, 1125, 1126, 1127, 1128, 1129, 1131, 1133, 1136, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1148, 1149, 1151, 1152, 1159, 1164, 1172, 1178, 1180, 1183, 1184, 1185, 1186, 1187, 1188, 1190, 1193, 1196, 1200, 1204, 1205, 1207, 1210, 1211, 1213, 1218, 1219, 1264, 1270, 1275, 1277, 1282, 1290, 1291, 1296, 1305, 1314, 1315, 1317, 1321, 1322, 1323, 1324, 1325, 1327, 1330, 1331, 1333, 1334, 1336], "i8": [367, 368, 421, 424, 427, 429, 430, 431, 434, 436, 437, 440, 453, 454, 543, 639, 774, 777, 793, 802, 964, 965, 1009, 1021, 1024, 1034, 1035, 1041, 1044, 1057, 1058, 1150, 1189, 1211, 1293, 1305, 1329], "i_bitand_j": 1324, "i_bitand_op_j": 1324, "i_bitcount": 1324, "i_bitor_j": 1324, "i_bitor_op_j": 1324, "i_bitxor_j": 1324, "i_bitxor_op_j": 1324, "iceberg": [150, 814], "icon": [39, 319], "id": [26, 39, 58, 131, 134, 150, 226, 276, 283, 296, 305, 319, 613, 673, 674, 713, 802, 848, 890, 899, 916, 922, 1191, 1292, 1305, 1333, 1334, 1336], "id_char": 1336, "id_var": [235, 286, 319, 856, 882, 916], "ideal": 130, "ident": [128, 182, 183, 319, 441, 612, 613, 802, 821, 822, 916, 994, 996, 1045, 1190, 1191, 1305], "identifi": [128, 136, 235, 242, 284, 286, 297, 319, 856, 880, 882, 916], "idiograph": 922, "idiomat": [798, 826, 833, 866, 885, 899, 916], "idx": [148, 210, 223, 296, 319, 355, 368, 544, 842, 890, 916, 965, 1151, 1235], "idx_lit": 1235, "idx_rx": 1235, "ieee": [711, 802], "if_set": [5, 30], "if_table_exist": [37, 319], "ifnul": 1326, "ignor": [38, 136, 163, 164, 168, 233, 269, 288, 319, 331, 333, 356, 409, 438, 460, 462, 463, 514, 523, 586, 587, 650, 666, 719, 721, 733, 768, 786, 802, 883, 916, 922, 929, 930, 953, 1009, 1042, 1067, 1069, 1070, 1121, 1130, 1168, 1169, 1222, 1238, 1305], "ignore_error": [134, 135, 144, 148, 152], "ignore_nul": [233, 269, 319, 331, 333, 356, 460, 462, 463, 523, 650, 666, 719, 721, 733, 768, 786, 802, 929, 930, 953, 1067, 1069, 1070, 1130, 1222, 1238, 1305], "ignore_spac": 922, "ij": 674, "ij67": 674, "ijkl": 1328, "ilmsuxu": [651, 659, 660, 663, 673, 674, 1223, 1231, 1232, 1235, 1245, 1246], "imbal": [460, 462, 463, 802, 1067, 1069, 1070, 1305], "imdb_scor": 1314, "immedi": [173, 604, 724, 728, 743, 744, 746, 747, 758, 759, 774, 777, 780, 784, 789, 790, 793, 802, 1182, 1305, 1315], "immut": [277, 319, 1286, 1305], "impact": [210, 319, 842, 916, 1314, 1333], "impl": 150, "implement": [44, 122, 136, 177, 211, 229, 305, 319, 322, 323, 483, 553, 577, 578, 580, 582, 584, 585, 698, 708, 764, 802, 899, 1088, 1159, 1205, 1207, 1288, 1305, 1310], "implic": [408, 802, 829, 916], "implicit": [288, 319, 883, 916], "implicitli": [201, 319, 470, 792, 802, 838, 916, 1333], "implod": [802, 1305, 1323], "import": [10, 16, 28, 34, 36, 38, 39, 40, 41, 44, 50, 65, 68, 121, 122, 125, 126, 134, 136, 137, 143, 144, 148, 154, 157, 158, 159, 160, 161, 162, 163, 164, 167, 168, 169, 170, 181, 188, 189, 190, 193, 208, 210, 223, 225, 242, 244, 259, 266, 274, 276, 281, 286, 287, 289, 319, 322, 323, 376, 407, 408, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 461, 560, 561, 567, 594, 615, 617, 619, 621, 623, 625, 628, 630, 632, 729, 742, 743, 744, 745, 746, 747, 748, 781, 789, 790, 798, 802, 814, 820, 824, 828, 829, 830, 832, 842, 847, 852, 869, 882, 916, 972, 997, 999, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1068, 1097, 1100, 1102, 1103, 1192, 1215, 1278, 1305, 1310, 1315, 1330, 1333, 1336], "improv": [37, 48, 140, 151, 224, 319, 552, 802, 846, 916], "in_plac": [214, 263, 291, 319, 1183, 1212, 1219, 1305], "includ": [7, 20, 30, 36, 38, 39, 45, 55, 126, 136, 138, 144, 146, 148, 149, 150, 151, 152, 153, 164, 165, 173, 184, 188, 196, 201, 226, 242, 244, 254, 265, 281, 283, 287, 288, 319, 406, 440, 470, 474, 485, 490, 560, 601, 616, 618, 620, 622, 624, 626, 627, 629, 631, 673, 674, 678, 679, 682, 683, 729, 738, 778, 779, 802, 828, 838, 848, 874, 883, 916, 922, 1007, 1008, 1044, 1066, 1077, 1090, 1094, 1180, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1245, 1246, 1250, 1251, 1254, 1305, 1333], "include_bom": [36, 45, 319, 916], "include_boundari": [210, 319, 842, 916], "include_break": [406, 601, 802, 1007, 1180, 1305], "include_breakpoint": [485, 802, 1090, 1305], "include_categor": 922, "include_categori": [485, 802, 1090, 1305], "include_col": 164, "include_file_path": [144, 146, 148, 151, 152, 153], "include_head": [36, 39, 45, 135, 283, 319, 916], "include_index": 126, "include_init": 738, "include_kei": [242, 254, 319], "include_nul": [288, 319, 883, 916], "inclus": [178, 210, 251, 319, 444, 490, 614, 617, 619, 621, 623, 625, 628, 630, 632, 678, 679, 724, 743, 744, 746, 747, 758, 759, 789, 790, 802, 842, 865, 916, 1048, 1094, 1250, 1251, 1305], "incom": 136, "incompat": 115, "incomplet": [609, 802, 1187, 1305], "incorpor": 1333, "incorrect": [260, 319, 455, 552, 553, 637, 802, 870, 899, 916, 1059, 1208, 1305], "incorrectli": [134, 544], "increas": [39, 50, 134, 139, 145, 146, 153, 319, 405, 613, 802, 1006, 1191, 1305], "independ": [56, 57, 161, 164, 168, 281, 319, 640, 802, 823, 824, 834, 861, 872, 916], "index": [39, 103, 122, 126, 129, 134, 135, 140, 142, 144, 146, 148, 151, 152, 153, 156, 177, 204, 206, 210, 215, 220, 222, 244, 249, 251, 252, 253, 262, 264, 276, 277, 279, 286, 288, 289, 295, 296, 319, 329, 342, 343, 344, 346, 349, 350, 355, 363, 368, 461, 477, 478, 480, 509, 510, 519, 520, 521, 537, 538, 544, 614, 617, 619, 621, 623, 625, 628, 630, 632, 636, 638, 645, 651, 659, 663, 665, 677, 688, 698, 727, 758, 761, 802, 840, 842, 865, 871, 873, 882, 883, 889, 890, 916, 922, 939, 940, 941, 942, 943, 946, 947, 952, 960, 965, 1068, 1081, 1082, 1108, 1116, 1117, 1126, 1127, 1128, 1144, 1145, 1151, 1172, 1205, 1206, 1210, 1218, 1231, 1235, 1237, 1249, 1260, 1305, 1310, 1323, 1328], "index_column": [210, 251, 319, 614, 802, 842, 865, 916], "indexord": [276, 277, 319], "indic": [36, 39, 40, 44, 45, 46, 47, 48, 64, 65, 67, 81, 96, 106, 132, 134, 135, 136, 139, 140, 142, 144, 145, 146, 148, 151, 152, 153, 161, 162, 168, 210, 251, 254, 260, 262, 274, 319, 345, 363, 477, 485, 491, 492, 493, 495, 496, 497, 498, 499, 500, 519, 537, 557, 558, 559, 560, 561, 562, 563, 614, 617, 619, 621, 623, 625, 628, 630, 632, 636, 638, 727, 728, 773, 802, 842, 865, 870, 871, 916, 920, 922, 960, 1081, 1090, 1097, 1098, 1100, 1101, 1102, 1103, 1104, 1105, 1126, 1144, 1205, 1206, 1210, 1281, 1305, 1336], "indistinguish": [36, 45, 319, 916], "individu": [39, 48, 173, 251, 276, 277, 281, 319, 553, 660, 701, 802, 823, 865, 916, 922, 993, 1232, 1305], "inequ": [588, 802], "inexact": [157, 158, 159, 160], "inf": [161, 164, 168, 341, 406, 492, 495, 601, 711, 802, 938, 999, 1007, 1097, 1100, 1157, 1175, 1180, 1293, 1305, 1330], "infer": [36, 40, 44, 45, 46, 47, 48, 66, 80, 96, 121, 123, 124, 125, 126, 127, 134, 135, 136, 139, 143, 144, 145, 146, 148, 151, 152, 153, 229, 319, 552, 553, 610, 667, 687, 689, 690, 691, 694, 748, 762, 777, 802, 916, 1159, 1188, 1239, 1259, 1261, 1262, 1263, 1266, 1305], "infer_schema": [134, 148], "infer_schema_length": [124, 127, 131, 134, 135, 136, 139, 143, 144, 145, 148, 152, 319, 667, 916, 1239], "inference_length": [691, 1263], "inference_s": [229, 319], "infin": [695, 711, 802, 1267], "infinit": [495, 711, 802, 1100, 1305], "influenc": [139, 852, 916], "influxdb": 136, "info": [138, 149, 150, 156], "inform": [19, 23, 36, 37, 40, 44, 45, 46, 47, 48, 55, 138, 144, 146, 148, 149, 150, 151, 152, 153, 157, 159, 175, 186, 188, 319, 323, 502, 553, 644, 651, 659, 660, 663, 673, 674, 802, 823, 828, 861, 916, 920, 924, 989, 1109, 1217, 1223, 1231, 1232, 1235, 1245, 1246, 1305], "inherit": [252, 319, 408, 802, 829, 916], "init": [173, 1314], "initcap": 1326, "initi": [32, 33, 39, 80, 173, 319, 738, 752, 792, 1333], "initialis": [68, 136, 173, 916], "inject": [39, 50, 319], "inlin": [24, 254, 319, 651, 659, 660, 663, 673, 674, 1223, 1231, 1232, 1235, 1245, 1246, 1323], "inner": [59, 76, 163, 224, 226, 288, 319, 356, 367, 410, 523, 543, 553, 607, 708, 781, 802, 846, 848, 883, 916, 953, 964, 1010, 1130, 1150, 1159, 1288, 1305, 1321, 1333], "inner_dtyp": [163, 166], "innermost": [163, 166], "innter": 952, "inprocessqueri": [823, 916], "input": [0, 50, 56, 96, 124, 126, 134, 135, 180, 190, 209, 226, 229, 233, 242, 244, 248, 257, 258, 262, 265, 269, 282, 293, 294, 298, 319, 328, 388, 395, 461, 464, 476, 490, 548, 552, 553, 565, 594, 608, 609, 641, 647, 665, 675, 677, 683, 684, 685, 686, 688, 690, 702, 710, 718, 720, 722, 724, 727, 730, 731, 732, 733, 741, 748, 750, 758, 759, 762, 763, 764, 766, 768, 771, 780, 784, 786, 792, 798, 802, 814, 818, 830, 841, 848, 863, 867, 868, 871, 874, 879, 886, 887, 892, 916, 920, 995, 1068, 1094, 1155, 1156, 1159, 1178, 1186, 1187, 1210, 1214, 1237, 1249, 1260, 1262, 1305, 1327, 1328, 1330], "input_wildcard_expans": [802, 920], "insensit": [652, 660, 662, 664, 673, 674, 675, 922, 1223, 1224, 1232, 1234, 1235, 1236, 1245, 1246, 1247], "insensitive_match": [651, 663], "insert": [37, 134, 135, 140, 142, 144, 146, 148, 151, 152, 153, 215, 283, 285, 319, 636, 650, 666, 697, 802, 881, 916, 1206, 1222, 1238, 1269, 1305], "insert_aft": [39, 319], "insert_befor": [39, 319], "insert_chart": [39, 319], "insert_column": 319, "insid": [57, 552, 802, 824, 916], "inspect": [802, 916], "instal": [32, 33, 100, 126, 134, 135, 137, 140, 142, 186, 278, 319, 413, 568, 729, 872, 916, 1013, 1287, 1305], "instanc": [36, 40, 44, 45, 46, 47, 48, 132, 134, 135, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 151, 152, 153, 164, 168, 198, 203, 319, 565, 738, 752, 798, 814, 820, 852, 889, 890, 916, 1073, 1305], "instanti": [37, 39, 136, 166, 257, 275, 276, 293, 319, 867, 886, 916, 921, 1283, 1284, 1305], "instantli": [57, 824, 916], "instead": [36, 38, 42, 43, 50, 57, 58, 123, 124, 127, 134, 135, 136, 139, 145, 146, 148, 153, 154, 161, 162, 163, 164, 168, 179, 180, 208, 221, 222, 225, 229, 235, 240, 242, 252, 253, 254, 257, 258, 259, 262, 276, 277, 278, 282, 294, 295, 319, 322, 323, 344, 363, 388, 389, 391, 392, 406, 420, 444, 461, 464, 474, 537, 567, 601, 608, 638, 650, 658, 669, 670, 682, 683, 684, 685, 686, 697, 710, 717, 724, 726, 728, 735, 743, 744, 746, 747, 748, 758, 759, 774, 777, 780, 781, 784, 789, 790, 793, 802, 817, 818, 824, 834, 847, 856, 867, 868, 869, 871, 879, 887, 888, 889, 891, 916, 922, 941, 960, 969, 984, 987, 988, 1007, 1020, 1028, 1029, 1048, 1068, 1087, 1144, 1180, 1186, 1205, 1207, 1210, 1219, 1222, 1230, 1241, 1242, 1254, 1255, 1256, 1269, 1286, 1287, 1305, 1310, 1314, 1315, 1319, 1333, 1334], "int": [10, 12, 13, 14, 17, 25, 26, 36, 37, 39, 40, 44, 45, 46, 47, 48, 52, 59, 66, 124, 127, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 180, 182, 188, 196, 199, 200, 204, 206, 208, 211, 212, 213, 215, 220, 222, 223, 225, 228, 229, 239, 240, 249, 251, 252, 255, 261, 262, 264, 267, 270, 275, 279, 282, 287, 290, 292, 295, 296, 302, 313, 319, 328, 351, 355, 363, 365, 368, 370, 371, 387, 388, 405, 409, 413, 460, 462, 463, 467, 468, 469, 475, 477, 478, 480, 483, 484, 485, 506, 512, 514, 519, 520, 521, 522, 532, 537, 538, 540, 542, 543, 544, 546, 593, 595, 598, 599, 601, 604, 607, 610, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 638, 640, 645, 649, 659, 665, 667, 671, 672, 673, 677, 679, 680, 688, 691, 692, 697, 705, 709, 710, 716, 718, 724, 734, 736, 742, 745, 748, 754, 756, 758, 759, 773, 774, 777, 778, 779, 783, 784, 787, 788, 791, 793, 802, 818, 821, 828, 836, 837, 840, 843, 847, 851, 861, 871, 873, 876, 878, 879, 884, 885, 889, 890, 891, 896, 907, 916, 921, 922, 939, 940, 948, 952, 960, 962, 965, 967, 983, 984, 993, 994, 1000, 1006, 1009, 1010, 1013, 1066, 1067, 1069, 1070, 1074, 1075, 1076, 1081, 1082, 1088, 1089, 1090, 1108, 1112, 1113, 1119, 1121, 1126, 1127, 1128, 1129, 1139, 1144, 1145, 1147, 1149, 1150, 1151, 1153, 1165, 1166, 1168, 1169, 1172, 1174, 1175, 1178, 1179, 1180, 1182, 1188, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1209, 1210, 1213, 1218, 1221, 1231, 1237, 1239, 1243, 1244, 1245, 1249, 1251, 1252, 1260, 1263, 1264, 1269, 1276, 1277, 1283, 1290, 1295, 1305, 1317, 1320, 1333, 1336], "int16": [1, 53, 281, 319, 403, 404, 436, 704, 802, 922, 1004, 1005, 1040, 1276, 1283, 1305], "int32": [1, 39, 53, 58, 121, 124, 161, 163, 164, 210, 223, 251, 276, 319, 354, 355, 357, 389, 416, 426, 427, 428, 429, 434, 456, 461, 614, 617, 619, 621, 623, 625, 628, 630, 632, 708, 777, 802, 842, 865, 916, 921, 922, 948, 951, 952, 954, 1016, 1026, 1030, 1031, 1032, 1038, 1060, 1068, 1157, 1288, 1289, 1305], "int64": [1, 38, 39, 52, 53, 58, 59, 80, 98, 134, 143, 184, 194, 203, 210, 243, 251, 256, 257, 271, 278, 319, 349, 350, 352, 353, 358, 359, 360, 361, 362, 363, 364, 365, 366, 369, 370, 403, 404, 445, 446, 447, 448, 449, 450, 451, 455, 461, 464, 552, 553, 579, 581, 583, 598, 606, 614, 617, 619, 621, 623, 625, 628, 630, 632, 667, 692, 704, 708, 724, 731, 750, 758, 759, 762, 777, 784, 798, 802, 825, 833, 842, 860, 865, 866, 867, 916, 922, 946, 947, 949, 950, 955, 956, 957, 958, 959, 960, 961, 962, 963, 966, 967, 1004, 1005, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1059, 1061, 1068, 1159, 1184, 1264, 1276, 1286, 1287, 1288, 1289, 1305], "int64arrai": [1280, 1305], "int8": [1, 53, 80, 203, 319, 367, 368, 403, 404, 421, 424, 430, 431, 437, 440, 453, 454, 543, 704, 774, 777, 793, 802, 921, 964, 965, 1004, 1005, 1009, 1021, 1024, 1034, 1035, 1041, 1044, 1057, 1058, 1150, 1189, 1276, 1286, 1293, 1305], "int_rang": [210, 287, 296, 305, 319, 724, 761, 780, 842, 852, 890, 899, 916], "integ": [36, 39, 45, 64, 65, 67, 71, 72, 73, 74, 75, 81, 82, 83, 84, 85, 155, 162, 164, 167, 169, 193, 210, 251, 274, 277, 319, 332, 394, 440, 473, 474, 593, 599, 601, 606, 613, 614, 626, 665, 688, 692, 718, 724, 754, 758, 759, 777, 802, 832, 842, 865, 916, 922, 992, 1044, 1080, 1178, 1180, 1184, 1191, 1198, 1205, 1237, 1260, 1264, 1286, 1305, 1327, 1333, 1336], "integer_list": 76, "integr": [39, 281, 319, 617, 619, 621, 623, 625, 628, 630, 632, 802, 1336], "intend": [1, 157, 158, 159, 160, 697, 1269], "intens": [229, 305, 319, 594, 802, 1159, 1305], "interact": [164, 168, 188, 319, 322, 828, 916, 1305, 1310], "interchang": [122, 177], "interest": [135, 441, 444, 1045, 1048], "interfac": [0, 111, 112, 176, 814, 925, 1333], "interleav": 1328, "intermedi": [216, 319, 845, 916, 1336], "intern": [40, 41, 136, 155, 222, 271, 319, 474, 802, 1280, 1305, 1315], "interoper": [175, 924], "interpol": [188, 246, 311, 319, 469, 489, 556, 602, 624, 625, 775, 802, 828, 862, 905, 916, 1008, 1093, 1181, 1197, 1305, 1322], "interpolate_bi": [802, 1305], "interpolationmethod": [488, 802, 1092, 1305], "interpret": [125, 127, 134, 135, 148, 319, 916], "intersect": [39, 319, 534, 922, 1141, 1332], "interv": [210, 251, 289, 319, 406, 439, 452, 485, 490, 601, 614, 617, 619, 621, 623, 625, 628, 630, 632, 743, 744, 746, 747, 789, 790, 802, 842, 865, 916, 1007, 1021, 1023, 1024, 1030, 1032, 1034, 1035, 1038, 1040, 1041, 1043, 1047, 1056, 1057, 1090, 1094, 1180, 1305, 1322], "intoexpr": [180, 209, 210, 251, 257, 258, 262, 265, 282, 293, 294, 298, 319, 334, 352, 372, 375, 377, 388, 413, 461, 467, 477, 485, 489, 490, 513, 533, 534, 535, 536, 594, 608, 609, 617, 619, 621, 623, 625, 628, 630, 632, 636, 638, 647, 652, 662, 664, 675, 678, 679, 680, 685, 686, 702, 710, 720, 722, 727, 730, 731, 732, 733, 734, 736, 738, 741, 745, 752, 766, 768, 771, 777, 780, 784, 786, 802, 818, 841, 842, 865, 867, 868, 871, 874, 879, 886, 887, 892, 916, 920, 949, 968, 971, 973, 1013, 1068, 1074, 1093, 1094, 1120, 1186, 1187, 1206, 1210, 1236, 1250, 1251, 1252, 1257, 1258, 1305], "intoexprcolumn": [201, 215, 319, 351, 355, 356, 363, 387, 388, 395, 439, 467, 470, 512, 520, 523, 532, 537, 595, 599, 635, 638, 659, 665, 668, 677, 682, 683, 684, 688, 692, 697, 709, 710, 724, 729, 743, 744, 746, 747, 758, 759, 789, 790, 792, 802, 838, 871, 916, 948, 952, 953, 960, 995, 1043, 1056, 1074, 1119, 1127, 1130, 1139, 1144, 1175, 1231, 1237, 1240, 1249, 1254, 1255, 1256, 1260, 1269, 1305], "introduc": [49, 89, 687, 689, 690, 1259, 1261, 1262], "introduct": 1332, "intuit": [474, 802, 922], "invalid": [36, 45, 112, 134, 135, 148, 181, 319, 389, 667, 668, 692, 711, 802, 916, 969, 984, 1239, 1240, 1264, 1305], "invalid_valu": 969, "invalidoperationerror": [609, 802, 1187, 1305, 1331], "invari": [852, 916], "invers": [336, 337, 338, 339, 340, 341, 802, 933, 934, 935, 936, 937, 938, 1286, 1305, 1330], "invert": 922, "invok": [173, 552, 802], "involv": [201, 319, 838, 916], "io": [34, 36, 39, 40, 41, 44, 132, 134, 139, 140, 141, 142, 143, 144, 145, 147, 148, 150, 151, 152, 189, 259, 319, 408, 476, 567, 802, 829, 869, 916], "iobas": [42, 43, 143, 144, 189, 259, 319, 408, 567, 571, 802, 829, 869, 916], "ipc": [40, 41, 46, 140, 141, 142, 151, 154, 319, 814, 916], "ipccompress": [40, 41, 319], "is_between": [802, 1305], "is_dupl": [319, 802, 1305], "is_elementwis": [552, 802, 920], "is_empti": [319, 1305], "is_finit": [802, 1305], "is_first_distinct": [802, 1305], "is_in": [98, 201, 319, 802, 1305], "is_infinit": [802, 1305], "is_last_distinct": [802, 1305], "is_nan": [192, 319, 802, 831, 916, 1305], "is_not_nan": [802, 1305], "is_not_nul": [802, 1305], "is_nul": [193, 319, 802, 832, 916, 1305], "is_numer": 1336, "is_odd": [257, 319, 867, 916, 922], "is_selector": 922, "is_sort": 1305, "is_uniqu": [319, 802, 1305], "isn": 792, "iso": [426, 444, 453, 454, 1026, 1048, 1057, 1058, 1328], "iso8601": [134, 135, 148, 444, 1048], "iso_lang": 1328, "iso_year": 456, "isodow": 1329, "isoweek": 1329, "isoyear": 1329, "issu": [91, 92, 95, 96, 99, 106, 108, 119, 134, 135, 136, 148, 319, 403, 404, 704, 802, 1004, 1005, 1276, 1305, 1333], "ital": [39, 319], "item": [13, 58, 135, 208, 252, 255, 319, 351, 355, 356, 409, 466, 512, 514, 521, 523, 532, 635, 680, 802, 948, 952, 953, 1009, 1072, 1119, 1121, 1128, 1130, 1139, 1204, 1252, 1305], "iter": [56, 57, 58, 68, 121, 124, 136, 167, 169, 180, 190, 201, 209, 210, 221, 222, 223, 226, 251, 252, 253, 254, 257, 258, 265, 282, 283, 293, 294, 297, 298, 319, 388, 405, 413, 470, 594, 647, 702, 710, 720, 722, 727, 729, 730, 731, 732, 733, 741, 766, 768, 771, 780, 784, 786, 792, 798, 802, 818, 830, 838, 841, 842, 848, 865, 867, 868, 874, 879, 886, 887, 892, 916, 920, 921, 1006, 1013, 1205, 1305, 1336], "iter_batch": 136, "iter_column": 319, "iter_row": [223, 252, 253, 254, 319], "iter_slic": 319, "its": [90, 128, 156, 196, 277, 319, 417, 439, 452, 461, 552, 612, 647, 701, 792, 802, 826, 833, 885, 916, 989, 1017, 1043, 1056, 1066, 1068, 1190, 1286, 1305, 1335], "itself": [162, 319, 322, 323, 553, 616, 618, 620, 622, 624, 626, 627, 629, 631, 778, 779, 802, 850, 916, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1305, 1310, 1314, 1315, 1333], "ix": [244, 319], "j": [283, 319, 1324], "jax": [276, 319, 1284, 1305], "jax_enable_x64": [276, 319], "jaxexporttyp": [276, 319], "jjk": 922, "jkl": [660, 1232], "jklmn": 1328, "job": [819, 916], "join": [45, 46, 47, 48, 49, 50, 56, 57, 58, 89, 201, 225, 226, 288, 319, 470, 488, 594, 650, 781, 802, 823, 824, 834, 838, 847, 848, 861, 872, 883, 888, 916, 1222, 1315, 1317, 1323, 1332, 1333], "join_asof": [224, 319, 846, 916], "join_nul": [224, 319, 846, 916], "join_wher": [319, 916], "joinstrategi": [50, 224, 319, 846, 916], "joinvalid": [224, 319, 846, 916], "jpy": 1336, "json": [2, 3, 5, 6, 42, 43, 131, 143, 144, 150, 152, 189, 259, 319, 408, 476, 567, 571, 667, 668, 699, 802, 814, 829, 869, 916, 920, 1239, 1240, 1272], "json_path": [668, 1240], "json_path_match": [667, 1239], "json_stat": 5, "json_str": [143, 144], "json_val": [668, 1240], "jsonpath": [667, 668, 1239, 1240], "jst": [128, 922], "jul": [687, 1259, 1328], "juli": [1048, 1328, 1329], "just": [39, 126, 136, 148, 235, 286, 319, 856, 882, 916, 922], "k": [180, 254, 282, 283, 319, 387, 388, 400, 502, 709, 710, 802, 818, 879, 916, 983, 1001, 1109, 1290, 1305], "k_2": [644, 802, 1217, 1305], "k_3": [644, 802, 1217, 1305], "kanji": 922, "karen": [244, 319], "kathmandu": [1019, 1020, 1046], "kb": [196, 319, 376, 972, 1066, 1305], "kde": [1305, 1310], "keep": [50, 134, 135, 144, 148, 151, 152, 201, 284, 288, 289, 319, 476, 552, 570, 578, 608, 730, 802, 838, 880, 883, 916, 1186, 1305], "kei": [36, 39, 40, 44, 45, 46, 47, 48, 50, 55, 58, 144, 146, 148, 150, 151, 152, 153, 178, 210, 222, 224, 225, 236, 242, 244, 248, 250, 253, 254, 288, 319, 470, 553, 608, 609, 675, 743, 746, 784, 802, 842, 846, 847, 857, 863, 864, 883, 916, 922, 926, 1186, 1187, 1247, 1305, 1321], "kept": [284, 319, 880, 916], "keyerror": 16, "keystrok": 798, "keyword": [38, 138, 146, 149, 164, 168, 186, 209, 243, 252, 257, 258, 278, 293, 294, 298, 319, 470, 598, 702, 780, 784, 792, 802, 841, 860, 867, 868, 886, 887, 892, 916, 1287, 1305, 1318], "kl": 674, "kleen": [331, 333, 719, 720, 721, 722, 802, 929, 930, 1305], "klmnoopqrstuvwxyz": [223, 319], "knight": 1314, "know": [50, 136, 244, 286, 319, 544, 552, 802, 882, 916], "known": [140, 368, 544, 899, 965, 1151], "kurtosi": [802, 1305], "kuzu_db_conn": 136, "kwarg": [31, 32, 35, 49, 60, 61, 63, 64, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 81, 82, 83, 84, 85, 86, 133, 136, 137, 164, 166, 168, 186, 201, 243, 278, 319, 322, 598, 802, 838, 860, 891, 916, 920, 1287, 1305, 1310, 1318, 1333], "k\u00f9zudb": 136, "l1": 58, "l2": 58, "label": [210, 276, 281, 319, 322, 323, 406, 601, 615, 616, 618, 620, 622, 624, 627, 629, 631, 802, 842, 861, 916, 1007, 1180, 1192, 1193, 1194, 1195, 1196, 1197, 1199, 1200, 1201, 1305, 1310], "label_column": [281, 319], "labelangl": [319, 322, 1305, 1310], "lag": [262, 319, 363, 537, 638, 732, 802, 871, 916, 960, 1144, 1210, 1305], "lake": [38, 138, 149, 319, 814], "lambda": [148, 203, 229, 243, 244, 248, 305, 319, 368, 462, 463, 544, 552, 553, 578, 579, 738, 739, 752, 763, 764, 776, 802, 852, 860, 863, 899, 916, 965, 1069, 1070, 1151, 1159, 1305], "land": [413, 1013], "languag": [148, 210, 225, 251, 289, 319, 435, 439, 452, 461, 614, 617, 619, 621, 623, 625, 628, 630, 632, 743, 744, 746, 747, 789, 790, 802, 842, 847, 865, 916, 1039, 1043, 1056, 1068, 1305], "larg": [10, 11, 14, 50, 136, 139, 145, 153], "large_str": [223, 271, 278, 319], "larger": [10, 45, 46, 47, 48, 56, 57, 474, 734, 802, 823, 824, 916], "largest": [180, 282, 319, 388, 709, 710, 802, 818, 879, 916, 1290, 1305], "last": [38, 144, 148, 151, 152, 157, 158, 159, 160, 212, 225, 228, 244, 254, 265, 270, 277, 284, 313, 319, 344, 355, 364, 405, 421, 432, 436, 453, 475, 496, 521, 539, 542, 544, 577, 578, 580, 582, 584, 585, 609, 646, 647, 665, 680, 688, 705, 727, 787, 798, 802, 847, 874, 878, 880, 907, 916, 922, 941, 952, 961, 1006, 1021, 1036, 1040, 1057, 1089, 1101, 1113, 1128, 1146, 1149, 1187, 1219, 1237, 1252, 1260, 1277, 1286, 1305, 1326, 1328], "last_column": [39, 319], "later": [225, 259, 319, 567, 847, 869, 916], "latest": [32, 122, 138, 149, 177, 438, 565, 687, 690, 745, 1042, 1259, 1262], "latt": 922, "latter": [39, 198, 319, 1073, 1305], "lazi": [1, 58, 148, 164, 225, 243, 244, 266, 319, 553, 754, 774, 777, 793, 802, 828, 846, 847, 888, 892, 893, 895, 897, 899, 900, 901, 902, 903, 904, 905, 906, 916, 922, 1314, 1315, 1316, 1317, 1318, 1320, 1333, 1336], "lazili": [134, 135, 148, 149, 150, 151, 152, 153, 824, 916], "lazy_fram": [56, 57], "lazyfram": [0, 1, 50, 51, 52, 53, 54, 56, 57, 58, 148, 149, 150, 151, 152, 153, 154, 157, 158, 164, 184, 189, 227, 243, 244, 259, 266, 319, 408, 470, 544, 567, 780, 781, 802, 814, 913, 914, 915, 922, 1314, 1315, 1318, 1320, 1333, 1334, 1336], "lazygroupbi": [841, 842, 865, 916], "lbl": [276, 281, 319], "ldf": [1, 892, 893, 895, 897, 900, 901, 902, 903, 904, 905, 906], "ldot": [461, 802, 1068, 1305], "le": [656, 802, 1305], "lead": [14, 44, 128, 154, 233, 260, 262, 269, 319, 363, 477, 480, 537, 544, 552, 553, 637, 638, 682, 684, 734, 768, 786, 802, 852, 870, 871, 899, 916, 960, 1144, 1159, 1208, 1210, 1254, 1256, 1305], "leap": [425, 435, 1025, 1039], "leap_year": 425, "learn": [281, 319], "least": [102, 244, 319, 384, 385, 595, 659, 661, 802, 980, 981, 1175, 1231, 1233, 1305, 1326], "leav": [6, 235, 286, 319, 544, 856, 882, 916], "left": [15, 16, 39, 50, 157, 158, 159, 160, 210, 224, 225, 251, 288, 319, 406, 460, 461, 462, 463, 488, 490, 601, 614, 617, 619, 621, 623, 625, 628, 630, 632, 636, 708, 730, 738, 739, 743, 744, 746, 747, 752, 776, 789, 790, 792, 802, 842, 846, 847, 865, 883, 916, 1007, 1067, 1068, 1069, 1070, 1094, 1180, 1206, 1288, 1305, 1317, 1321, 1326], "left_clos": [406, 601, 802, 1007, 1180, 1305], "left_on": [224, 225, 288, 319, 846, 847, 883, 916], "left_right": [224, 319, 846, 916], "leftmost": [636, 802, 1206, 1305, 1328], "len": [12, 39, 164, 168, 184, 223, 244, 296, 300, 305, 319, 399, 553, 564, 566, 612, 735, 758, 802, 825, 885, 890, 894, 899, 916, 921, 1000, 1190, 1305], "len_byt": [12, 392, 670, 988, 1242], "len_char": [391, 669, 987, 1241], "length": [58, 59, 76, 139, 145, 148, 162, 166, 208, 210, 251, 264, 319, 322, 391, 405, 439, 452, 538, 544, 565, 608, 609, 612, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 645, 665, 669, 670, 671, 672, 675, 677, 688, 697, 731, 774, 777, 778, 779, 793, 802, 842, 861, 865, 873, 916, 920, 987, 993, 1006, 1017, 1043, 1056, 1145, 1151, 1172, 1186, 1187, 1190, 1192, 1193, 1194, 1195, 1196, 1197, 1199, 1200, 1201, 1218, 1237, 1241, 1242, 1243, 1244, 1247, 1249, 1260, 1269, 1305, 1322, 1323, 1326], "leq": [460, 462, 463, 802, 1067, 1069, 1070, 1305], "less": [148, 225, 319, 474, 504, 551, 552, 680, 802, 847, 916, 1252, 1336], "letter": [197, 302, 313, 319, 464, 652, 660, 662, 664, 675, 695, 750, 802, 835, 896, 907, 916, 922, 1224, 1232, 1234, 1236, 1247, 1267, 1328], "level": [10, 39, 40, 41, 44, 48, 131, 148, 151, 152, 153, 203, 229, 240, 266, 271, 319, 323, 470, 802, 814, 875, 916, 1280, 1305, 1333], "lexic": [62, 922, 990], "lf": [45, 46, 47, 48, 53, 817, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 858, 859, 860, 861, 862, 863, 864, 866, 867, 869, 871, 872, 873, 874, 876, 877, 878, 879, 880, 882, 883, 884, 885, 886, 888, 889, 890, 894, 898, 916, 1322, 1333, 1336], "lf1": [781, 875, 916, 1318, 1320, 1334], "lf2": [781, 875, 916, 1318, 1320, 1334], "lf3": [916, 1318], "lf4": [916, 1318], "lf5": 916, "lf6": 916, "lf_other": [888, 916], "lib": [802, 1280, 1305], "librari": [1, 104, 136, 139, 552, 802, 920, 1336], "life": [460, 462, 463, 802, 1067, 1069, 1070, 1305], "lifetim": [173, 813, 1320], "light": [39, 319], "like": [34, 36, 38, 40, 41, 42, 43, 44, 57, 122, 132, 134, 135, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 189, 210, 217, 219, 224, 254, 259, 276, 277, 319, 322, 408, 414, 476, 516, 552, 570, 604, 659, 683, 684, 715, 798, 802, 819, 824, 829, 842, 916, 920, 1014, 1123, 1182, 1231, 1294, 1305, 1310], "limit": [10, 11, 48, 136, 137, 170, 200, 319, 371, 469, 475, 802, 837, 916, 1076, 1305, 1323, 1332], "line": [10, 20, 39, 134, 135, 139, 148, 208, 217, 219, 319, 322, 659, 1231, 1305, 1310], "line_termin": [36, 45, 319, 916], "linear": [188, 216, 246, 311, 319, 488, 489, 511, 556, 602, 624, 625, 732, 733, 775, 802, 828, 845, 862, 905, 916, 1008, 1092, 1093, 1118, 1181, 1197, 1305], "lineitem": [130, 135, 137], "list": [1, 13, 38, 39, 50, 51, 53, 56, 57, 59, 65, 80, 96, 121, 123, 124, 125, 127, 128, 130, 132, 134, 135, 137, 138, 139, 140, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 162, 163, 164, 168, 185, 190, 194, 196, 197, 201, 207, 209, 210, 214, 222, 239, 242, 251, 252, 253, 254, 257, 265, 272, 273, 281, 283, 284, 285, 287, 293, 298, 299, 319, 329, 356, 367, 368, 369, 406, 413, 466, 472, 477, 486, 494, 552, 553, 565, 566, 594, 601, 607, 610, 615, 616, 618, 620, 622, 624, 627, 629, 631, 646, 647, 658, 660, 662, 664, 678, 698, 700, 701, 708, 727, 729, 732, 743, 744, 746, 747, 749, 757, 759, 762, 764, 782, 784, 790, 798, 802, 826, 833, 835, 838, 841, 842, 867, 874, 880, 881, 886, 888, 892, 893, 916, 921, 922, 953, 964, 965, 966, 993, 1007, 1013, 1066, 1072, 1077, 1081, 1084, 1090, 1091, 1099, 1159, 1180, 1188, 1192, 1193, 1194, 1195, 1196, 1197, 1199, 1200, 1201, 1224, 1230, 1232, 1234, 1236, 1247, 1250, 1285, 1288, 1305, 1314, 1319, 1323, 1325, 1335, 1336], "list_of_seri": 764, "listtostructwidthstrategi": [544, 1151], "lit": [1, 330, 372, 490, 561, 577, 663, 731, 732, 738, 752, 774, 777, 793, 802, 1076, 1305], "liter": [15, 16, 20, 36, 38, 40, 44, 45, 46, 47, 48, 136, 144, 146, 148, 151, 152, 153, 167, 168, 169, 239, 257, 258, 262, 288, 293, 294, 319, 330, 372, 395, 417, 458, 459, 467, 474, 479, 481, 490, 504, 551, 561, 573, 575, 588, 589, 599, 608, 609, 651, 652, 653, 662, 663, 664, 673, 674, 675, 702, 703, 711, 720, 722, 724, 730, 731, 732, 733, 741, 742, 745, 758, 762, 766, 768, 771, 780, 784, 786, 788, 802, 837, 867, 868, 871, 883, 886, 887, 916, 922, 968, 995, 1017, 1064, 1074, 1094, 1171, 1186, 1187, 1205, 1207, 1210, 1223, 1224, 1225, 1234, 1235, 1236, 1245, 1246, 1247, 1305, 1328], "littl": [253, 319], "lmn": 922, "ln": [460, 461, 462, 463, 802, 1067, 1068, 1069, 1070, 1305, 1326], "ln_a": 1327, "load": [3, 5, 6, 124, 126, 136, 138, 139, 145, 149, 150, 167, 169, 319, 802, 814, 916, 920, 1336], "load_from_fil": [2, 5, 6], "load_sheet_by_nam": 139, "load_workbook": 139, "loader": [281, 319], "lobster": [663, 1235], "loc": [319, 323], "local": [4, 38, 136, 138, 149, 150, 153, 319, 452, 596, 597, 802, 986, 989, 1019, 1020, 1043, 1046, 1056, 1176, 1177, 1305, 1315], "localhost": 136, "localis": [439, 452, 1056], "locat": [39, 146, 148, 151, 153, 198, 249, 279, 285, 319, 636, 802, 881, 916, 1073, 1081, 1205, 1206, 1305], "lock": 170, "log": [29, 52, 388, 457, 549, 575, 599, 710, 802, 1062, 1305, 1326], "log10": [802, 1305, 1326], "log10_a": 1327, "log16_a": 1327, "log1p": [802, 1305, 1326], "log1p_a": 1327, "log2": 1326, "logarithm": [547, 548, 549, 802, 1154, 1155, 1156, 1305, 1327], "logic": [58, 229, 305, 319, 322, 323, 331, 333, 408, 553, 708, 719, 720, 721, 722, 764, 802, 829, 834, 846, 869, 899, 916, 929, 930, 1159, 1286, 1288, 1305, 1310], "london": [418, 422, 438, 1018, 1022, 1042], "london_timezon": [438, 1042], "london_to_amsterdam": [438, 1042], "long": [197, 235, 244, 286, 287, 319, 835, 856, 882, 916], "longer": [134, 135, 148], "longest": 544, "look": [10, 210, 319, 372, 544, 842, 916, 968], "lookup": 798, "loop": [553, 802], "lose": [415, 1015], "lossi": [134, 135, 148], "love": [652, 675, 1224, 1247], "low": [17, 136, 395, 601, 802, 1180, 1305], "low_memori": [134, 135, 144, 146, 148, 152, 153], "lower": [148, 188, 210, 246, 311, 319, 395, 490, 550, 578, 602, 606, 624, 625, 724, 743, 744, 746, 747, 775, 789, 790, 802, 828, 842, 862, 905, 916, 995, 1008, 1094, 1157, 1181, 1184, 1197, 1293, 1305, 1323, 1326], "lower_bound": [210, 319, 395, 490, 802, 842, 916, 995, 1094, 1293, 1305], "lowercas": [584, 693, 695, 1265, 1267, 1328], "lowest": [550, 802], "lru_cach": [229, 319, 553, 802, 1159, 1305], "lst": 163, "lt": [156, 470, 717, 802, 1305], "ltrim": 1326, "lyric": [652, 675, 1224, 1247], "lz4": [40, 41, 44, 46, 48, 319, 916], "lzo": [44, 48, 319, 916], "m": [65, 67, 224, 319, 414, 415, 417, 422, 423, 441, 443, 444, 455, 659, 687, 689, 690, 694, 745, 746, 747, 748, 754, 846, 916, 922, 1014, 1015, 1017, 1022, 1023, 1045, 1047, 1048, 1059, 1231, 1259, 1261, 1262, 1266, 1318, 1328, 1329], "m_2": [644, 802, 1217, 1305], "m_3": [644, 802, 1217, 1305], "m_i": [644, 802, 1217, 1305], "machin": 1336, "maco": 156, "made": [39, 136, 319, 444, 1048], "mai": [1, 31, 32, 33, 36, 38, 40, 44, 45, 46, 47, 48, 56, 57, 58, 66, 68, 71, 121, 123, 124, 125, 127, 131, 132, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 157, 159, 161, 162, 164, 165, 166, 167, 168, 169, 173, 188, 189, 196, 198, 210, 224, 225, 226, 229, 251, 259, 266, 276, 278, 281, 287, 288, 289, 319, 322, 323, 391, 405, 406, 408, 413, 414, 415, 426, 435, 439, 441, 452, 464, 485, 519, 544, 552, 553, 564, 567, 601, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 662, 664, 667, 669, 674, 729, 731, 738, 739, 743, 744, 746, 747, 752, 776, 778, 779, 789, 790, 802, 823, 824, 828, 829, 834, 842, 846, 847, 848, 852, 865, 869, 875, 883, 889, 890, 899, 916, 987, 989, 990, 1006, 1007, 1008, 1013, 1014, 1015, 1026, 1039, 1043, 1045, 1056, 1066, 1073, 1090, 1126, 1159, 1180, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1234, 1236, 1239, 1241, 1284, 1287, 1289, 1305, 1310, 1336], "main": [156, 824, 916], "maintain": [45, 46, 47, 48, 265, 319, 369, 545, 636, 647, 712, 727, 802, 828, 874, 916, 966, 1152, 1206, 1291, 1305], "maintain_ord": [45, 46, 47, 48, 209, 224, 242, 244, 265, 284, 289, 299, 301, 303, 306, 307, 308, 309, 310, 311, 312, 319, 329, 369, 388, 477, 480, 545, 553, 647, 710, 712, 727, 802, 824, 834, 841, 846, 861, 872, 874, 880, 893, 895, 897, 900, 901, 902, 903, 904, 905, 906, 916, 966, 1152, 1291, 1305], "maintainorderjoin": [224, 319, 846, 916], "major": [139, 276, 319], "make": [39, 58, 80, 121, 126, 134, 135, 138, 139, 140, 142, 146, 149, 236, 240, 247, 277, 289, 319, 322, 462, 463, 485, 584, 585, 594, 607, 679, 802, 857, 916, 920, 1069, 1070, 1090, 1251, 1286, 1305], "man": [676, 1248], "manag": [49, 88, 89, 813, 814, 1320, 1333], "mandatori": [39, 319], "mango": [656, 681, 1228, 1253], "mani": [136, 137, 153, 198, 319, 662, 664, 675, 1073, 1234, 1236, 1247, 1305, 1309], "manner": 136, "many_to_mani": [224, 319, 846, 916], "many_to_on": [224, 319, 846, 916], "map": [80, 123, 124, 134, 135, 136, 137, 140, 141, 146, 147, 148, 151, 164, 181, 184, 202, 222, 229, 248, 252, 253, 254, 256, 272, 319, 330, 439, 452, 552, 553, 577, 579, 580, 582, 584, 585, 608, 609, 675, 715, 763, 802, 820, 863, 866, 916, 921, 922, 1008, 1043, 1056, 1159, 1186, 1187, 1247, 1294, 1305, 1315, 1317, 1318, 1333], "map_": 108, "map_batch": [802, 916], "map_el": [99, 229, 319, 552, 718, 802, 1305], "map_field": [581, 583], "map_row": 319, "mapelementsstrategi": [553, 802], "mapping_strategi": [594, 802], "march": [441, 1045], "mariadb": 137, "mark": [39, 131, 319, 389, 802, 984, 1305], "mark_area": [1305, 1310], "mark_attr": [319, 322, 1305, 1310], "mark_bar": [319, 322, 1305, 1310], "mark_lin": [319, 322], "mark_point": [319, 322], "markdown": [7, 20, 173], "marker": [39, 319], "mask": [153, 217, 219, 319, 373, 491, 493, 496, 501, 596, 597, 651, 654, 663, 802, 969, 1077, 1094, 1095, 1098, 1101, 1107, 1176, 1177, 1207, 1223, 1226, 1235, 1296, 1305], "mass": [460, 462, 463, 802, 1067, 1069, 1070, 1305], "massag": [235, 286, 319, 856, 882, 916], "match": [38, 39, 58, 65, 110, 121, 123, 124, 125, 127, 134, 136, 143, 144, 146, 152, 153, 157, 158, 159, 160, 181, 200, 224, 225, 252, 288, 319, 560, 561, 562, 608, 609, 626, 651, 652, 653, 656, 659, 660, 662, 663, 664, 667, 668, 673, 674, 675, 681, 687, 689, 690, 792, 798, 802, 820, 837, 846, 847, 883, 916, 922, 1065, 1186, 1187, 1198, 1223, 1224, 1225, 1228, 1231, 1232, 1234, 1235, 1236, 1239, 1240, 1245, 1246, 1247, 1253, 1259, 1261, 1262, 1305, 1328], "matches_overlap": [662, 664, 1236], "matches_supertyp": [200, 319, 837, 916], "materi": [229, 254, 305, 319, 823, 861, 899, 909, 916, 922, 1159, 1305], "materialis": [222, 223, 252, 253, 319], "math": [1, 10, 54, 244, 319, 407, 802, 997, 999, 1215, 1278, 1305, 1326, 1330, 1332], "mathemat": [711, 749, 802, 1326], "mathshortcut": [1, 54], "matplotlib": [156, 568, 861, 872, 916], "matter": [210, 222, 251, 253, 254, 273, 319, 614, 683, 684, 802, 842, 865, 916], "max": [25, 39, 44, 48, 131, 188, 200, 209, 231, 244, 251, 319, 323, 401, 469, 544, 552, 594, 604, 608, 609, 614, 616, 617, 637, 680, 731, 743, 746, 766, 782, 802, 828, 837, 841, 865, 916, 1002, 1008, 1076, 1151, 1182, 1193, 1208, 1252, 1305, 1314, 1323, 1326], "max_a": [251, 319, 614, 802, 865, 916], "max_binary_s": 136, "max_col": [162, 164], "max_colname_length": [208, 319], "max_color": [39, 319], "max_data_s": 168, "max_elem": 1323, "max_horizont": [319, 765], "max_items_per_column": [208, 319], "max_level": 131, "max_siz": [163, 164, 166, 168, 1336], "max_text_s": 136, "max_valu": 1336, "max_width": [544, 1151], "maxim": [306, 342, 802, 900, 939, 1305], "maximum": [10, 26, 36, 44, 45, 48, 66, 124, 127, 134, 135, 136, 139, 143, 144, 145, 148, 152, 154, 162, 163, 164, 166, 168, 208, 210, 230, 231, 319, 349, 392, 509, 554, 586, 596, 604, 665, 667, 670, 677, 688, 765, 766, 802, 842, 853, 916, 946, 988, 1027, 1116, 1160, 1168, 1176, 1182, 1237, 1239, 1242, 1249, 1260, 1305, 1322], "mb": [196, 319, 376, 1066, 1305], "me": [652, 675, 695, 1224, 1247, 1267], "mean": [44, 48, 134, 135, 140, 146, 148, 151, 173, 188, 200, 209, 210, 225, 233, 244, 251, 289, 298, 319, 435, 439, 452, 466, 469, 474, 614, 617, 618, 619, 621, 623, 625, 628, 630, 632, 644, 650, 659, 666, 743, 744, 746, 747, 748, 768, 789, 790, 792, 802, 828, 837, 841, 842, 847, 852, 865, 892, 916, 1008, 1039, 1043, 1056, 1072, 1076, 1194, 1217, 1222, 1231, 1238, 1305, 1322, 1323], "mean_horizont": [319, 767], "measur": [235, 286, 319, 323, 856, 882, 916], "measure_a": [319, 323], "measure_b": [319, 323], "median": [188, 244, 319, 469, 620, 621, 802, 828, 888, 916, 1008, 1195, 1305, 1326], "mediat": 1333, "medium": [39, 319], "megan": [236, 319, 857, 916], "melt": [286, 319, 882, 916], "member": [210, 319, 842, 916, 1099, 1305], "membership": [351, 512, 948, 1119], "memori": [14, 44, 48, 56, 57, 58, 121, 122, 125, 126, 127, 134, 135, 136, 138, 139, 140, 144, 146, 148, 149, 151, 152, 153, 177, 198, 229, 253, 254, 263, 277, 305, 319, 594, 605, 639, 802, 823, 824, 891, 916, 1073, 1159, 1183, 1211, 1212, 1286, 1305], "memory_map": [140, 146, 151], "memory_resourc": 891, "merg": [38, 224, 225, 236, 319, 846, 847, 857, 916], "merge_sort": [319, 916], "messi": [659, 661, 1231, 1233], "met": 792, "meta": [90, 408, 657, 802, 1229], "metadata": [0, 150, 814], "method": [4, 31, 32, 33, 34, 37, 38, 39, 40, 41, 49, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 120, 122, 132, 134, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 146, 147, 154, 161, 164, 168, 173, 175, 184, 188, 189, 192, 193, 198, 205, 209, 216, 222, 229, 240, 246, 252, 253, 254, 262, 284, 293, 300, 305, 311, 319, 328, 331, 332, 363, 395, 408, 441, 444, 458, 459, 467, 474, 476, 479, 481, 488, 504, 537, 551, 553, 571, 573, 575, 577, 578, 580, 582, 584, 585, 588, 589, 590, 593, 599, 602, 604, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 638, 652, 662, 664, 675, 683, 684, 685, 686, 691, 697, 703, 711, 713, 718, 734, 764, 775, 794, 795, 797, 798, 802, 803, 804, 807, 808, 809, 810, 811, 814, 824, 828, 829, 831, 832, 845, 862, 871, 880, 886, 891, 894, 899, 905, 916, 921, 924, 931, 960, 995, 1008, 1045, 1048, 1063, 1064, 1073, 1074, 1083, 1085, 1092, 1111, 1144, 1158, 1159, 1170, 1171, 1181, 1182, 1197, 1210, 1224, 1234, 1236, 1247, 1263, 1269, 1288, 1297, 1299, 1301, 1305, 1306, 1309, 1311, 1312, 1313, 1315, 1319], "metric": 136, "micro": [440, 1044], "microsecond": [65, 67, 210, 222, 225, 251, 253, 254, 273, 289, 319, 435, 439, 444, 447, 452, 461, 614, 617, 619, 621, 623, 625, 628, 630, 632, 745, 746, 747, 748, 788, 789, 790, 802, 842, 847, 861, 865, 916, 922, 1039, 1043, 1051, 1056, 1068, 1305, 1329], "microsoft": [39, 319], "mid_color": [39, 319], "midnight": 81, "midpoint": [188, 246, 311, 319, 602, 624, 625, 775, 802, 828, 862, 905, 916, 1008, 1181, 1197, 1305], "might": [134, 135, 148, 170, 224, 244, 277, 286, 319, 553, 713, 802, 846, 874, 882, 916], "millennia": 1329, "millennium": 1329, "milli": [440, 1044], "millisecond": [210, 225, 251, 289, 319, 424, 430, 435, 439, 448, 452, 461, 614, 617, 619, 621, 623, 625, 628, 630, 632, 746, 747, 748, 789, 790, 802, 842, 847, 865, 916, 922, 1039, 1043, 1052, 1056, 1068, 1305, 1329], "milliseconds_diff": [447, 448, 450], "mimic": 732, "min": [39, 44, 48, 188, 200, 238, 244, 251, 319, 402, 469, 553, 594, 604, 614, 622, 623, 743, 746, 771, 780, 802, 828, 837, 865, 916, 920, 1003, 1008, 1076, 1182, 1196, 1305, 1323, 1326, 1329, 1336], "min_a": [251, 319, 614, 802, 865, 916], "min_col": [162, 164], "min_color": [39, 319], "min_elem": 1323, "min_horizont": [319, 770, 780], "min_period": [405, 460, 462, 463, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 778, 779, 802, 1006, 1067, 1069, 1070, 1192, 1193, 1194, 1195, 1196, 1197, 1199, 1200, 1201, 1305], "min_siz": [163, 164, 166, 168, 1336], "min_valu": 1336, "mincol": 162, "minim": [309, 343, 350, 510, 639, 647, 802, 903, 940, 947, 1117, 1163, 1211, 1305], "minimum": [44, 48, 162, 163, 164, 166, 168, 203, 237, 238, 319, 460, 462, 463, 572, 587, 597, 604, 770, 771, 802, 858, 916, 1033, 1067, 1069, 1070, 1169, 1177, 1182, 1305, 1322, 1336], "minu": [435, 590, 802, 1039], "minut": [210, 225, 251, 289, 319, 424, 427, 429, 434, 435, 439, 440, 449, 452, 461, 614, 617, 619, 621, 623, 625, 628, 630, 632, 745, 746, 747, 748, 788, 789, 790, 802, 842, 847, 865, 916, 922, 1039, 1043, 1053, 1056, 1068, 1305, 1329], "minutes_diff": 449, "misc": 1320, "miscellan": 814, "mismatch": [58, 113, 144, 152, 157, 159], "miss": [58, 134, 135, 148, 199, 205, 319, 371, 460, 462, 463, 468, 475, 497, 498, 544, 802, 836, 916, 1067, 1069, 1070, 1075, 1305], "missing_utf8_is_empty_str": [134, 135, 148], "mix": [11, 225, 277, 319, 731, 781, 847, 875, 916, 922, 1008, 1305], "mixin": 1, "mlnm": 428, "mm": [39, 319], "mn": 1328, "mno": [16, 20], "mnop": 1328, "mo": 748, "mocha": 922, "mod": [802, 1326], "mode": [37, 38, 45, 46, 47, 48, 56, 57, 157, 159, 244, 266, 319, 660, 774, 777, 793, 802, 823, 824, 834, 916, 1232, 1305, 1314, 1315, 1333], "model": [281, 319], "modifi": [134, 135, 148, 170, 173, 198, 214, 221, 222, 291, 319, 345, 438, 455, 651, 659, 660, 663, 673, 674, 693, 695, 696, 802, 931, 1042, 1059, 1073, 1223, 1231, 1232, 1235, 1245, 1246, 1265, 1267, 1268, 1305], "modul": [92, 100, 139, 801, 922, 1336], "modulu": [573, 802], "moment": [44, 186, 319, 502, 644, 802, 1109, 1217, 1305], "mon": [319, 322, 1329], "mondai": [210, 319, 413, 452, 454, 729, 842, 916, 1013, 1056, 1058], "monkei": [671, 672, 1243, 1244], "month": [210, 225, 251, 289, 319, 421, 432, 433, 435, 439, 441, 444, 452, 461, 614, 617, 619, 621, 623, 625, 628, 630, 632, 742, 743, 744, 745, 746, 747, 748, 789, 790, 802, 842, 847, 865, 916, 1021, 1036, 1037, 1039, 1043, 1045, 1048, 1056, 1068, 1305, 1329], "month_nam": [441, 444], "monthbegin": [433, 1037], "monthend": [432, 1036], "moos": 922, "more": [20, 39, 44, 48, 50, 58, 88, 89, 118, 121, 122, 123, 124, 125, 126, 127, 136, 137, 138, 139, 143, 144, 145, 146, 149, 150, 152, 157, 159, 164, 173, 175, 186, 188, 192, 201, 221, 222, 229, 235, 240, 252, 253, 255, 266, 276, 277, 281, 284, 286, 305, 319, 323, 332, 369, 391, 470, 474, 482, 502, 532, 545, 549, 552, 553, 593, 594, 635, 644, 660, 669, 687, 689, 690, 712, 723, 735, 751, 757, 760, 767, 769, 772, 773, 782, 792, 798, 802, 828, 831, 832, 838, 856, 875, 880, 882, 891, 916, 920, 922, 924, 966, 987, 989, 1008, 1086, 1087, 1109, 1139, 1152, 1159, 1204, 1217, 1232, 1241, 1259, 1261, 1262, 1284, 1286, 1291, 1305, 1320, 1321, 1331, 1334, 1335, 1336], "more_bi": [242, 265, 319, 647, 802, 874, 916], "more_column": [197, 285, 319, 464, 750, 802, 835, 881, 916, 922], "more_expr": [594, 727, 730, 731, 732, 733, 802], "more_nam": [698, 798], "most": [39, 121, 134, 135, 137, 148, 157, 158, 159, 160, 277, 319, 381, 382, 565, 574, 595, 609, 680, 802, 977, 978, 1164, 1175, 1187, 1252, 1286, 1305, 1317, 1333], "mostli": [271, 319, 470, 802], "move": [244, 254, 319, 413, 460, 461, 462, 463, 616, 618, 622, 629, 802, 1013, 1067, 1068, 1069, 1070, 1193, 1194, 1196, 1200, 1305], "mr": 891, "mssql": [37, 319], "much": [229, 287, 305, 319, 391, 392, 405, 519, 553, 669, 670, 764, 802, 899, 987, 988, 1006, 1126, 1159, 1241, 1242, 1305], "mul": 802, "multi": [8, 39, 134, 135, 281, 319, 464, 659, 802, 1231], "multi_fram": [39, 319], "multicolselector": 178, "multiindexselector": [178, 926], "multipl": [39, 56, 57, 58, 105, 134, 135, 139, 145, 148, 151, 152, 153, 162, 164, 168, 190, 196, 198, 201, 209, 210, 214, 223, 226, 242, 244, 254, 257, 260, 265, 288, 293, 298, 319, 388, 519, 552, 558, 565, 574, 575, 594, 608, 610, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 647, 698, 710, 727, 735, 752, 763, 765, 770, 776, 782, 785, 792, 798, 802, 814, 823, 824, 830, 838, 841, 842, 848, 867, 870, 874, 883, 886, 892, 899, 916, 931, 961, 1066, 1073, 1126, 1146, 1164, 1186, 1188, 1219, 1305, 1318, 1323], "multipli": [552, 615, 616, 618, 620, 622, 624, 627, 629, 631, 702, 802, 1192, 1193, 1194, 1195, 1196, 1197, 1199, 1200, 1201, 1305], "multithread": [265, 319, 647, 727, 802, 874, 916, 961, 1146, 1219, 1305], "must": [39, 68, 122, 123, 134, 138, 146, 149, 150, 153, 154, 188, 197, 210, 225, 226, 236, 244, 251, 252, 319, 406, 544, 553, 568, 601, 608, 609, 614, 675, 731, 743, 744, 792, 802, 828, 835, 842, 847, 848, 852, 857, 865, 872, 891, 916, 920, 1007, 1008, 1180, 1186, 1187, 1247, 1305], "mutual": [252, 319], "my": [150, 154, 319, 322, 1305, 1310], "my_column": 899, "my_column_": [283, 319], "my_column_0": [283, 319], "my_column_1": [283, 319], "my_column_2": [283, 319], "my_custom_aggreg": 764, "my_fil": 140, "my_holidai": [413, 729, 1013], "my_larger_than_ram_fil": [45, 46, 47, 48, 916], "my_long_fil": 148, "my_struct": 784, "mydf": 148, "myrol": 137, "mysql": 137, "n": [1, 12, 13, 17, 25, 36, 43, 45, 51, 52, 53, 54, 65, 67, 130, 134, 135, 139, 144, 148, 164, 182, 198, 204, 210, 212, 222, 223, 228, 229, 253, 254, 255, 262, 267, 270, 273, 275, 290, 302, 304, 313, 319, 335, 363, 368, 376, 387, 388, 391, 392, 405, 409, 413, 415, 417, 423, 443, 455, 461, 467, 470, 478, 484, 506, 514, 520, 522, 532, 533, 537, 540, 542, 544, 546, 595, 598, 607, 627, 628, 631, 632, 635, 638, 644, 649, 665, 669, 670, 673, 674, 679, 680, 682, 683, 688, 690, 705, 709, 710, 711, 715, 716, 718, 736, 745, 746, 747, 748, 754, 756, 774, 777, 778, 779, 780, 783, 787, 791, 793, 802, 821, 840, 842, 843, 851, 871, 876, 878, 884, 896, 898, 907, 916, 922, 960, 965, 972, 983, 987, 988, 994, 1006, 1009, 1013, 1015, 1017, 1023, 1047, 1059, 1068, 1073, 1074, 1082, 1089, 1113, 1121, 1127, 1129, 1139, 1140, 1144, 1149, 1151, 1175, 1199, 1201, 1204, 1210, 1217, 1221, 1237, 1241, 1242, 1245, 1246, 1251, 1252, 1260, 1262, 1277, 1283, 1290, 1294, 1295, 1305, 1317, 1318, 1325, 1328, 1329, 1331, 1333, 1336], "n0": [368, 544], "n00": [965, 1151], "n01": [965, 1151], "n02": [965, 1151], "n1": [368, 544], "n2": [1, 368], "n3": 1, "n_1": [470, 802], "n_2": [470, 802], "n_3": [470, 802], "n_bar": 1322, "n_bit": 1328, "n_byte": [376, 391, 392, 669, 670, 1328], "n_char": [391, 392, 669, 670, 1328], "n_chunk": [319, 931, 1073, 1183, 1305], "n_elem": 1323, "n_even": 922, "n_field_strategi": [544, 1151], "n_film": 1314, "n_foo_uniqu": 1322, "n_kilobyt": 376, "n_row": [132, 134, 135, 140, 142, 144, 146, 148, 151, 152, 153, 223, 319, 916], "n_thread": [134, 135], "n_uniqu": [319, 335, 802, 1305], "na": [278, 319, 681, 1287, 1305], "naiv": [417, 418, 690, 1017, 1018, 1262], "name": [1, 18, 22, 24, 32, 34, 36, 37, 39, 45, 51, 52, 53, 54, 58, 80, 97, 121, 123, 124, 125, 126, 127, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 159, 160, 161, 162, 164, 167, 168, 169, 180, 181, 184, 185, 190, 191, 192, 193, 197, 201, 202, 205, 206, 208, 209, 220, 221, 222, 224, 225, 226, 229, 231, 233, 235, 236, 238, 242, 244, 248, 252, 253, 254, 256, 257, 258, 265, 266, 269, 272, 274, 276, 277, 280, 281, 282, 283, 284, 285, 286, 287, 288, 293, 294, 295, 296, 297, 298, 304, 319, 323, 330, 368, 372, 373, 375, 377, 388, 395, 406, 441, 444, 464, 470, 490, 497, 498, 499, 500, 544, 553, 558, 562, 564, 566, 570, 594, 601, 611, 647, 660, 661, 673, 674, 675, 698, 700, 702, 710, 715, 719, 720, 721, 722, 723, 725, 726, 727, 730, 731, 732, 733, 734, 735, 736, 737, 740, 741, 750, 751, 756, 757, 760, 765, 766, 767, 768, 769, 770, 771, 772, 775, 778, 779, 780, 781, 783, 784, 785, 786, 787, 791, 792, 798, 802, 818, 820, 825, 826, 830, 831, 832, 835, 838, 841, 846, 847, 848, 856, 857, 863, 866, 867, 868, 874, 875, 879, 880, 881, 882, 883, 886, 887, 888, 889, 890, 892, 898, 916, 920, 921, 922, 928, 965, 994, 1007, 1045, 1048, 1065, 1151, 1180, 1185, 1231, 1232, 1233, 1245, 1246, 1270, 1273, 1281, 1282, 1287, 1294, 1305, 1310, 1315, 1316, 1317, 1318, 1319, 1320, 1332, 1333, 1336], "name_gener": [283, 319], "named_agg": [298, 892], "named_bi": [209, 319, 841, 916], "named_expr": [257, 258, 293, 294, 319, 702, 780, 784, 867, 868, 886, 887, 916], "named_fram": [1318, 1333], "nameless": 126, "namespac": [1, 136, 318, 319, 322, 698, 781, 801, 814, 914, 915, 1305, 1310, 1336], "nan": [126, 164, 177, 192, 199, 277, 278, 319, 411, 412, 458, 459, 468, 479, 481, 488, 497, 498, 499, 500, 504, 551, 554, 572, 586, 587, 588, 589, 615, 641, 711, 734, 802, 831, 836, 916, 934, 938, 1011, 1012, 1075, 1102, 1103, 1168, 1169, 1192, 1214, 1286, 1287, 1305, 1336], "nan_as_nul": 177, "nan_max": [802, 1305], "nan_min": [802, 1305], "nan_to_nul": [126, 319, 916, 1305], "nana": 1328, "nanmax": [586, 587, 802, 1168, 1169, 1305], "nanosecond": [81, 210, 225, 251, 289, 319, 435, 439, 440, 450, 452, 461, 614, 617, 619, 621, 623, 625, 628, 630, 632, 746, 747, 748, 789, 790, 802, 842, 847, 865, 916, 1039, 1043, 1044, 1054, 1056, 1068, 1305, 1329], "nansum": [615, 802, 1192, 1305], "nativ": [10, 37, 134, 136, 139, 140, 142, 146, 222, 229, 253, 254, 273, 277, 305, 319, 553, 764, 781, 802, 808, 875, 899, 916, 1159, 1286, 1305, 1309, 1333, 1336], "natur": [549, 802, 1156, 1305, 1321, 1327], "ndarrai": [125, 175, 201, 277, 319, 477, 636, 802, 838, 916, 924, 1081, 1205, 1206, 1286, 1305], "ndjson": [47, 916], "ne": [589, 802, 1171, 1305], "ne_miss": [201, 319, 802, 838, 916, 1064, 1305], "nearest": [52, 188, 225, 246, 311, 319, 394, 473, 488, 602, 624, 625, 775, 802, 828, 847, 862, 905, 916, 992, 1008, 1080, 1092, 1181, 1197, 1305, 1327], "nearest_pow2": 52, "necessari": [36, 37, 45, 49, 89, 139, 277, 319, 916, 1286, 1305], "need": [58, 91, 100, 128, 134, 135, 137, 146, 148, 151, 153, 173, 210, 251, 254, 263, 319, 322, 544, 614, 639, 673, 674, 675, 691, 748, 774, 777, 793, 802, 842, 865, 916, 1211, 1245, 1246, 1247, 1263, 1305, 1310, 1336], "neg": [13, 64, 65, 66, 67, 134, 135, 140, 142, 146, 155, 212, 228, 251, 262, 264, 270, 296, 319, 363, 537, 538, 598, 599, 614, 638, 645, 665, 677, 688, 802, 865, 871, 873, 889, 890, 916, 922, 960, 1089, 1113, 1144, 1145, 1178, 1210, 1218, 1237, 1249, 1260, 1277, 1305], "negat": [591, 802, 1173, 1305], "neither": [128, 139, 145, 255, 319, 368, 544, 965, 1151], "nest": [49, 128, 131, 165, 166, 196, 319, 814, 1066, 1305, 1333, 1336], "nest_asyncio": 156, "nesting_level": 165, "net": [660, 1232], "netherland": [225, 319, 847, 916], "never": [36, 45, 136, 224, 225, 252, 319, 846, 847, 916], "new": [37, 38, 39, 148, 173, 178, 204, 214, 215, 229, 240, 241, 244, 248, 283, 285, 287, 288, 293, 294, 319, 330, 417, 466, 476, 478, 488, 578, 579, 594, 608, 609, 613, 673, 674, 679, 680, 698, 700, 798, 802, 814, 840, 863, 881, 883, 886, 887, 899, 916, 926, 928, 1017, 1072, 1082, 1172, 1185, 1186, 1187, 1191, 1245, 1246, 1251, 1252, 1270, 1273, 1282, 1305, 1333, 1335], "new_column": [134, 135, 139, 148], "new_dat": 435, "new_df": [288, 319, 883, 916], "new_fil": [34, 36, 40, 41, 44, 319], "new_from_index": 1305, "new_id": [283, 319], "new_lf": [883, 916], "new_tabl": 1335, "new_valu": [738, 739, 752, 776], "new_york": 746, "newli": 50, "newlin": [43, 144, 152, 319], "next": [18, 52, 210, 225, 251, 289, 319, 371, 413, 435, 439, 452, 604, 614, 617, 619, 621, 623, 625, 628, 630, 632, 743, 744, 746, 747, 789, 790, 802, 842, 847, 865, 916, 1013, 1039, 1043, 1056, 1182, 1305], "next_batch": 135, "next_pow2": 52, "nfruit": 688, "nl": [413, 729, 1013], "nnel_id": 128, "no1": 922, "no_default": [205, 319, 608, 609, 675, 802, 1186, 1187, 1247, 1305], "no_optim": [45, 46, 47, 48, 56, 57, 823, 824, 852, 861, 916], "nodataerror": [134, 135, 139, 145, 148], "nodd": [659, 1231], "node": [819, 823, 844, 852, 856, 861, 863, 916], "nodefault": [205, 319, 608, 609, 675, 802, 1186, 1187, 1247, 1305], "non": [4, 5, 36, 38, 39, 45, 50, 65, 66, 126, 155, 180, 187, 223, 235, 251, 257, 258, 262, 282, 283, 286, 288, 293, 294, 319, 371, 387, 388, 391, 395, 399, 400, 413, 438, 475, 490, 544, 552, 553, 559, 594, 595, 608, 609, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 653, 660, 669, 673, 674, 675, 695, 697, 702, 709, 710, 720, 722, 730, 731, 732, 733, 735, 737, 741, 748, 766, 768, 771, 778, 779, 780, 784, 786, 802, 818, 827, 856, 865, 867, 868, 871, 879, 882, 883, 886, 887, 916, 920, 922, 983, 987, 995, 1000, 1001, 1008, 1013, 1042, 1094, 1151, 1159, 1175, 1186, 1187, 1192, 1193, 1194, 1195, 1196, 1197, 1199, 1200, 1201, 1210, 1225, 1232, 1241, 1245, 1246, 1267, 1269, 1286, 1290, 1305, 1325, 1333], "non_exist": [438, 1042], "non_numer": [36, 45, 319, 916], "none": [1, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 57, 59, 62, 65, 66, 67, 68, 76, 80, 89, 121, 123, 124, 125, 126, 127, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 173, 175, 176, 182, 187, 188, 192, 193, 199, 200, 201, 203, 205, 208, 210, 211, 216, 220, 224, 225, 227, 229, 232, 235, 240, 241, 244, 251, 252, 255, 259, 262, 264, 265, 271, 272, 274, 276, 277, 278, 281, 283, 284, 285, 286, 287, 288, 289, 300, 304, 319, 331, 333, 334, 346, 347, 348, 355, 356, 368, 371, 391, 392, 395, 399, 400, 401, 404, 406, 411, 412, 420, 435, 438, 444, 459, 460, 461, 462, 463, 464, 467, 468, 469, 475, 482, 483, 485, 488, 489, 490, 497, 498, 499, 500, 505, 507, 508, 515, 521, 523, 525, 532, 533, 534, 535, 536, 538, 544, 552, 553, 564, 567, 568, 569, 571, 576, 589, 590, 591, 592, 594, 595, 601, 604, 605, 608, 609, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 635, 638, 639, 640, 641, 645, 646, 650, 651, 653, 655, 656, 657, 660, 663, 665, 666, 667, 668, 669, 670, 671, 672, 677, 679, 680, 681, 682, 683, 684, 687, 688, 689, 690, 692, 694, 697, 698, 699, 700, 701, 708, 715, 720, 721, 722, 724, 730, 731, 732, 733, 734, 735, 737, 741, 743, 744, 745, 746, 747, 748, 750, 751, 758, 759, 760, 761, 762, 763, 764, 766, 768, 771, 777, 778, 779, 784, 786, 788, 789, 790, 792, 802, 821, 822, 824, 827, 828, 831, 832, 834, 836, 837, 838, 842, 845, 846, 847, 850, 852, 856, 859, 865, 869, 871, 872, 873, 874, 880, 881, 882, 883, 888, 891, 894, 898, 899, 908, 909, 916, 920, 921, 922, 924, 925, 929, 930, 932, 939, 940, 944, 945, 952, 953, 965, 974, 979, 982, 987, 988, 994, 995, 1000, 1001, 1007, 1008, 1010, 1011, 1012, 1020, 1027, 1028, 1029, 1033, 1042, 1048, 1062, 1064, 1067, 1068, 1069, 1070, 1074, 1075, 1076, 1078, 1086, 1088, 1090, 1092, 1093, 1094, 1104, 1105, 1108, 1109, 1110, 1112, 1114, 1115, 1118, 1122, 1128, 1130, 1132, 1139, 1140, 1141, 1142, 1143, 1145, 1151, 1159, 1160, 1161, 1162, 1163, 1171, 1174, 1180, 1181, 1182, 1186, 1187, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1199, 1200, 1201, 1204, 1205, 1206, 1207, 1210, 1213, 1214, 1217, 1218, 1221, 1222, 1223, 1225, 1227, 1228, 1229, 1232, 1235, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1249, 1251, 1252, 1253, 1254, 1255, 1256, 1259, 1260, 1261, 1262, 1264, 1266, 1269, 1272, 1280, 1282, 1283, 1284, 1286, 1287, 1288, 1294, 1295, 1305, 1314, 1316, 1317, 1318, 1320, 1323, 1325, 1329, 1333], "nonexist": [438, 1042], "nor": [139, 145, 255, 319], "normal": [38, 131, 210, 319, 457, 502, 644, 715, 802, 842, 916, 1062, 1109, 1217, 1294, 1305], "normalised_scor": 136, "norowsreturnederror": [252, 319], "north": 68, "not_": [293, 319, 802, 886, 916, 922, 1305], "not_c": [293, 319, 886, 916], "notabl": 136, "notat": [11, 39, 319], "note": [4, 10, 20, 38, 39, 44, 49, 50, 57, 64, 65, 67, 81, 88, 89, 121, 122, 123, 125, 127, 128, 134, 136, 137, 138, 139, 143, 144, 149, 150, 152, 154, 157, 159, 162, 164, 168, 170, 173, 177, 184, 186, 188, 189, 192, 199, 201, 210, 211, 220, 221, 222, 224, 225, 229, 240, 243, 244, 248, 251, 252, 253, 254, 259, 262, 266, 273, 276, 278, 281, 283, 284, 286, 288, 289, 293, 295, 296, 319, 363, 391, 392, 395, 403, 404, 408, 411, 412, 418, 432, 433, 435, 439, 444, 452, 461, 468, 474, 476, 483, 490, 497, 498, 516, 519, 537, 544, 553, 567, 568, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 608, 609, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 638, 640, 644, 650, 651, 652, 658, 659, 660, 661, 662, 663, 664, 665, 669, 670, 673, 674, 675, 677, 682, 683, 684, 687, 688, 695, 697, 698, 704, 711, 720, 722, 729, 738, 743, 744, 746, 747, 748, 752, 762, 774, 776, 777, 781, 789, 790, 792, 793, 798, 802, 813, 824, 828, 829, 831, 836, 838, 842, 847, 863, 865, 869, 871, 872, 874, 875, 880, 882, 883, 886, 889, 890, 916, 922, 960, 987, 988, 995, 1004, 1005, 1008, 1011, 1012, 1018, 1036, 1037, 1039, 1043, 1048, 1056, 1068, 1075, 1088, 1094, 1123, 1126, 1144, 1159, 1186, 1187, 1191, 1198, 1205, 1207, 1210, 1212, 1217, 1222, 1223, 1224, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1241, 1242, 1245, 1246, 1247, 1249, 1254, 1255, 1256, 1259, 1260, 1267, 1269, 1276, 1287, 1289, 1305, 1314, 1315, 1319, 1320, 1331, 1333], "noth": [20, 659, 668, 1231, 1240], "notic": [136, 201, 319, 838, 916, 1305], "notimplementederror": 177, "now": [50, 139, 251, 277, 319, 561, 865, 916, 1286, 1305], "np": [125, 175, 201, 277, 319, 477, 552, 636, 802, 838, 916, 924, 1081, 1097, 1100, 1102, 1103, 1205, 1206, 1305], "npt": [175, 924], "nr": [302, 313, 896, 907], "nth": [204, 319, 478, 680, 798, 802, 840, 916, 1082, 1252, 1305], "nthe": [659, 1231], "nthose": [659, 1231], "nu": 656, "null": [16, 36, 38, 44, 45, 48, 50, 58, 65, 123, 124, 127, 131, 134, 135, 144, 146, 148, 152, 153, 154, 161, 164, 168, 177, 180, 181, 182, 187, 188, 192, 193, 195, 200, 201, 203, 216, 224, 232, 233, 234, 241, 244, 246, 262, 265, 267, 268, 269, 272, 277, 278, 282, 285, 288, 290, 293, 300, 319, 331, 333, 334, 344, 347, 348, 355, 356, 363, 364, 371, 373, 387, 388, 389, 391, 392, 395, 399, 400, 401, 404, 409, 411, 412, 435, 438, 445, 446, 447, 448, 449, 450, 451, 459, 460, 461, 462, 463, 464, 467, 468, 469, 470, 475, 482, 488, 489, 497, 498, 499, 500, 505, 507, 508, 514, 515, 518, 519, 521, 523, 524, 525, 533, 534, 535, 536, 537, 539, 544, 552, 553, 576, 589, 590, 591, 592, 595, 605, 609, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 638, 639, 641, 646, 647, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 665, 666, 667, 668, 669, 670, 671, 672, 677, 679, 680, 681, 687, 688, 690, 692, 697, 698, 699, 700, 701, 708, 709, 710, 719, 720, 721, 722, 727, 730, 731, 732, 733, 735, 737, 741, 745, 750, 761, 762, 766, 768, 771, 778, 779, 784, 786, 792, 802, 818, 821, 827, 828, 831, 832, 837, 838, 845, 846, 859, 871, 874, 879, 881, 883, 886, 888, 894, 916, 922, 929, 930, 941, 944, 945, 952, 953, 960, 961, 969, 983, 984, 987, 988, 994, 995, 1000, 1001, 1009, 1011, 1012, 1042, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1064, 1065, 1067, 1068, 1069, 1070, 1074, 1076, 1077, 1086, 1087, 1092, 1093, 1104, 1105, 1106, 1112, 1114, 1115, 1118, 1121, 1122, 1125, 1126, 1128, 1130, 1131, 1132, 1141, 1143, 1144, 1146, 1151, 1159, 1171, 1174, 1175, 1187, 1190, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1210, 1214, 1219, 1222, 1223, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1235, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1249, 1251, 1252, 1253, 1259, 1260, 1262, 1264, 1269, 1272, 1283, 1286, 1287, 1288, 1290, 1305, 1317, 1321, 1323, 1325, 1329, 1331, 1333, 1334, 1336], "null_behavior": [409, 514, 802, 1009, 1121, 1305], "null_count": [44, 48, 188, 193, 319, 405, 802, 828, 916, 1006, 1008, 1305], "null_equ": [195, 319, 1065, 1305], "null_on_oob": [355, 519, 521, 952, 1126, 1128], "null_prob": [161, 164, 168], "null_valu": [36, 45, 134, 135, 148, 319, 916], "nullabl": [38, 319], "nullbehavior": [409, 514, 802, 1009, 1121, 1305], "nullif": 1326, "nulls_last": [265, 319, 344, 364, 539, 646, 647, 727, 802, 874, 916, 941, 961, 1106, 1146, 1219, 1305], "num": [13, 39, 280, 319, 490, 802, 1094, 1305], "num_row": 177, "number": [10, 11, 12, 13, 14, 17, 25, 36, 37, 39, 40, 44, 45, 46, 47, 48, 49, 50, 64, 65, 66, 81, 89, 110, 121, 123, 124, 125, 127, 130, 131, 134, 135, 136, 137, 139, 143, 144, 145, 146, 148, 151, 152, 153, 155, 162, 164, 167, 169, 170, 171, 180, 182, 187, 196, 197, 199, 200, 208, 212, 213, 222, 223, 228, 239, 240, 251, 255, 262, 267, 270, 282, 287, 290, 292, 300, 302, 304, 313, 319, 345, 361, 363, 368, 371, 379, 380, 381, 382, 384, 385, 387, 388, 392, 399, 405, 406, 409, 413, 416, 424, 426, 428, 430, 431, 440, 453, 454, 456, 460, 461, 462, 463, 467, 468, 469, 475, 484, 497, 498, 505, 506, 514, 522, 525, 530, 532, 537, 540, 542, 544, 546, 594, 598, 601, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 638, 640, 649, 665, 667, 669, 670, 673, 677, 679, 680, 688, 691, 705, 709, 710, 716, 729, 734, 735, 736, 748, 756, 761, 778, 779, 783, 787, 791, 802, 818, 821, 827, 835, 836, 837, 843, 851, 861, 871, 876, 878, 879, 884, 885, 894, 896, 898, 907, 916, 921, 958, 960, 965, 975, 976, 977, 978, 980, 981, 983, 988, 994, 1000, 1006, 1007, 1009, 1013, 1016, 1024, 1026, 1031, 1034, 1035, 1044, 1057, 1058, 1060, 1066, 1067, 1068, 1069, 1070, 1074, 1075, 1076, 1089, 1112, 1113, 1121, 1129, 1132, 1137, 1139, 1144, 1149, 1151, 1165, 1166, 1180, 1192, 1193, 1194, 1195, 1196, 1197, 1199, 1200, 1201, 1202, 1203, 1204, 1210, 1213, 1221, 1237, 1239, 1241, 1242, 1245, 1249, 1251, 1252, 1260, 1263, 1277, 1290, 1295, 1305, 1321, 1324, 1327, 1336], "number_of_two": [352, 513], "numbers_decim": 691, "numer": [10, 16, 36, 39, 45, 138, 149, 181, 190, 225, 277, 278, 286, 287, 319, 328, 389, 395, 474, 490, 549, 573, 575, 599, 607, 639, 641, 661, 697, 703, 711, 802, 814, 820, 830, 847, 882, 916, 922, 984, 995, 1008, 1094, 1211, 1214, 1233, 1269, 1286, 1305, 1327, 1336], "numeric_dtyp": 1336, "numericliter": [395, 802, 995, 1305], "numpi": [95, 125, 156, 175, 186, 222, 253, 254, 273, 277, 278, 319, 552, 586, 587, 615, 802, 916, 924, 1097, 1100, 1102, 1103, 1168, 1169, 1192, 1286, 1287, 1305], "nworld": 682, "o": [140, 151, 376, 387, 388, 405, 658, 709, 710, 802, 972, 983, 1006, 1230, 1254, 1290, 1305, 1318], "oauth": 150, "obj": 922, "object": [34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 58, 80, 98, 122, 123, 128, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 162, 164, 165, 176, 177, 184, 189, 209, 210, 225, 227, 242, 251, 254, 259, 266, 276, 277, 278, 319, 408, 567, 743, 744, 746, 747, 762, 781, 789, 790, 802, 814, 823, 829, 842, 847, 850, 865, 875, 913, 916, 922, 925, 1280, 1305, 1315, 1317, 1320, 1333, 1335], "observ": [224, 319, 406, 460, 461, 462, 463, 601, 802, 846, 916, 1007, 1067, 1068, 1069, 1070, 1180, 1305], "obtain": 544, "obvious": 700, "occur": [39, 56, 57, 96, 105, 111, 226, 319, 352, 513, 574, 604, 802, 823, 824, 834, 848, 861, 872, 916, 949, 1120, 1164, 1182, 1286, 1305], "occurr": [485, 493, 496, 715, 802, 1090, 1098, 1101, 1294, 1305], "oct": 1328, "octet_length": 1326, "octob": [444, 1048, 1328], "od": [145, 814], "odbc": [37, 136, 319], "odd": 659, "odi": [662, 664, 1236], "off": [45, 46, 47, 48, 56, 57, 134, 135, 148, 224, 225, 319, 413, 729, 823, 824, 834, 846, 847, 852, 861, 916, 1013], "offer": [243, 319, 598, 802, 860, 916, 1329, 1333], "offic": [39, 319], "offset": [67, 134, 135, 140, 142, 144, 146, 148, 151, 152, 153, 204, 210, 251, 264, 295, 296, 319, 413, 414, 422, 432, 433, 435, 439, 452, 478, 520, 538, 614, 645, 663, 664, 677, 690, 802, 840, 842, 865, 873, 889, 890, 916, 1013, 1014, 1022, 1036, 1037, 1039, 1043, 1056, 1082, 1127, 1145, 1218, 1235, 1236, 1249, 1262, 1305, 1332], "offset_bi": 748, "often": [137, 173, 210, 251, 319, 352, 513, 607, 614, 802, 842, 865, 916, 949, 1120, 1320, 1333], "ok": 544, "old": [38, 248, 319, 608, 609, 802, 863, 916, 1186, 1187, 1305], "old_tabl": 1335, "older": [44, 48, 319, 916], "oldw": 683, "omit": [27, 124, 128, 139, 145, 162, 173, 240, 254, 276, 281, 319, 743, 746, 758, 759, 789, 790, 922, 1334], "onc": [134, 135, 170, 229, 253, 255, 298, 319, 532, 552, 553, 635, 685, 686, 802, 819, 892, 916, 1139, 1159, 1204, 1257, 1258, 1305, 1318], "one": [20, 36, 37, 39, 45, 50, 102, 121, 123, 124, 125, 126, 127, 134, 135, 139, 143, 144, 145, 148, 152, 167, 169, 173, 181, 189, 192, 200, 201, 208, 209, 210, 222, 226, 227, 235, 244, 251, 252, 253, 259, 260, 262, 277, 280, 286, 299, 319, 329, 363, 406, 408, 469, 470, 474, 477, 480, 482, 537, 544, 549, 567, 577, 578, 580, 582, 584, 585, 594, 613, 614, 638, 646, 659, 660, 661, 675, 698, 743, 746, 764, 782, 792, 798, 802, 820, 829, 831, 832, 837, 838, 841, 842, 848, 856, 865, 869, 870, 871, 882, 888, 893, 916, 931, 960, 965, 1007, 1076, 1086, 1087, 1144, 1151, 1156, 1180, 1191, 1210, 1231, 1232, 1233, 1247, 1270, 1286, 1305, 1320, 1321, 1323, 1327, 1335], "one_to_mani": [224, 319, 846, 916], "one_to_on": [224, 319, 846, 916], "oneormoredatatyp": [39, 162, 319], "ones": [617, 619, 621, 623, 625, 628, 630, 632, 802, 922], "onf": [677, 1249], "onli": [1, 5, 10, 13, 20, 30, 36, 37, 39, 45, 49, 50, 55, 58, 89, 134, 135, 136, 139, 140, 142, 144, 146, 148, 151, 152, 153, 154, 157, 158, 159, 160, 164, 168, 173, 192, 193, 198, 210, 211, 222, 225, 226, 229, 244, 251, 253, 254, 273, 275, 276, 277, 288, 289, 305, 319, 329, 331, 333, 345, 394, 395, 408, 413, 435, 442, 444, 464, 473, 483, 552, 553, 560, 561, 577, 578, 579, 580, 581, 582, 583, 584, 585, 594, 606, 652, 662, 664, 675, 713, 729, 764, 802, 826, 829, 831, 832, 833, 842, 847, 848, 865, 866, 883, 885, 899, 916, 920, 922, 929, 930, 931, 992, 995, 1013, 1039, 1048, 1073, 1080, 1088, 1159, 1184, 1224, 1234, 1236, 1247, 1280, 1283, 1286, 1305, 1314, 1317, 1333, 1334, 1336], "onlin": [198, 319, 1073, 1305], "ont": [662, 664, 1234, 1236], "onto": 164, "oof": [676, 1248, 1323, 1328], "op": [20, 134, 135, 168, 248, 319, 560, 607, 802, 850, 863, 916, 1305], "opac": [319, 322, 1305, 1310], "opaqu": 899, "open": [39, 132, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 189, 319, 408, 802, 829, 916], "openoffic": 145, "openpyxl": [139, 156], "oper": [4, 39, 49, 58, 89, 98, 101, 108, 115, 121, 123, 124, 125, 126, 127, 134, 136, 183, 198, 201, 203, 209, 215, 227, 229, 236, 240, 242, 243, 244, 247, 249, 251, 254, 255, 260, 262, 271, 277, 278, 283, 286, 287, 297, 298, 319, 328, 329, 332, 363, 400, 401, 402, 403, 404, 405, 458, 459, 474, 476, 479, 481, 504, 532, 533, 534, 535, 536, 537, 544, 551, 570, 573, 575, 576, 577, 578, 580, 582, 584, 585, 588, 589, 590, 593, 594, 599, 606, 635, 638, 703, 711, 718, 719, 721, 732, 733, 737, 749, 781, 792, 802, 814, 822, 826, 828, 833, 838, 841, 846, 856, 857, 866, 870, 871, 875, 882, 885, 892, 916, 920, 960, 996, 1001, 1002, 1003, 1004, 1005, 1006, 1063, 1064, 1073, 1083, 1085, 1111, 1139, 1140, 1141, 1142, 1143, 1144, 1158, 1170, 1171, 1184, 1204, 1210, 1245, 1280, 1285, 1286, 1287, 1305, 1324, 1332, 1333], "operand": [711, 802], "opp": 922, "oppos": 729, "opposit": [262, 319, 363, 537, 638, 802, 871, 916, 960, 1144, 1210, 1305], "opt": [281, 319], "optim": [45, 46, 47, 48, 56, 57, 146, 148, 151, 152, 153, 222, 227, 243, 247, 253, 284, 319, 819, 823, 824, 834, 852, 861, 872, 880, 889, 890, 899, 916, 991, 1205, 1305], "optimis": [136, 229, 254, 305, 319, 916, 1159, 1207, 1305, 1336], "optimist": 14, "option": [2, 3, 4, 5, 6, 7, 30, 36, 37, 38, 39, 40, 44, 45, 46, 47, 48, 50, 66, 68, 134, 136, 137, 138, 139, 140, 142, 144, 146, 148, 149, 150, 151, 152, 153, 154, 156, 161, 162, 163, 164, 167, 168, 169, 189, 205, 210, 220, 225, 235, 259, 266, 272, 283, 286, 288, 319, 408, 413, 502, 560, 561, 567, 594, 615, 616, 618, 620, 622, 624, 627, 629, 631, 644, 652, 662, 664, 675, 677, 715, 784, 792, 802, 814, 823, 829, 842, 846, 847, 856, 869, 875, 882, 883, 891, 916, 922, 1013, 1109, 1192, 1193, 1194, 1195, 1196, 1197, 1199, 1200, 1201, 1217, 1224, 1234, 1236, 1247, 1249, 1282, 1294, 1305, 1323, 1328], "optional_memb": [494, 802, 1099, 1305], "or_": 802, "oracl": 137, "orang": [185, 300, 301, 303, 304, 306, 307, 309, 311, 312, 319, 388, 710, 802, 894, 895, 897, 898, 900, 901, 903, 905, 906, 1328], "order": [10, 39, 45, 46, 47, 48, 50, 56, 62, 124, 134, 136, 155, 157, 158, 159, 160, 180, 184, 185, 192, 193, 194, 201, 209, 210, 224, 226, 242, 243, 244, 251, 253, 255, 256, 260, 265, 276, 277, 282, 284, 289, 319, 344, 364, 369, 387, 388, 411, 412, 470, 515, 532, 539, 545, 594, 599, 604, 614, 635, 636, 637, 646, 647, 676, 683, 684, 685, 686, 700, 709, 710, 712, 713, 715, 727, 781, 792, 802, 813, 818, 826, 831, 832, 833, 838, 841, 842, 846, 848, 856, 865, 866, 870, 874, 875, 879, 880, 916, 921, 922, 941, 961, 966, 983, 990, 1011, 1012, 1077, 1106, 1122, 1139, 1146, 1152, 1178, 1182, 1189, 1204, 1206, 1208, 1219, 1248, 1273, 1290, 1291, 1292, 1294, 1305, 1314, 1317, 1323, 1332, 1333, 1336], "order_bi": [594, 802], "ordin": [436, 604, 802, 1040, 1182, 1305, 1334], "ordinal_dai": [421, 454], "org": [20, 40, 41, 122, 136, 137, 140, 142, 175, 176, 177, 186, 319, 568, 872, 916, 924, 925], "orient": [51, 53, 96, 125, 127, 240, 319, 916, 1314], "origin": [50, 134, 135, 148, 192, 193, 201, 284, 319, 411, 412, 438, 439, 452, 470, 515, 553, 577, 594, 606, 607, 608, 609, 610, 612, 653, 659, 668, 725, 726, 802, 831, 832, 838, 880, 916, 1011, 1012, 1042, 1043, 1056, 1077, 1122, 1186, 1187, 1188, 1190, 1225, 1231, 1240, 1305], "orld": 1255, "other": [1, 20, 35, 39, 44, 57, 133, 134, 135, 136, 139, 148, 153, 157, 158, 159, 160, 193, 195, 198, 201, 224, 225, 226, 235, 236, 244, 252, 254, 257, 258, 281, 286, 288, 291, 293, 294, 317, 319, 322, 328, 332, 334, 344, 345, 395, 410, 444, 458, 459, 470, 474, 479, 481, 490, 494, 504, 511, 533, 534, 535, 536, 551, 557, 563, 573, 575, 588, 589, 593, 608, 609, 640, 647, 675, 702, 703, 708, 711, 718, 720, 722, 727, 730, 731, 732, 733, 741, 748, 766, 768, 771, 780, 784, 786, 802, 814, 824, 838, 846, 847, 848, 856, 857, 867, 868, 882, 883, 886, 887, 888, 916, 922, 931, 995, 1010, 1048, 1063, 1064, 1065, 1073, 1083, 1085, 1099, 1111, 1118, 1140, 1141, 1142, 1143, 1158, 1170, 1171, 1186, 1187, 1288, 1296, 1304, 1305, 1310, 1320, 1333], "other_df": [224, 319], "other_lf": [846, 916], "otherwis": [37, 136, 139, 146, 151, 163, 166, 170, 205, 229, 236, 254, 257, 276, 281, 305, 319, 368, 373, 392, 395, 406, 460, 461, 462, 463, 544, 553, 564, 594, 598, 599, 601, 606, 641, 651, 654, 658, 663, 665, 670, 673, 674, 677, 688, 715, 719, 748, 751, 760, 764, 792, 802, 857, 867, 899, 916, 965, 969, 988, 995, 1007, 1067, 1068, 1069, 1070, 1151, 1159, 1178, 1180, 1184, 1205, 1207, 1214, 1223, 1226, 1230, 1235, 1237, 1242, 1245, 1246, 1249, 1260, 1294, 1305, 1325], "our": 178, "out": [8, 14, 37, 45, 46, 47, 48, 103, 128, 153, 156, 201, 251, 254, 319, 355, 373, 519, 521, 651, 654, 663, 792, 838, 865, 916, 952, 969, 1126, 1128, 1223, 1226, 1235, 1331], "outcom": [594, 802], "outer": [50, 58, 288, 319, 883, 916], "outermost": 49, "outlin": 7, "output": [0, 8, 30, 36, 39, 40, 41, 42, 43, 44, 45, 180, 188, 222, 229, 233, 236, 242, 244, 253, 257, 259, 269, 282, 289, 293, 319, 331, 333, 356, 387, 388, 392, 406, 444, 523, 544, 552, 553, 564, 567, 578, 601, 608, 650, 666, 670, 709, 710, 715, 719, 720, 721, 722, 732, 733, 734, 763, 764, 768, 786, 802, 814, 818, 828, 834, 852, 856, 857, 867, 869, 879, 886, 899, 916, 929, 930, 953, 983, 988, 1007, 1048, 1130, 1159, 1180, 1222, 1238, 1242, 1290, 1294, 1305], "output_path": [568, 872, 916], "outsid": [395, 802, 995, 1305], "over": [130, 134, 135, 136, 139, 145, 148, 153, 164, 165, 180, 198, 221, 222, 223, 229, 252, 253, 254, 266, 282, 283, 297, 305, 319, 323, 387, 388, 405, 408, 461, 469, 552, 553, 564, 566, 567, 568, 569, 570, 578, 579, 604, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 709, 710, 738, 739, 752, 763, 764, 776, 781, 802, 818, 823, 875, 879, 891, 899, 913, 916, 922, 983, 1006, 1068, 1073, 1159, 1193, 1194, 1196, 1200, 1290, 1305, 1333], "overflow": [389, 403, 404, 692, 704, 802, 820, 916, 984, 1004, 1005, 1264, 1276, 1305], "overhead": [49, 89, 148, 151, 152, 153], "overlap": [653, 660, 662, 664, 1225, 1232, 1234, 1236], "overrid": [1, 39, 121, 123, 124, 125, 126, 127, 134, 136, 137, 139, 143, 144, 145, 152, 161, 162, 168, 170, 319, 916], "overridden": [39, 121, 123, 125, 127, 143, 144, 152, 170, 319, 916], "overview": [319, 802, 814, 916, 1305, 1332, 1336], "overwrit": [14, 37, 38, 121, 123, 124, 125, 127, 131, 134, 135, 143, 144, 148, 152, 177, 288, 319, 330, 702, 802, 883, 916], "overwrite_schema": [38, 319], "ow": 682, "own": [792, 1286, 1305, 1336], "p": [52, 243, 319, 598, 784, 802, 860, 916, 922, 1235, 1237, 1318], "p13dt14h0": 444, "p1dt42": 444, "pa": [38, 121, 154, 319, 781], "pa_tabl": 781, "pacif": [414, 1014], "pack": [240, 319], "packag": [32, 33, 136, 319, 323, 413, 729, 920, 1013], "pad": [671, 672, 697, 1243, 1244, 1269], "pad_end": [672, 1244], "pad_start": [671, 697, 1243, 1269], "page": [44, 48, 140, 146, 151, 153, 319, 802, 814, 916, 1305, 1332], "pair": [121, 123, 124, 125, 127, 143, 144, 152, 248, 319, 863, 916, 1336], "pairwis": [186, 319], "panda": [37, 122, 126, 131, 156, 201, 210, 278, 284, 286, 319, 432, 433, 708, 781, 802, 838, 842, 880, 882, 916, 1036, 1037, 1287, 1288, 1305, 1315, 1317, 1333], "pandas_df": 1333, "pane": [39, 319], "panic": 104, "pap": 1237, "papa": 665, "papai": [665, 1237], "papaya": [665, 677, 688, 1237, 1249, 1260], "parallel": [56, 58, 130, 137, 146, 153, 210, 225, 227, 243, 258, 294, 319, 405, 516, 715, 792, 802, 814, 842, 846, 847, 868, 887, 899, 916, 1006, 1123, 1294, 1305], "parallelis": [229, 305, 319, 1159, 1305], "parallelstrategi": [146, 153], "param": [39, 121, 123, 124, 125, 127, 134, 135, 143, 144, 148, 152, 163, 164, 168, 252, 319, 916], "paramet": [2, 3, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 20, 25, 26, 27, 28, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 56, 57, 58, 59, 62, 65, 66, 67, 68, 76, 80, 90, 96, 105, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 177, 178, 180, 181, 182, 186, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 212, 214, 215, 220, 222, 223, 224, 225, 226, 228, 229, 233, 235, 236, 239, 240, 242, 243, 244, 246, 248, 249, 251, 252, 253, 254, 255, 257, 258, 259, 260, 262, 264, 265, 266, 267, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 298, 302, 304, 305, 311, 313, 319, 328, 330, 331, 332, 333, 334, 344, 351, 352, 355, 356, 363, 364, 368, 369, 371, 372, 373, 374, 375, 376, 377, 387, 388, 389, 395, 400, 401, 402, 403, 404, 405, 406, 408, 409, 410, 413, 415, 417, 418, 423, 435, 438, 439, 440, 441, 443, 444, 452, 455, 457, 458, 459, 460, 461, 462, 463, 464, 467, 468, 469, 470, 474, 475, 476, 477, 478, 479, 480, 481, 483, 484, 485, 488, 489, 490, 494, 502, 504, 506, 511, 512, 513, 514, 516, 519, 520, 521, 522, 523, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547, 551, 552, 553, 560, 561, 567, 568, 569, 573, 575, 578, 579, 580, 581, 582, 583, 588, 589, 593, 594, 595, 598, 599, 601, 602, 604, 606, 607, 608, 609, 610, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 640, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 671, 672, 673, 674, 675, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 694, 697, 698, 700, 702, 703, 705, 709, 710, 711, 712, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 750, 751, 752, 753, 754, 756, 757, 758, 759, 760, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 798, 802, 818, 820, 821, 823, 824, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 840, 841, 842, 843, 846, 847, 848, 851, 852, 856, 857, 860, 861, 862, 863, 865, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 890, 891, 892, 896, 898, 899, 905, 907, 916, 920, 921, 922, 926, 928, 929, 930, 931, 941, 948, 949, 952, 953, 960, 961, 965, 966, 968, 969, 970, 971, 973, 983, 984, 994, 995, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1013, 1015, 1017, 1018, 1023, 1039, 1042, 1043, 1044, 1045, 1047, 1048, 1056, 1059, 1062, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1073, 1074, 1075, 1076, 1077, 1081, 1082, 1088, 1089, 1090, 1092, 1093, 1094, 1106, 1109, 1113, 1118, 1119, 1120, 1121, 1123, 1126, 1127, 1128, 1129, 1130, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1149, 1150, 1151, 1152, 1159, 1171, 1175, 1178, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1210, 1213, 1217, 1218, 1219, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1243, 1244, 1245, 1246, 1247, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1266, 1269, 1270, 1273, 1277, 1280, 1281, 1282, 1283, 1284, 1286, 1287, 1290, 1291, 1294, 1295, 1296, 1305, 1314, 1315, 1316, 1317, 1318, 1320, 1325, 1328, 1333], "parameteris": 136, "parametr": 814, "paramount": [852, 916], "parent": [39, 203, 319], "parenthes": 18, "parquet": [44, 48, 146, 147, 153, 319, 814, 916], "parquetcompress": [44, 319], "pars": [36, 45, 133, 134, 135, 137, 139, 144, 145, 146, 148, 151, 152, 153, 180, 209, 257, 258, 262, 265, 282, 293, 294, 298, 319, 388, 395, 490, 594, 608, 609, 647, 667, 675, 691, 692, 702, 710, 720, 722, 727, 730, 731, 732, 733, 741, 754, 766, 768, 771, 780, 782, 784, 786, 792, 802, 818, 841, 867, 868, 871, 874, 879, 886, 887, 892, 916, 995, 1094, 1186, 1187, 1210, 1239, 1263, 1264, 1305, 1314], "parseerror": [692, 1264], "parser": [134, 139], "part": [121, 139, 173, 178, 276, 281, 319, 594, 660, 679, 680, 802, 834, 861, 872, 888, 916, 926, 1232, 1251, 1252, 1329], "parti": [552, 802], "partial": [124, 134, 148, 319, 916], "particip": [39, 319], "particular": [134, 140, 142, 180, 196, 282, 319, 387, 388, 709, 710, 802, 818, 879, 916, 983, 1066, 1290, 1305], "partit": [44, 137, 146, 149, 151, 153, 154, 223, 242, 319, 594, 802], "partition_bi": [44, 135, 223, 319, 594, 802], "partition_chunk_size_byt": [44, 319], "partition_col": [44, 137, 319], "partition_df": 135, "partition_num": 137, "partition_on": 137, "partition_rang": 137, "partitioned_object": [44, 319], "pass": [32, 33, 35, 37, 38, 39, 44, 50, 96, 123, 131, 133, 136, 137, 139, 146, 148, 151, 154, 157, 159, 162, 164, 166, 168, 180, 186, 190, 209, 210, 212, 225, 228, 242, 243, 244, 248, 251, 257, 262, 265, 270, 278, 281, 282, 289, 293, 298, 319, 363, 388, 413, 423, 435, 438, 444, 467, 487, 537, 552, 553, 568, 594, 598, 608, 609, 614, 638, 647, 675, 682, 683, 684, 710, 719, 727, 729, 754, 784, 792, 798, 802, 818, 830, 841, 842, 844, 847, 852, 860, 863, 865, 867, 871, 872, 874, 879, 886, 891, 892, 899, 916, 920, 921, 960, 1013, 1023, 1042, 1048, 1074, 1089, 1113, 1144, 1159, 1186, 1187, 1210, 1247, 1254, 1255, 1256, 1277, 1287, 1305, 1318, 1333], "pass_nam": [553, 802], "pass_name_to_appli": [802, 920], "password": [134, 137, 140, 142], "past": [35, 319, 852, 916], "pat": [663, 1235], "patch": 68, "path": [3, 6, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 132, 134, 135, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 189, 259, 319, 408, 567, 568, 571, 637, 668, 802, 829, 869, 872, 916, 920, 1208, 1240, 1305, 1336], "pathlib": [34, 36, 40, 41, 44, 148, 319], "pattern": [58, 92, 134, 135, 148, 151, 152, 153, 222, 319, 562, 651, 652, 653, 656, 659, 660, 661, 662, 663, 664, 673, 674, 675, 681, 899, 922, 1205, 1207, 1223, 1224, 1225, 1228, 1231, 1232, 1233, 1234, 1235, 1236, 1245, 1246, 1247, 1253, 1305, 1328], "paya": 688, "pct": 164, "pct_chang": [802, 1305], "pd": [122, 126, 708, 781, 802, 1287, 1288, 1305, 1315, 1333], "pd_df": 126, "pd_frame": 781, "pd_seri": 126, "pdsh": [130, 135], "pea": 665, "peak": [253, 319, 596, 597, 802, 1176, 1177, 1305], "peak_max": [802, 1305], "peak_min": [802, 1305], "pear": [665, 677, 688, 1237, 1249, 1260], "pearson": [186, 319, 502, 644, 734, 802, 1109, 1217, 1305], "penalti": [687, 689, 690, 1259, 1261, 1262], "per": [14, 36, 39, 45, 139, 162, 164, 180, 208, 240, 241, 244, 258, 265, 282, 294, 308, 310, 311, 319, 355, 388, 516, 519, 521, 552, 553, 577, 578, 580, 582, 584, 585, 647, 710, 715, 727, 802, 818, 868, 874, 879, 887, 902, 904, 905, 916, 920, 952, 1123, 1126, 1128, 1294, 1305], "percent": [595, 802, 1175, 1305], "percentag": [161, 164, 168, 595, 802, 1175, 1305], "percentil": [188, 319, 828, 916, 1008, 1305], "perform": [37, 44, 46, 48, 50, 94, 99, 101, 106, 108, 115, 122, 134, 135, 136, 140, 144, 146, 148, 151, 152, 153, 177, 201, 209, 210, 224, 225, 226, 229, 247, 251, 253, 254, 277, 305, 319, 378, 383, 386, 391, 392, 474, 544, 552, 553, 594, 614, 652, 662, 664, 669, 670, 675, 687, 689, 690, 802, 838, 842, 846, 847, 848, 865, 874, 889, 890, 916, 974, 979, 982, 987, 988, 1159, 1224, 1234, 1236, 1241, 1242, 1247, 1259, 1261, 1262, 1286, 1305], "perhap": [283, 319], "period": [134, 135, 148, 210, 251, 319, 439, 452, 460, 462, 463, 595, 614, 743, 744, 746, 747, 789, 790, 802, 842, 865, 916, 1043, 1056, 1067, 1069, 1070, 1175, 1305], "persist": 1320, "phase": [37, 287, 319], "philadelphia": [673, 674], "phone": [695, 1267], "physic": [49, 62, 89, 134, 135, 225, 244, 319, 708, 802, 819, 846, 847, 916, 989, 1288, 1305], "pi": [10, 407, 802, 997, 999, 1215, 1278, 1305, 1326, 1330], "pick": [165, 792], "pickl": [408, 802, 829, 916], "pip": [413, 729, 1013], "pipe": [319, 802, 916], "pipelin": [139, 281, 319], "pitfal": 106, "pivot": [287, 319, 922], "pivot_long": [286, 319, 882, 916], "pivot_wid": [244, 319], "pivotagg": [244, 319], "pixel": [39, 319], "pk": [457, 802, 1062, 1305], "pl": [1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 34, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 58, 59, 68, 76, 80, 88, 89, 93, 96, 97, 98, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 134, 135, 136, 137, 138, 139, 140, 143, 144, 145, 148, 149, 150, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 170, 173, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 259, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 319, 322, 323, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 798, 802, 817, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 888, 889, 890, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 916, 921, 922, 926, 927, 928, 929, 930, 931, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1079, 1080, 1081, 1082, 1084, 1086, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1272, 1273, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1305, 1310, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1327, 1328, 1329, 1330, 1331, 1333, 1334, 1336], "pl_frame": 781, "place": [10, 11, 36, 45, 173, 191, 198, 214, 215, 244, 249, 254, 265, 291, 319, 323, 344, 356, 364, 523, 539, 646, 647, 727, 802, 874, 916, 931, 941, 953, 961, 1073, 1130, 1146, 1183, 1219, 1305], "placehold": 753, "plai": [12, 733], "plain": [834, 916], "plan": [225, 227, 319, 408, 802, 819, 823, 829, 834, 846, 847, 869, 872, 916, 1335], "plane": [725, 726], "platform": 156, "ple": 1328, "pleas": [126, 136, 137, 201, 210, 235, 319, 323, 461, 735, 748, 802, 838, 842, 856, 916, 1068, 1305], "plenti": 922, "plot": [319, 861, 872, 916, 1305], "plu": [406, 549, 802, 1007, 1156, 1180, 1305, 1327], "plugin": [0, 802, 814], "plugin_path": 920, "point": [10, 11, 31, 32, 33, 36, 39, 40, 44, 45, 46, 47, 48, 56, 57, 66, 68, 69, 70, 71, 131, 144, 146, 148, 151, 152, 153, 154, 161, 162, 164, 165, 166, 167, 168, 169, 192, 199, 210, 226, 227, 266, 276, 281, 287, 288, 319, 322, 323, 394, 405, 406, 411, 439, 440, 468, 473, 474, 485, 497, 498, 532, 553, 601, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 635, 731, 778, 779, 802, 823, 824, 831, 834, 836, 842, 848, 852, 863, 875, 883, 916, 990, 992, 1006, 1007, 1011, 1043, 1044, 1075, 1080, 1090, 1139, 1180, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1204, 1284, 1289, 1305, 1310, 1333], "poison": [586, 587, 802, 1168, 1169, 1305], "pola": 319, "polar": [1, 319, 322, 323, 801, 802, 808, 814, 916, 920, 921, 922, 1305, 1309, 1310, 1332, 1333, 1335], "polars_df": 1333, "polars_file_cache_ttl": [144, 148, 151, 152], "polars_hypothesis_profil": [167, 169], "polars_max_thread": 170, "polars_seri": 1333, "polars_verbos": [823, 916], "polarsdatafram": 177, "polarsdataset": [281, 319], "polarsdatatyp": [59, 76, 134, 135, 148, 161, 162, 163, 164, 165, 168, 181, 229, 276, 281, 319, 389, 464, 552, 553, 608, 609, 667, 750, 762, 763, 764, 774, 777, 793, 798, 802, 820, 916, 922, 984, 1159, 1186, 1187, 1239, 1305], "polarsintegertyp": [724, 758, 759], "polarstemporaltyp": [687, 1259], "polarstyp": 58, "pool": [14, 57, 170, 171, 824, 916], "poor": 136, "pop2": [225, 319, 847, 916], "popul": [225, 319, 847, 916], "port": [37, 134, 136, 137, 140, 142, 319], "portion": 1328, "pos_a": 1328, "posit": [39, 132, 134, 135, 139, 140, 141, 142, 143, 144, 145, 146, 147, 178, 190, 197, 209, 242, 257, 258, 262, 265, 285, 293, 294, 298, 319, 363, 460, 462, 463, 464, 537, 594, 599, 601, 638, 647, 661, 673, 674, 692, 702, 725, 726, 727, 730, 731, 732, 733, 750, 780, 784, 798, 802, 830, 835, 841, 867, 868, 871, 874, 881, 886, 887, 892, 916, 922, 960, 1067, 1069, 1070, 1144, 1178, 1180, 1210, 1233, 1264, 1305, 1334], "position": 1305, "possibl": [39, 44, 48, 96, 98, 123, 124, 127, 134, 139, 161, 164, 168, 209, 222, 229, 253, 284, 305, 319, 550, 553, 564, 615, 680, 714, 802, 823, 841, 874, 880, 916, 1159, 1192, 1252, 1305], "post": [50, 68], "postgresql": [37, 136, 137, 319, 594, 802, 1331], "potenti": [106, 108, 139, 148, 151, 152, 222, 252, 254, 319, 577, 673, 674, 826, 828, 833, 866, 885, 916, 920, 1245, 1246], "pow": [802, 1305, 1326], "pow_n": 52, "power": [782, 1178, 1305, 1327], "powersofn": 52, "pre": [544, 553, 601, 774, 777, 793, 802, 1180, 1305], "preced": [164, 922], "precis": [10, 11, 36, 39, 45, 66, 136, 222, 253, 254, 273, 276, 281, 319, 415, 691, 916, 922, 1015, 1263], "predefin": [244, 319], "predic": [38, 45, 46, 47, 48, 56, 57, 148, 151, 152, 153, 154, 181, 201, 220, 226, 252, 319, 389, 470, 717, 752, 792, 802, 823, 824, 834, 838, 848, 852, 861, 863, 872, 889, 890, 916, 1077, 1205, 1207, 1305], "predicate_pushdown": [45, 46, 47, 48, 56, 57, 823, 824, 834, 852, 861, 872, 916], "predict": [244, 247, 289, 319], "prefer": [134, 135, 139, 148, 169, 180, 198, 222, 229, 252, 253, 282, 305, 319, 387, 388, 464, 553, 709, 710, 802, 818, 879, 916, 983, 1073, 1159, 1290, 1305, 1315, 1336], "prefilt": 153, "prefix": [38, 134, 135, 148, 173, 319, 330, 377, 444, 562, 578, 581, 582, 584, 585, 681, 684, 685, 697, 802, 922, 973, 1253, 1257, 1269], "prefix_": 581, "prefix_a": 581, "prefix_b": 581, "prefix_field": [579, 583], "presenc": [751, 760, 922], "present": [124, 164, 205, 319, 494, 568, 683, 684, 802, 872, 916], "preserv": [192, 193, 201, 209, 224, 226, 229, 277, 278, 319, 411, 412, 413, 432, 433, 470, 515, 594, 608, 641, 658, 802, 831, 832, 838, 846, 848, 916, 1011, 1012, 1013, 1077, 1122, 1186, 1214, 1230, 1287, 1305], "pressur": [48, 134, 135, 144, 146, 148, 152, 153, 639, 802, 916, 1211, 1305], "presum": [552, 802], "prev_pow2": 52, "prevent": [277, 319, 330, 403, 404, 577, 704, 802, 916, 1004, 1005, 1276, 1305], "preview": [208, 319], "previou": [52, 173, 319, 322, 413, 577, 578, 580, 582, 584, 585, 595, 700, 802, 1013, 1175, 1305, 1310], "previous": [2, 3], "price": [319, 322, 1336], "primari": [139, 1333, 1336], "primarili": 1, "primit": [38, 319, 494, 802], "print": [9, 10, 11, 12, 13, 15, 16, 17, 19, 20, 25, 27, 28, 135, 156, 157, 159, 194, 208, 209, 223, 227, 275, 297, 319, 487, 569, 743, 746, 802, 823, 844, 916, 922, 1099, 1283, 1305, 1336], "prior": [126, 319, 322, 1305, 1310], "prioriti": 165, "probabl": [457, 601, 802, 1062, 1180, 1305], "process": [14, 36, 45, 46, 47, 48, 56, 57, 134, 135, 136, 148, 170, 253, 319, 823, 824, 916], "process_index": [276, 319], "produc": [2, 3, 164, 168, 181, 224, 319, 352, 389, 513, 564, 763, 802, 846, 852, 916, 949, 1120], "product": [50, 186, 224, 319, 403, 410, 802, 846, 916, 1004, 1010, 1305], "profil": [32, 167, 169, 823, 916], "profile_nam": 32, "programmat": [188, 319, 828, 916], "progress": [66, 68, 71], "project": [45, 46, 47, 48, 56, 57, 148, 150, 151, 152, 153, 646, 647, 802, 823, 824, 834, 852, 861, 863, 872, 916], "projection_pushdown": [45, 46, 47, 48, 56, 57, 823, 824, 834, 852, 861, 872, 916], "prompt": 128, "propag": [356, 459, 523, 586, 587, 589, 650, 666, 732, 733, 802, 953, 1064, 1130, 1168, 1169, 1171, 1222, 1238, 1305], "propagate_nan": 734, "proper": [226, 319, 848, 916], "properti": [39, 177, 184, 185, 194, 202, 213, 256, 261, 292, 296, 319, 322, 323, 825, 826, 833, 866, 885, 890, 916, 921, 922, 1061, 1079, 1167, 1209, 1305, 1310, 1336], "proport": [715, 802, 1294, 1305], "protocol": [38, 122, 137, 177, 319], "prototyp": 798, "provid": [31, 32, 33, 36, 37, 39, 40, 44, 45, 46, 47, 48, 134, 135, 137, 138, 139, 144, 146, 148, 149, 150, 151, 152, 153, 164, 168, 201, 205, 220, 266, 276, 319, 322, 373, 374, 444, 464, 485, 544, 552, 553, 654, 655, 659, 667, 668, 683, 684, 685, 686, 754, 784, 802, 814, 823, 838, 875, 891, 913, 916, 969, 970, 1048, 1090, 1108, 1159, 1226, 1227, 1231, 1239, 1240, 1284, 1305, 1318, 1325, 1328, 1333, 1336], "provis": 815, "prune": [146, 151, 153, 852, 916], "pt0": 444, "public": [137, 319, 802, 814, 916, 1305, 1332], "pulp": 1314, "pure": [39, 319], "purpos": [576, 802, 916], "pusd": [181, 319], "push": [148, 151, 152, 153, 154, 389, 802], "pushdown": [45, 46, 47, 48, 56, 57, 823, 824, 834, 852, 861, 863, 872, 889, 890, 916, 1205, 1207, 1305], "put": [36, 45, 68, 319, 323, 916], "pwd": 136, "py": 150, "pyarrow": [38, 44, 121, 126, 134, 137, 138, 140, 142, 146, 149, 154, 156, 271, 277, 278, 319, 781, 814, 1280, 1286, 1287, 1305, 1315, 1317, 1333], "pyarrow_opt": [44, 138, 146, 149, 319], "pyarrow_t": 1333, "pycapsul": [176, 925], "pycapsuleinterfac": [176, 925], "pydant": 156, "pyiceberg": [150, 156], "pyodbc": [37, 319], "pyodbc_uri": [37, 319], "pyspark": 170, "pytest": [157, 159], "python": [0, 32, 33, 40, 41, 68, 78, 92, 122, 134, 135, 140, 142, 156, 157, 159, 177, 222, 229, 253, 254, 273, 305, 319, 408, 413, 417, 474, 552, 553, 661, 729, 743, 744, 746, 747, 789, 790, 792, 802, 808, 829, 899, 916, 921, 1013, 1017, 1027, 1028, 1029, 1033, 1159, 1233, 1285, 1305, 1309, 1332], "pythondatatyp": [59, 76, 181, 319, 820, 916], "pythonliter": [932, 974, 979, 982, 1078, 1110, 1160, 1161, 1162, 1163, 1205, 1305], "pytorch": [281, 319, 1289, 1305], "q": [254, 319, 784, 1305, 1310, 1318], "q1": [39, 319], "q2": [39, 319], "q3": [39, 319], "q4": [39, 319], "qcut": [406, 802, 1007, 1305], "qhoo": 1336, "qmark": 136, "qqr": 922, "quad": [461, 802, 1068, 1305], "qualifi": [37, 319], "quantifi": [660, 1232], "quantil": [319, 601, 624, 625, 802, 916, 1180, 1197, 1305, 1322], "quantile_cont": 1326, "quantile_disc": 1326, "quarter": [210, 225, 251, 289, 319, 435, 439, 452, 614, 617, 619, 621, 623, 625, 628, 630, 632, 743, 744, 746, 747, 789, 790, 802, 842, 847, 865, 916, 1039, 1043, 1056, 1329], "queri": [45, 46, 47, 48, 56, 57, 136, 137, 140, 148, 151, 152, 153, 198, 227, 243, 266, 319, 544, 552, 553, 668, 781, 802, 823, 824, 834, 861, 872, 875, 889, 890, 891, 899, 908, 916, 1073, 1159, 1240, 1305, 1314, 1315, 1317, 1321, 1332, 1334, 1335], "quick": [798, 1008, 1305, 1336], "quit": [225, 319, 847, 916], "quot": [36, 37, 45, 134, 135, 137, 148, 319, 695, 916, 1267], "quota_project_id": 33, "quote_char": [36, 45, 134, 135, 148, 319, 916], "quote_plu": 137, "quote_styl": [36, 45, 319, 916], "quotes_titl": 695, "quotient": 1327, "r": [134, 135, 148, 319, 559, 598, 653, 658, 659, 660, 661, 673, 674, 802, 922, 1225, 1230, 1231, 1232, 1233, 1245, 1246, 1260, 1318, 1328], "r1": 58, "r2": 58, "r3": 58, "rab": [651, 676, 1223, 1248, 1323], "rad": 1330, "radian": [407, 725, 802, 1326], "radix": [692, 1264], "rai": [725, 726], "raini": [673, 674, 1245, 1246], "rais": [1, 15, 16, 20, 38, 93, 94, 97, 98, 100, 101, 102, 103, 104, 105, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 134, 135, 139, 145, 146, 148, 153, 157, 159, 177, 181, 205, 244, 252, 277, 319, 355, 373, 389, 413, 438, 519, 521, 564, 599, 601, 609, 651, 654, 663, 687, 689, 690, 692, 694, 745, 762, 802, 891, 952, 969, 1013, 1042, 1126, 1128, 1178, 1180, 1187, 1223, 1226, 1235, 1259, 1261, 1262, 1264, 1266, 1286, 1305], "raise_if_empti": [134, 135, 139, 145, 148], "raise_if_undetermin": 564, "raise_on_fail": 891, "raker": 131, "ram": [45, 46, 47, 48, 916], "ran": [802, 920], "random": [39, 40, 140, 155, 162, 211, 255, 319, 483, 532, 604, 635, 640, 715, 802, 814, 1088, 1139, 1182, 1204, 1213, 1294, 1305], "randomli": 163, "rang": [17, 39, 136, 137, 188, 196, 210, 223, 319, 335, 407, 413, 421, 431, 436, 437, 439, 452, 453, 488, 724, 729, 732, 742, 743, 744, 745, 746, 747, 758, 759, 788, 789, 790, 802, 828, 842, 916, 922, 1008, 1013, 1021, 1035, 1040, 1041, 1043, 1056, 1057, 1066, 1175, 1305, 1328], "rank": [344, 516, 727, 734, 749, 802, 941, 1123, 1305], "rankmethod": [604, 802, 1182, 1305], "rare": [414, 1014], "rather": [225, 319, 476, 552, 569, 601, 613, 697, 802, 847, 916, 1180, 1191, 1269, 1305], "raw": 137, "raw_output": [568, 872, 916], "re": [205, 210, 221, 284, 286, 319, 432, 433, 441, 444, 842, 880, 882, 916, 1036, 1037, 1045, 1048, 1333], "reach": [671, 672, 697, 1243, 1244, 1269], "read": [35, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 189, 198, 319, 322, 408, 476, 792, 802, 829, 916, 1073, 1305, 1310], "read_arrow_batches_from_odbc": 136, "read_clipboard": [35, 319], "read_csv": [133, 139, 148], "read_csv_batch": 130, "read_databas": 137, "read_database_uri": 136, "read_excel": 145, "read_ndjson": 143, "read_od": 139, "read_opt": 139, "read_parquet": 153, "read_tabl": 146, "readabl": 798, "reader": [44, 48, 130, 134, 135, 140, 142, 146, 319, 916], "readi": 909, "readthedoc": [39, 319], "real": [660, 1232], "realli": [405, 652, 675, 802, 1006, 1224, 1247, 1305], "realloc": [144, 148, 151, 152, 198, 319, 1073, 1305], "rearrang": [229, 319], "reason": [170, 188, 319, 544, 552, 802, 828, 916], "receiv": [50, 136, 148, 229, 243, 305, 319, 553, 598, 802, 860, 916, 1336], "recent": [157, 158, 159, 160, 277, 319, 595, 609, 802, 1175, 1187, 1286, 1305, 1317, 1333], "rechunk": [58, 121, 126, 134, 135, 138, 140, 142, 144, 146, 148, 149, 151, 152, 153, 198, 319, 802, 993, 1073, 1084, 1165, 1305], "recognis": [15, 16, 20, 922], "recommend": [39, 170, 188, 222, 227, 243, 319, 544, 819, 828, 916, 922], "record": [36, 41, 45, 131, 142, 154, 319, 916], "record_batch": [223, 319], "recordbatch": [121, 223, 319, 781, 1315, 1317, 1333], "recurs": [460, 462, 463, 802, 1067, 1069, 1070, 1305], "red": [49, 88, 89, 305, 715, 802, 899, 1294, 1305], "redempt": 1314, "redshift": 137, "reduc": [48, 134, 135, 144, 146, 148, 151, 152, 153, 253, 306, 307, 309, 312, 319, 639, 739, 752, 802, 900, 901, 903, 906, 916, 1161, 1179, 1211, 1276, 1305], "reduct": [203, 319, 553, 802], "ref": [659, 661, 1231, 1233], "refer": [0, 32, 39, 92, 132, 134, 135, 139, 140, 141, 142, 143, 144, 145, 146, 147, 186, 189, 319, 323, 408, 441, 444, 604, 659, 673, 674, 687, 689, 690, 694, 802, 829, 916, 1045, 1048, 1182, 1245, 1246, 1259, 1261, 1262, 1266, 1305], "referenc": [39, 319, 552, 673, 674, 700, 802, 1245, 1246, 1315, 1333], "refin": 139, "reg": 131, "regard": [134, 734], "regardless": [126, 180, 209, 225, 282, 319, 388, 418, 668, 710, 792, 802, 818, 847, 879, 916, 1018, 1240], "regex": [90, 464, 559, 560, 562, 651, 653, 659, 660, 661, 663, 673, 674, 698, 750, 802, 922, 1223, 1225, 1231, 1232, 1233, 1235, 1245, 1246], "regexp_lik": 1326, "region": [39, 150, 319], "regist": [1, 51, 52, 53, 54, 167, 169, 266, 319, 802, 875, 916, 920, 1314, 1315, 1317, 1318, 1319, 1320, 1333, 1335], "register_dataframe_namespac": [1, 52, 53, 54], "register_expr_namespac": [1, 51, 53, 54], "register_glob": [1316, 1318, 1320, 1333], "register_lazyframe_namespac": [1, 51, 52, 54], "register_mani": [1316, 1317, 1320], "register_plugin": 802, "register_plugin_funct": [802, 920], "register_series_namespac": [1, 51, 52, 53], "registr": [266, 319, 781, 814, 875, 916, 1320, 1333], "regrid": [488, 802], "regular": [129, 222, 252, 253, 289, 296, 319, 464, 651, 652, 653, 657, 659, 660, 661, 662, 663, 664, 673, 674, 675, 729, 750, 798, 802, 890, 916, 922, 1223, 1224, 1225, 1229, 1231, 1232, 1233, 1234, 1235, 1236, 1245, 1246, 1247, 1331], "reinterpret": [802, 1305], "rel": [39, 137, 138, 149, 150, 157, 158, 159, 160, 319, 435, 460, 462, 463, 715, 802, 1039, 1067, 1069, 1070, 1294, 1305], "relat": [136, 173, 673, 674, 922, 1245, 1246, 1321], "releas": [57, 224, 319, 553, 802, 824, 846, 916, 1336], "release_year": 1314, "relev": 58, "reli": [224, 319, 846, 916], "reliabl": [88, 89], "remain": [134, 135, 148, 192, 193, 196, 201, 244, 319, 411, 412, 470, 515, 608, 679, 680, 802, 831, 832, 838, 852, 916, 1011, 1012, 1066, 1077, 1122, 1186, 1251, 1252, 1305, 1320], "remaind": [680, 1252, 1327], "remap": 91, "remot": [134, 135, 140, 142], "remov": [4, 134, 135, 148, 177, 190, 274, 319, 464, 578, 682, 683, 684, 685, 686, 750, 802, 830, 916, 1254, 1255, 1256, 1257, 1258, 1281, 1305, 1335], "removes_pronoun": 675, "renam": [1, 124, 134, 135, 171, 209, 257, 258, 293, 294, 298, 300, 319, 330, 476, 570, 571, 577, 578, 579, 580, 582, 584, 585, 700, 702, 780, 784, 802, 841, 867, 868, 886, 887, 892, 894, 916, 928, 1235, 1273, 1282, 1305, 1333], "rename_field": [679, 680, 1251, 1252], "render": [568, 872, 916], "render_as_str": 136, "reoconstruct": [254, 319], "repeat": [140, 151, 605, 607, 774, 793, 802], "repeat_bi": 802, "replac": [37, 38, 134, 135, 148, 199, 200, 249, 283, 286, 293, 294, 319, 322, 417, 438, 468, 552, 553, 609, 674, 675, 690, 802, 836, 882, 886, 887, 916, 1017, 1042, 1075, 1187, 1205, 1207, 1246, 1247, 1262, 1305, 1310, 1326], "replace_al": [609, 673, 802, 1186, 1187, 1245, 1305], "replace_column": 319, "replace_strict": [608, 802, 1186, 1305], "replace_time_zon": [414, 420, 422, 1019, 1020, 1046], "replace_with": [675, 1247], "replic": [708, 802, 1288, 1305], "report": 136, "repr": [128, 444, 1048], "repres": [36, 39, 45, 64, 65, 67, 77, 81, 86, 121, 123, 125, 126, 127, 136, 244, 266, 267, 276, 277, 290, 297, 319, 392, 474, 497, 498, 540, 546, 552, 649, 665, 670, 673, 674, 677, 688, 716, 719, 736, 748, 750, 762, 763, 764, 773, 778, 779, 783, 791, 798, 802, 875, 876, 884, 916, 922, 988, 1205, 1221, 1237, 1242, 1245, 1246, 1249, 1260, 1286, 1295, 1305, 1333], "represent": [10, 42, 43, 64, 65, 67, 81, 128, 259, 275, 319, 391, 392, 416, 421, 424, 426, 427, 428, 429, 430, 431, 434, 436, 437, 440, 453, 454, 456, 567, 708, 802, 834, 850, 869, 916, 987, 988, 989, 1016, 1021, 1024, 1025, 1026, 1030, 1031, 1032, 1034, 1035, 1038, 1040, 1041, 1044, 1057, 1058, 1060, 1283, 1288, 1305, 1324], "request": 33, "requested_schema": [176, 925], "requir": [1, 32, 33, 38, 39, 50, 126, 136, 137, 157, 158, 159, 160, 186, 192, 252, 276, 277, 278, 281, 319, 369, 460, 462, 463, 545, 553, 594, 617, 619, 621, 623, 625, 628, 630, 632, 639, 687, 689, 690, 712, 777, 802, 826, 831, 832, 833, 874, 885, 916, 966, 1065, 1067, 1069, 1070, 1152, 1211, 1245, 1259, 1261, 1262, 1286, 1287, 1291, 1305], "require_al": 922, "rerais": [57, 824, 916], "rerun": [198, 319, 1073, 1305], "resampl": [210, 319, 842, 916], "reset": [4, 173], "reset_index": [126, 210, 319, 842, 916], "reshap": [244, 277, 319, 517, 731, 802, 1124, 1305], "resolv": [417, 544, 825, 826, 833, 866, 885, 916], "resourc": [891, 920], "respect": [39, 319, 652, 662, 664, 675, 922, 1224, 1234, 1236, 1247, 1289, 1305], "respons": [137, 236, 319, 857, 916], "rest": [695, 1267], "restor": [173, 319, 322, 1305, 1310], "restore_default": 173, "restrict": [30, 680, 1252], "result": [13, 36, 42, 43, 44, 45, 46, 47, 48, 50, 58, 125, 126, 127, 136, 137, 139, 148, 151, 153, 154, 168, 198, 201, 210, 211, 224, 225, 226, 240, 244, 251, 254, 259, 260, 262, 276, 277, 278, 289, 296, 298, 304, 319, 413, 439, 441, 444, 452, 460, 461, 462, 463, 467, 474, 483, 490, 502, 543, 544, 552, 553, 567, 594, 599, 601, 608, 609, 610, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 637, 638, 658, 674, 678, 679, 690, 711, 715, 738, 739, 743, 745, 746, 747, 748, 762, 763, 774, 777, 778, 779, 781, 793, 802, 819, 823, 828, 838, 842, 846, 847, 848, 852, 861, 865, 869, 870, 871, 890, 892, 898, 909, 910, 916, 922, 931, 1043, 1045, 1048, 1056, 1067, 1069, 1070, 1073, 1074, 1088, 1094, 1109, 1150, 1159, 1178, 1180, 1186, 1187, 1188, 1192, 1193, 1194, 1195, 1196, 1197, 1199, 1200, 1201, 1208, 1210, 1230, 1250, 1251, 1262, 1286, 1287, 1294, 1305, 1315, 1321, 1333, 1334, 1336], "resultset": 136, "retri": [36, 40, 44, 45, 46, 47, 48, 144, 146, 148, 151, 152, 153, 319, 916], "retriev": [205, 276, 319, 349, 350, 509, 510, 698, 773, 946, 947, 1116, 1117, 1270, 1284, 1305, 1321], "return": [1, 5, 6, 30, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 99, 102, 110, 118, 121, 123, 124, 125, 126, 127, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 170, 171, 175, 178, 180, 182, 185, 186, 187, 191, 194, 196, 197, 198, 199, 200, 202, 203, 204, 205, 208, 209, 210, 212, 213, 214, 218, 220, 221, 222, 223, 224, 227, 228, 229, 231, 233, 238, 239, 240, 242, 243, 244, 248, 251, 252, 253, 254, 255, 259, 266, 269, 270, 276, 277, 278, 281, 282, 283, 284, 289, 292, 293, 294, 300, 302, 304, 305, 308, 313, 319, 331, 333, 336, 337, 338, 339, 340, 341, 344, 345, 349, 350, 351, 353, 355, 356, 367, 372, 373, 374, 375, 376, 377, 387, 388, 391, 392, 396, 397, 398, 399, 400, 406, 407, 413, 414, 416, 419, 420, 421, 422, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 439, 440, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 456, 461, 466, 474, 477, 478, 480, 484, 485, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 505, 506, 509, 510, 512, 517, 519, 521, 522, 523, 525, 532, 542, 543, 550, 552, 553, 565, 567, 568, 569, 574, 598, 601, 603, 607, 608, 609, 610, 612, 613, 635, 636, 641, 642, 643, 650, 651, 653, 654, 655, 657, 658, 659, 660, 661, 663, 664, 665, 666, 668, 669, 670, 671, 672, 676, 677, 678, 679, 680, 688, 692, 697, 705, 706, 707, 709, 710, 711, 713, 714, 715, 718, 719, 724, 725, 726, 727, 728, 729, 735, 737, 742, 743, 744, 745, 746, 747, 748, 751, 754, 756, 758, 759, 760, 761, 762, 763, 764, 774, 777, 780, 781, 784, 787, 788, 789, 790, 792, 793, 802, 818, 821, 823, 824, 826, 827, 828, 833, 834, 840, 842, 843, 846, 850, 851, 852, 860, 861, 863, 865, 869, 872, 878, 879, 880, 885, 886, 887, 894, 896, 898, 902, 907, 909, 916, 920, 921, 922, 924, 926, 929, 930, 931, 939, 940, 942, 943, 944, 945, 946, 947, 948, 950, 952, 953, 964, 966, 968, 969, 970, 972, 983, 986, 987, 988, 990, 994, 1000, 1001, 1007, 1008, 1013, 1014, 1016, 1019, 1020, 1021, 1022, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1060, 1066, 1068, 1072, 1073, 1078, 1082, 1089, 1090, 1095, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1107, 1108, 1110, 1112, 1113, 1114, 1115, 1116, 1117, 1119, 1124, 1126, 1128, 1129, 1130, 1132, 1139, 1149, 1150, 1157, 1159, 1164, 1173, 1180, 1186, 1187, 1188, 1189, 1190, 1191, 1204, 1206, 1214, 1222, 1223, 1225, 1226, 1227, 1229, 1230, 1231, 1232, 1233, 1235, 1236, 1237, 1238, 1240, 1241, 1242, 1243, 1244, 1248, 1249, 1250, 1251, 1252, 1260, 1264, 1269, 1277, 1280, 1287, 1290, 1292, 1293, 1294, 1296, 1305, 1314, 1315, 1319, 1321, 1322, 1323, 1324, 1325, 1327, 1328, 1331, 1333, 1334, 1335, 1336], "return_as_str": [208, 319, 569], "return_dtyp": [39, 229, 319, 552, 553, 608, 609, 718, 763, 764, 802, 1159, 1186, 1187, 1305], "return_typ": [276, 281, 319], "returns_scalar": [552, 553, 764, 802, 920], "reus": [56, 57, 173, 823, 824, 834, 861, 872, 916], "reusabl": 173, "rev": [226, 319, 848, 916], "revers": [180, 196, 282, 319, 388, 400, 401, 402, 403, 404, 578, 580, 582, 710, 731, 737, 802, 818, 879, 916, 1001, 1002, 1003, 1004, 1005, 1305, 1323, 1326], "reverse_": 580, "reverse_a": 580, "reverse_b": 580, "revert": [7, 9, 10], "rhap": [662, 664, 1236], "rhapsodi": [662, 664, 1236], "right": [9, 10, 15, 16, 18, 27, 39, 66, 134, 135, 157, 158, 159, 160, 210, 224, 225, 251, 288, 319, 406, 460, 461, 462, 463, 490, 533, 534, 535, 536, 601, 614, 617, 619, 621, 623, 625, 628, 630, 632, 636, 644, 730, 743, 744, 746, 747, 789, 790, 802, 842, 846, 847, 865, 883, 916, 1007, 1067, 1068, 1069, 1070, 1094, 1140, 1141, 1142, 1143, 1180, 1206, 1217, 1305, 1321, 1326], "right_left": [224, 319, 846, 916], "right_on": [224, 225, 288, 319, 846, 847, 883, 916], "rightmost": [636, 802, 1206, 1305, 1328], "rld": [682, 684, 1256], "rle": [613, 802, 1191, 1305], "rle_id": [612, 802, 1305], "rle_id_a": [613, 802], "rle_id_ab": [613, 802], "rmm": 891, "rn": [134, 135, 148], "role": [32, 137], "roll": [210, 319, 413, 432, 433, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 732, 778, 779, 802, 842, 916, 1013, 1036, 1037, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1305], "rollback": [433, 1037], "rolled_forward": 413, "rollforward": [432, 1036], "rolling_map": [802, 1305], "rolling_max": [802, 1305], "rolling_max_bi": 802, "rolling_mean": [802, 1305], "rolling_mean_bi": 802, "rolling_median": [802, 1305], "rolling_median_bi": 802, "rolling_min": [802, 1305], "rolling_min_bi": 802, "rolling_quantil": [802, 1305], "rolling_quantile_bi": 802, "rolling_row_max": [617, 802], "rolling_row_mean": [619, 802], "rolling_row_median": [621, 802], "rolling_row_min": [623, 802], "rolling_row_quantil": [625, 802], "rolling_row_std": [628, 802], "rolling_row_sum": [630, 802], "rolling_row_var": [632, 802], "rolling_skew": [802, 1305], "rolling_std": [802, 1305], "rolling_std_bi": 802, "rolling_sum": [615, 802, 1192, 1305], "rolling_sum_bi": 802, "rolling_var": [802, 1305], "rolling_var_bi": 802, "rollinggroupbi": [251, 319], "rollinginterpolationmethod": [188, 246, 311, 319, 602, 624, 625, 775, 802, 828, 862, 905, 916, 1008, 1181, 1197, 1305], "ronaldo": [659, 1231], "root": [138, 149, 393, 566, 577, 578, 580, 582, 584, 585, 648, 801, 802, 991, 1220, 1305, 1327], "rotat": [319, 322, 1305, 1310], "round": [20, 39, 52, 128, 136, 319, 394, 398, 473, 634, 706, 802, 992, 1080, 1203, 1305, 1326], "round_sig_fig": [802, 1305], "round_str": 1043, "round_td": 1043, "rounded_corn": 20, "row": [14, 20, 25, 36, 37, 39, 44, 45, 48, 50, 51, 53, 58, 96, 102, 110, 118, 124, 125, 126, 127, 128, 131, 134, 135, 136, 139, 140, 142, 143, 144, 145, 146, 148, 151, 152, 153, 154, 157, 158, 164, 178, 180, 181, 182, 192, 193, 198, 201, 203, 204, 208, 209, 210, 211, 212, 213, 217, 218, 219, 220, 222, 223, 224, 225, 226, 228, 229, 235, 240, 244, 251, 254, 255, 264, 270, 273, 275, 276, 281, 282, 284, 286, 287, 288, 295, 296, 300, 302, 304, 305, 313, 319, 323, 344, 345, 353, 368, 388, 389, 466, 474, 478, 484, 506, 517, 544, 594, 595, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 640, 645, 647, 658, 667, 705, 710, 724, 727, 733, 735, 752, 756, 758, 759, 761, 776, 778, 779, 787, 792, 802, 818, 821, 831, 832, 838, 839, 840, 842, 843, 846, 847, 848, 849, 851, 852, 856, 873, 878, 879, 880, 882, 883, 889, 890, 894, 896, 898, 899, 907, 916, 926, 941, 950, 1072, 1073, 1082, 1089, 1113, 1124, 1175, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1218, 1230, 1239, 1277, 1305, 1314, 1321, 1323, 1334, 1336], "row_group": [146, 153], "row_group_s": [44, 48, 319, 916], "row_height": [39, 319], "row_index": [39, 319], "row_index_nam": [134, 135, 140, 142, 144, 146, 148, 151, 152, 153], "row_index_offset": [134, 135, 140, 142, 144, 146, 148, 151, 152, 153], "row_nr": [295, 319, 889, 916], "row_tot": [39, 319], "rowname_col": [319, 323], "rows_by_kei": [222, 253, 272, 319], "rowserror": [252, 319], "rowtotalsdefinit": [39, 319], "rpc": 136, "rstrip": 578, "rtol": [157, 158, 159, 160], "rtrim": 1326, "ru": 1328, "rule": [134, 146, 148, 153, 203, 319, 652, 675, 690, 1224, 1247, 1262], "run": [45, 46, 47, 48, 56, 57, 65, 136, 164, 167, 168, 169, 209, 224, 227, 229, 258, 284, 294, 305, 319, 392, 405, 516, 552, 553, 612, 613, 670, 780, 802, 823, 824, 834, 841, 846, 852, 856, 861, 868, 872, 880, 887, 891, 916, 922, 988, 1006, 1123, 1159, 1190, 1191, 1242, 1305, 1333, 1336], "runtimeerror": [277, 319, 1286, 1305], "rust": [36, 44, 45, 92, 104, 140, 142, 146, 229, 305, 319, 661, 916, 920, 1159, 1233, 1305], "s1": [49, 88, 89, 159, 160, 203, 319, 965, 1064, 1065, 1084, 1108, 1118, 1151, 1171, 1183, 1296, 1305], "s2": [1, 49, 88, 89, 159, 160, 203, 319, 965, 993, 1010, 1064, 1065, 1084, 1099, 1108, 1118, 1151, 1165, 1171, 1183, 1296, 1305], "s3": [1, 38, 138, 149, 150, 153, 154, 319, 965, 1151, 1305], "s_": 444, "s_bar": 1323, "s_dt": [444, 1328, 1329], "s_dt1": 1328, "s_dt2": 1328, "s_dtm": 444, "s_foo": 1323, "s_from_str_repr": [1283, 1305], "s_head_5": 665, "s_head_n": 665, "s_tail_5": 688, "s_tail_n": 688, "s_td": 444, "s_tm": [444, 1328, 1329], "safe": [606, 802, 1184, 1305], "sale": [594, 802], "sam": 12, "same": [20, 38, 39, 49, 50, 56, 57, 58, 88, 89, 105, 140, 148, 157, 158, 159, 160, 162, 173, 201, 209, 229, 244, 253, 254, 265, 284, 293, 294, 298, 305, 319, 327, 334, 367, 391, 411, 412, 444, 470, 474, 476, 477, 480, 543, 557, 563, 594, 608, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 640, 647, 658, 669, 700, 798, 802, 823, 824, 838, 841, 850, 852, 874, 880, 886, 887, 892, 916, 922, 927, 964, 987, 1011, 1012, 1017, 1048, 1150, 1159, 1186, 1192, 1193, 1194, 1195, 1196, 1197, 1199, 1200, 1201, 1230, 1241, 1296, 1305, 1319, 1321, 1329], "samoa": [414, 1014], "sampl": [134, 135, 305, 319, 640, 644, 802, 899, 1217, 1305, 1322], "sample_s": [134, 135], "sampled_from": 1336, "sandwich": [206, 319], "sat": [319, 322], "satisfi": [490, 802, 1094, 1305], "saturdai": [210, 319, 842, 916], "save": [2, 3, 6, 210, 225, 251, 289, 319, 414, 422, 435, 439, 452, 614, 617, 619, 621, 623, 625, 628, 630, 632, 743, 744, 746, 747, 748, 789, 790, 798, 802, 814, 842, 847, 865, 916, 1022, 1039, 1043, 1056], "save_to_fil": 5, "say\u014dnara": 1, "scalar": [178, 220, 229, 252, 319, 392, 552, 636, 665, 670, 677, 688, 762, 764, 802, 920, 926, 988, 1108, 1206, 1237, 1242, 1249, 1260, 1305], "scale": [28, 66, 196, 319, 376, 553, 598, 691, 802, 922, 1066, 1263, 1305], "scale_negative_even": [598, 802], "scan": [124, 127, 134, 135, 136, 139, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 319, 667, 916, 1239], "scan_csv": [45, 46, 47, 48, 134, 135, 916], "scan_parquet": [146, 154], "scan_pyarrow_dataset": [146, 153], "scansourc": [146, 153], "scatter": [319, 322, 1305, 1310], "scenario": 1305, "schedul": [57, 824, 916], "schema": [0, 1, 14, 28, 34, 37, 38, 51, 52, 53, 58, 96, 113, 114, 121, 123, 124, 125, 127, 131, 134, 135, 136, 137, 139, 141, 143, 144, 145, 146, 147, 148, 151, 152, 153, 182, 183, 184, 190, 194, 196, 223, 227, 229, 236, 240, 248, 277, 281, 319, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 420, 543, 544, 553, 564, 579, 581, 583, 667, 718, 784, 802, 814, 821, 822, 825, 826, 830, 833, 852, 857, 863, 885, 899, 916, 922, 996, 1239, 1305, 1314], "schema_mod": [38, 319], "schema_overrid": [121, 123, 124, 125, 126, 127, 134, 135, 136, 137, 139, 143, 144, 145, 148, 152, 223, 277, 319, 916, 922], "schemadefinit": [121, 123, 124, 125, 127, 143, 144, 152, 319, 916], "schemadict": [80, 121, 123, 124, 125, 126, 127, 134, 136, 137, 139, 145, 146, 148, 151, 153, 319, 784, 852, 899, 916], "schemainitdatatyp": 921, "schindler": 1314, "scientif": [11, 36, 45, 319, 916], "scikit": [281, 319], "scipi": [502, 644, 802, 1109, 1217, 1305], "scope": [33, 173, 813, 922, 1317, 1320, 1333], "score": [39, 244, 319], "script": [319, 322, 1305, 1310], "scroll": [39, 319], "sdiff": 535, "search": [225, 319, 544, 652, 662, 664, 675, 847, 874, 916, 1224, 1234, 1236, 1247], "search_sort": [802, 1305], "searchsortedsid": [636, 802, 1206, 1305], "searchstrategi": [161, 163, 164, 165, 166, 168], "season": [673, 674], "sec": [1329, 1336], "second": [36, 45, 144, 148, 151, 152, 157, 158, 159, 160, 210, 225, 251, 289, 319, 424, 427, 429, 430, 434, 435, 439, 444, 451, 452, 461, 614, 617, 619, 621, 623, 625, 628, 630, 632, 673, 674, 687, 690, 745, 746, 747, 748, 788, 789, 790, 792, 802, 842, 847, 865, 916, 922, 1039, 1043, 1055, 1056, 1068, 1245, 1246, 1259, 1262, 1305, 1328, 1329, 1334, 1336], "second_part": [679, 680, 1251, 1252], "seconds_diff": 451, "secret": [150, 153], "section": [244, 319, 651, 659, 660, 663, 673, 674, 743, 744, 746, 747, 789, 790, 1223, 1231, 1232, 1235, 1245, 1246], "secur": [408, 802, 829, 916], "see": [36, 38, 39, 40, 41, 44, 45, 46, 47, 48, 56, 57, 65, 136, 137, 138, 140, 142, 144, 146, 148, 149, 150, 151, 152, 153, 157, 158, 159, 160, 164, 168, 175, 186, 201, 210, 224, 243, 244, 319, 323, 381, 382, 384, 385, 395, 444, 469, 502, 552, 644, 651, 659, 660, 663, 665, 673, 674, 688, 743, 744, 746, 747, 776, 789, 790, 798, 802, 823, 824, 838, 842, 891, 916, 920, 922, 924, 977, 978, 980, 981, 989, 995, 1048, 1109, 1217, 1223, 1231, 1232, 1235, 1237, 1245, 1246, 1260, 1305, 1336], "seed": [155, 211, 255, 319, 483, 532, 604, 635, 640, 802, 1088, 1139, 1182, 1204, 1213, 1305], "seed_1": [211, 319, 483, 802, 1088, 1305], "seed_2": [211, 319, 483, 802, 1088, 1305], "seed_3": [211, 319, 483, 802, 1088, 1305], "seen": [444, 1048], "seen_group": 135, "select": [1, 8, 37, 50, 51, 52, 53, 93, 132, 134, 135, 136, 137, 138, 140, 142, 146, 148, 154, 163, 178, 179, 220, 221, 225, 229, 240, 243, 252, 258, 264, 266, 279, 285, 289, 296, 319, 327, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 353, 358, 359, 360, 365, 366, 367, 368, 369, 370, 371, 372, 375, 377, 387, 388, 390, 393, 394, 396, 397, 398, 399, 405, 407, 409, 410, 411, 412, 415, 417, 418, 426, 432, 433, 435, 438, 444, 445, 446, 447, 448, 449, 450, 451, 452, 455, 457, 460, 462, 463, 464, 465, 466, 467, 471, 473, 475, 478, 482, 483, 484, 485, 486, 487, 488, 491, 492, 495, 501, 502, 503, 505, 506, 516, 517, 544, 547, 548, 549, 550, 552, 553, 554, 555, 556, 560, 572, 574, 576, 577, 579, 581, 583, 586, 587, 591, 592, 593, 594, 596, 597, 600, 602, 603, 604, 605, 606, 607, 610, 611, 612, 615, 626, 633, 635, 636, 637, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 658, 659, 660, 661, 662, 663, 664, 666, 687, 698, 700, 701, 704, 705, 706, 707, 709, 710, 712, 713, 714, 715, 716, 719, 721, 723, 726, 727, 728, 731, 732, 734, 735, 736, 737, 740, 747, 748, 750, 751, 752, 753, 754, 756, 757, 758, 759, 760, 761, 765, 767, 769, 770, 772, 773, 776, 777, 781, 782, 783, 784, 785, 787, 791, 798, 802, 817, 823, 826, 847, 860, 868, 873, 875, 881, 888, 890, 891, 916, 922, 926, 1042, 1081, 1123, 1205, 1207, 1218, 1236, 1240, 1259, 1305, 1314, 1315, 1316, 1317, 1322, 1323, 1324, 1325, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335], "select_from": [163, 166, 168], "select_seq": [319, 916], "selector": [0, 39, 181, 190, 192, 193, 197, 235, 242, 244, 265, 274, 276, 281, 284, 286, 287, 319, 323, 444, 464, 560, 802, 814, 820, 830, 831, 832, 835, 856, 874, 880, 882, 916], "selectortyp": [39, 319, 922], "self": [1, 51, 52, 53, 54, 56, 57, 266, 297, 319, 781, 802, 823, 824, 834, 861, 872, 875, 888, 916, 931, 975, 976, 977, 978, 980, 981, 984, 996, 1001, 1073, 1077, 1091, 1157, 1159, 1172, 1176, 1177, 1183, 1186, 1187, 1205, 1207, 1208, 1219, 1293, 1296, 1305, 1316, 1317, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1327, 1328, 1329, 1330, 1331, 1333], "semi": [131, 224, 319, 846, 916, 1321], "semigraph": 20, "sens": [134, 140, 142, 236, 289, 319, 594, 802, 857, 916], "sensit": [651, 660, 663, 673, 674, 1223, 1232, 1235, 1245, 1246], "sep": 131, "separ": [9, 10, 24, 27, 35, 36, 45, 130, 131, 133, 134, 135, 139, 148, 242, 244, 274, 283, 285, 319, 353, 356, 444, 517, 523, 553, 658, 733, 738, 739, 802, 881, 916, 950, 953, 1048, 1124, 1130, 1230, 1275, 1281, 1305, 1328], "seq": 26, "seq1": 26, "seq2": 26, "sequenc": [39, 44, 50, 80, 121, 123, 124, 125, 127, 131, 134, 135, 136, 139, 143, 144, 145, 148, 152, 162, 163, 164, 165, 166, 180, 188, 197, 198, 224, 225, 235, 240, 242, 243, 244, 254, 265, 274, 276, 281, 282, 286, 287, 288, 289, 319, 368, 388, 406, 477, 494, 544, 552, 598, 601, 608, 609, 647, 675, 685, 686, 700, 710, 727, 738, 739, 752, 754, 763, 764, 773, 776, 782, 802, 818, 828, 835, 846, 847, 856, 860, 874, 879, 882, 883, 916, 922, 965, 1007, 1008, 1073, 1151, 1180, 1186, 1187, 1247, 1273, 1305], "sequenti": [56, 57, 258, 294, 319, 823, 824, 834, 861, 868, 872, 887, 916], "ser": [1019, 1020, 1046], "seri": [0, 1, 11, 25, 39, 49, 51, 52, 53, 54, 58, 59, 68, 80, 88, 89, 98, 121, 123, 126, 128, 159, 160, 164, 178, 191, 201, 203, 205, 207, 210, 211, 214, 215, 217, 219, 221, 231, 233, 238, 249, 251, 255, 269, 272, 275, 277, 279, 280, 299, 319, 334, 345, 368, 372, 390, 391, 392, 394, 438, 467, 470, 473, 477, 478, 487, 492, 494, 495, 497, 498, 499, 500, 511, 517, 519, 544, 550, 552, 553, 604, 605, 606, 607, 608, 609, 614, 615, 626, 637, 639, 665, 675, 687, 688, 689, 690, 694, 698, 709, 714, 724, 728, 731, 738, 739, 743, 744, 746, 747, 752, 754, 758, 759, 762, 763, 764, 774, 776, 777, 780, 781, 784, 789, 790, 793, 802, 814, 838, 842, 865, 893, 916, 920, 1297, 1299, 1301, 1304, 1306, 1309, 1310, 1311, 1312, 1313, 1315, 1317, 1333, 1336], "serial": [42, 43, 189, 319, 408, 571, 802, 829, 916], "serializ": [802, 920], "serializationformat": [189, 259, 319, 408, 567, 802, 829, 869, 916], "seriesplot": [1305, 1310], "server": [37, 136, 137, 319], "servic": 32, "service_account": [138, 149], "service_account_json_absolute_path": [138, 149], "session": 136, "set": [2, 3, 4, 5, 6, 7, 9, 10, 12, 13, 15, 16, 17, 20, 25, 26, 27, 30, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 56, 57, 62, 65, 66, 68, 122, 123, 124, 127, 134, 135, 136, 139, 140, 142, 143, 144, 145, 146, 148, 151, 152, 153, 154, 155, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 169, 170, 173, 177, 185, 192, 193, 202, 205, 209, 211, 222, 224, 225, 233, 235, 253, 255, 257, 259, 264, 269, 274, 276, 277, 281, 283, 284, 286, 287, 288, 293, 319, 322, 331, 333, 355, 356, 368, 379, 381, 382, 384, 385, 395, 406, 438, 455, 483, 494, 519, 521, 523, 532, 533, 534, 535, 536, 538, 544, 552, 553, 560, 561, 567, 598, 601, 608, 609, 615, 616, 618, 620, 622, 624, 627, 629, 631, 635, 640, 644, 645, 650, 666, 667, 673, 674, 677, 682, 683, 684, 685, 686, 687, 689, 690, 694, 715, 719, 721, 724, 728, 733, 743, 744, 745, 746, 747, 748, 758, 759, 762, 768, 774, 777, 778, 779, 780, 784, 786, 789, 790, 792, 793, 802, 814, 823, 824, 831, 832, 834, 841, 846, 847, 852, 856, 867, 869, 873, 880, 882, 883, 886, 899, 916, 920, 929, 930, 952, 953, 965, 969, 975, 977, 978, 980, 981, 995, 1007, 1042, 1059, 1079, 1088, 1099, 1106, 1126, 1128, 1130, 1139, 1140, 1141, 1142, 1143, 1145, 1151, 1159, 1180, 1186, 1187, 1192, 1193, 1194, 1195, 1196, 1197, 1199, 1200, 1201, 1204, 1205, 1206, 1213, 1217, 1218, 1222, 1238, 1239, 1245, 1246, 1249, 1254, 1255, 1256, 1259, 1261, 1262, 1266, 1286, 1294, 1305, 1324, 1332, 1336], "set_": 173, "set_auto_structifi": [257, 293, 319, 867, 886, 916], "set_decimal_separ": 27, "set_environ": 167, "set_except": [57, 824, 916], "set_fmt_float": 30, "set_fmt_str_length": [652, 662, 664, 675, 1224, 1236, 1247], "set_index": [210, 319, 842, 916], "set_legend": [39, 319], "set_sort": [251, 289, 319, 614, 802, 865, 916, 1305], "set_stat": 30, "set_streaming_chunk_s": [823, 916], "set_styl": [39, 319], "set_tbl_column_data_type_inlin": 24, "set_tbl_format": [7, 50], "set_tbl_row": 173, "set_tbl_width_char": 675, "set_thousands_separ": 9, "set_titl": [39, 319], "set_verbos": 173, "setosa": [319, 322], "setup": 1336, "sever": [121, 123, 124, 125, 127, 143, 144, 152, 319, 916, 1336], "sfu": 137, "shape": [1, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 49, 50, 51, 52, 53, 54, 58, 59, 76, 80, 88, 89, 96, 115, 121, 122, 123, 124, 125, 126, 127, 128, 131, 134, 143, 144, 148, 154, 161, 164, 168, 178, 179, 180, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 197, 198, 199, 200, 201, 203, 204, 205, 207, 209, 210, 211, 212, 214, 215, 216, 217, 219, 220, 221, 224, 225, 226, 228, 229, 230, 231, 232, 233, 234, 236, 237, 238, 241, 242, 243, 244, 245, 246, 248, 249, 250, 251, 255, 257, 259, 262, 264, 265, 266, 267, 268, 269, 270, 272, 274, 275, 279, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 319, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 572, 573, 574, 575, 576, 577, 578, 580, 582, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 756, 757, 758, 759, 760, 761, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 776, 777, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 798, 802, 817, 818, 820, 821, 823, 824, 827, 828, 829, 830, 831, 832, 835, 836, 837, 838, 839, 840, 841, 842, 843, 845, 846, 847, 848, 849, 851, 852, 853, 854, 855, 857, 858, 859, 860, 861, 862, 863, 864, 865, 867, 869, 871, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 886, 888, 889, 890, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 916, 921, 922, 926, 927, 928, 931, 933, 934, 935, 936, 937, 938, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 983, 984, 985, 987, 988, 989, 991, 992, 994, 995, 996, 997, 998, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1029, 1030, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1064, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1080, 1081, 1082, 1084, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1107, 1108, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1159, 1164, 1171, 1172, 1173, 1175, 1176, 1177, 1178, 1180, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1210, 1211, 1213, 1214, 1215, 1216, 1218, 1219, 1220, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1272, 1275, 1277, 1278, 1279, 1281, 1282, 1283, 1288, 1290, 1291, 1292, 1293, 1294, 1296, 1305, 1314, 1315, 1316, 1317, 1319, 1321, 1322, 1323, 1324, 1325, 1327, 1328, 1329, 1330, 1331, 1333, 1334], "share": [157, 158, 159, 160, 196, 319, 1066, 1305], "shawshank": 1314, "sheet": [39, 139, 145, 319], "sheet1": [39, 319], "sheet_id": [139, 145], "sheet_nam": [139, 145], "sheet_zoom": [39, 319], "sheetnam": [139, 145], "shift": [210, 319, 371, 409, 475, 514, 595, 732, 802, 842, 916, 1009, 1121, 1175, 1305], "short": [157, 159], "shorten": [157, 159], "shorter": [134, 135, 148, 544, 758, 759], "shorthand": [319, 322, 1305, 1310], "should": [10, 37, 39, 44, 45, 46, 47, 48, 58, 121, 123, 125, 127, 131, 139, 143, 144, 148, 152, 154, 161, 162, 164, 168, 190, 222, 225, 229, 252, 253, 254, 265, 273, 274, 285, 305, 319, 329, 405, 408, 455, 461, 464, 497, 498, 516, 553, 567, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 636, 644, 647, 673, 674, 715, 727, 748, 750, 762, 764, 778, 779, 792, 798, 802, 823, 829, 830, 846, 847, 852, 869, 874, 881, 916, 922, 1006, 1059, 1068, 1123, 1159, 1192, 1193, 1194, 1195, 1196, 1197, 1199, 1200, 1201, 1206, 1217, 1245, 1246, 1294, 1305, 1315], "show": [30, 39, 188, 193, 208, 227, 241, 319, 485, 568, 802, 828, 861, 872, 916, 1090, 1305, 1319, 1332], "show_graph": [227, 319, 916], "show_plot": [861, 916], "shrink": [263, 319, 639, 802, 1211, 1212, 1305], "shrink_dtyp": [802, 1305], "shrink_to_fit": [319, 1305], "shuffl": [155, 255, 281, 305, 319, 532, 635, 802, 899, 1139, 1204, 1305], "side": [39, 210, 251, 319, 490, 533, 534, 535, 536, 614, 617, 619, 621, 623, 625, 628, 630, 632, 636, 743, 744, 746, 747, 789, 790, 802, 842, 865, 916, 920, 1094, 1140, 1141, 1142, 1143, 1206, 1305], "sign": [64, 65, 67, 71, 72, 73, 74, 75, 81, 435, 606, 673, 674, 697, 802, 922, 1039, 1184, 1245, 1246, 1269, 1305, 1326], "sign_x": 1327, "signed_integ": 922, "signific": [153, 222, 229, 319, 381, 382, 384, 385, 553, 634, 802, 977, 978, 980, 981, 1159, 1203, 1305], "significantli": [139, 229, 305, 319, 1159, 1305, 1336], "silenc": 96, "silent": [692, 1264], "similar": [35, 44, 133, 170, 203, 225, 262, 284, 286, 319, 363, 441, 444, 537, 594, 638, 702, 761, 792, 802, 847, 871, 880, 882, 916, 960, 1045, 1048, 1144, 1210, 1305], "similarli": [39, 124, 210, 225, 251, 289, 319, 435, 439, 452, 614, 617, 619, 621, 623, 625, 628, 630, 632, 743, 744, 746, 747, 789, 790, 802, 842, 847, 865, 916, 1039, 1043, 1056], "simpl": [39, 240, 319], "simpler": [922, 1245], "simpli": [148, 738, 752], "simplifi": [45, 46, 47, 48, 56, 57, 823, 824, 834, 861, 872, 916], "simplify_express": [45, 46, 47, 48, 56, 57, 823, 824, 834, 861, 872, 916], "sin": [802, 1305, 1326], "sinc": [38, 64, 65, 81, 134, 135, 136, 138, 144, 148, 149, 151, 152, 161, 162, 163, 164, 168, 171, 179, 235, 277, 295, 300, 319, 420, 423, 455, 476, 552, 571, 608, 650, 658, 717, 726, 734, 754, 802, 817, 834, 856, 874, 888, 889, 894, 916, 1020, 1023, 1028, 1029, 1059, 1087, 1186, 1222, 1230, 1286, 1305], "sind": 1326, "sine": [338, 339, 552, 642, 643, 802, 935, 936, 1215, 1216, 1305, 1330], "singl": [39, 44, 50, 56, 57, 58, 133, 134, 135, 136, 137, 138, 139, 146, 148, 149, 151, 162, 181, 190, 191, 192, 193, 198, 205, 211, 220, 229, 242, 252, 254, 265, 276, 277, 319, 352, 392, 395, 413, 435, 477, 480, 483, 513, 519, 552, 553, 605, 608, 610, 612, 647, 650, 665, 666, 670, 677, 688, 717, 727, 731, 732, 733, 759, 763, 764, 782, 790, 798, 802, 820, 823, 824, 830, 831, 832, 874, 916, 922, 949, 988, 995, 1013, 1039, 1073, 1088, 1120, 1126, 1183, 1186, 1188, 1190, 1222, 1237, 1238, 1242, 1249, 1260, 1280, 1286, 1305, 1316], "singlecolselector": 178, "singleindexselector": [178, 926], "sinh": [802, 1305], "sink_csv": 916, "sink_ipc": 916, "sink_ndjson": 916, "sink_parquet": 916, "site_id": [319, 323], "six": [636, 802], "size": [14, 44, 48, 134, 135, 136, 161, 162, 163, 164, 168, 170, 196, 287, 319, 544, 610, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 724, 758, 759, 778, 779, 802, 823, 916, 1066, 1188, 1198, 1305, 1336], "sizeunit": [196, 319, 376, 972, 1066, 1305], "skew": [626, 802, 1198, 1305], "skewtest": [644, 802, 1217, 1305], "skip": [134, 135, 139, 146, 148, 153, 225, 287, 319, 847, 916, 1159, 1305, 1321], "skip_empty_lin": 139, "skip_nul": [553, 802, 1159, 1305], "skip_row": [134, 135, 148], "skip_rows_after_head": [134, 135, 148], "sklearn": [281, 319], "slice": [45, 46, 47, 48, 51, 56, 57, 196, 212, 223, 270, 319, 522, 542, 553, 564, 566, 615, 616, 618, 620, 622, 624, 627, 629, 631, 665, 688, 802, 823, 824, 834, 852, 861, 872, 916, 920, 1066, 1089, 1129, 1149, 1192, 1193, 1194, 1195, 1196, 1197, 1199, 1200, 1201, 1237, 1260, 1277, 1305, 1328], "slice_pushdown": [45, 46, 47, 48, 56, 57, 823, 824, 834, 852, 861, 872, 916], "slide": [405, 802, 1006, 1305], "slightli": [45, 46, 47, 48, 92, 474, 802, 916, 1329], "slot": [405, 409, 514, 802, 1006, 1009, 1121, 1305], "slow": [108, 124, 127, 134, 135, 136, 139, 143, 144, 145, 148, 152, 153, 319, 405, 553, 615, 667, 802, 899, 916, 1006, 1192, 1239, 1305], "slower": [125, 127, 139, 209, 229, 242, 289, 305, 319, 553, 764, 802, 841, 899, 916, 1159, 1305], "small": [11, 137, 439, 916, 1336], "smaller": [44, 48, 196, 319, 916, 1066, 1305], "smallest": [180, 282, 319, 387, 388, 710, 802, 818, 879, 916, 983, 1305, 1322, 1325], "smooth": [460, 462, 463, 802, 1067, 1069, 1070, 1305], "snappi": [34, 44, 48, 319, 916], "snapshot": 150, "snapshot_id": 150, "snowflak": [136, 137], "snowi": [673, 674], "so": [1, 39, 137, 148, 170, 173, 208, 210, 226, 244, 251, 319, 345, 355, 408, 474, 490, 521, 544, 553, 614, 673, 674, 675, 682, 683, 684, 698, 802, 829, 842, 848, 865, 916, 922, 952, 1128, 1245, 1246, 1247, 1254, 1255, 1256], "softwar": [35, 133, 319], "solut": [37, 319], "some": [14, 30, 39, 49, 89, 124, 134, 135, 136, 148, 177, 193, 244, 254, 277, 319, 323, 673, 674, 798, 1099, 1245, 1246, 1305, 1336], "some_account": [660, 1232], "some_t": 1335, "someth": [552, 802], "sometim": [748, 801], "somewher": [660, 1232], "sort": [50, 51, 180, 210, 225, 236, 243, 244, 251, 260, 282, 289, 302, 313, 319, 344, 387, 388, 461, 470, 553, 594, 614, 637, 647, 709, 710, 715, 717, 727, 743, 746, 764, 802, 818, 834, 842, 847, 857, 860, 861, 865, 870, 872, 879, 896, 907, 916, 922, 941, 983, 1068, 1106, 1208, 1290, 1291, 1294, 1305, 1321, 1334, 1336], "sort_bi": 802, "sort_column": [244, 319], "sorted_asc": [1079, 1305], "sorted_desc": [1079, 1305], "sourc": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 165, 166, 167, 169, 170, 171, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 319, 322, 323, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 798, 802, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 916, 920, 921, 922, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1272, 1273, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1305, 1310, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1333], "source_ac": 128, "source_actor_id": 128, "source_alia": [38, 319], "source_cha": 128, "source_channel_id": 128, "south": 68, "space": [20, 210, 319, 444, 842, 916, 922, 1048], "spam": [232, 319, 660, 1232], "span": [460, 462, 463, 802, 1067, 1069, 1070, 1305], "spanner": [319, 323], "spark": [44, 319], "sparklin": [39, 319], "speak": [644, 802, 1217, 1305], "spearman": 734, "speci": [319, 322], "special": [37, 134, 135, 137, 148, 281, 296, 319, 615, 660, 673, 674, 802, 890, 916, 1159, 1192, 1232, 1245, 1246, 1305], "specif": [1, 30, 38, 39, 40, 41, 92, 121, 123, 125, 127, 134, 137, 138, 139, 143, 144, 145, 149, 150, 152, 181, 222, 224, 271, 276, 319, 441, 444, 687, 689, 690, 694, 715, 802, 820, 846, 916, 921, 922, 1045, 1048, 1259, 1261, 1262, 1266, 1280, 1284, 1294, 1305, 1321, 1333, 1336], "specifi": [36, 37, 38, 39, 44, 45, 50, 93, 96, 99, 114, 117, 134, 139, 145, 146, 148, 153, 165, 180, 181, 196, 197, 200, 205, 209, 210, 224, 242, 244, 251, 252, 254, 257, 258, 262, 265, 276, 282, 285, 293, 294, 298, 319, 388, 395, 444, 460, 462, 463, 464, 469, 594, 607, 609, 616, 618, 620, 622, 624, 627, 629, 631, 638, 647, 702, 710, 727, 730, 731, 732, 733, 743, 744, 746, 747, 748, 750, 780, 784, 789, 790, 798, 802, 818, 820, 835, 837, 841, 842, 846, 865, 867, 868, 871, 874, 879, 881, 886, 887, 892, 916, 922, 995, 1048, 1066, 1067, 1069, 1070, 1076, 1187, 1210, 1284, 1305, 1321, 1335], "speed": [48, 260, 319, 553, 802, 870, 916, 1336], "speedup": [50, 153, 222, 229, 319, 553, 802, 1159, 1305], "split": [1, 39, 44, 51, 223, 319, 658, 679, 680, 1230, 1251, 1252], "split_by_column_dtyp": 53, "split_inclus": 678, "splitfram": [1, 51], "spreadsheet": [35, 133, 139, 145, 244, 319], "spring": [673, 674], "sql": [0, 37, 111, 112, 120, 136, 137, 224, 262, 319, 363, 537, 638, 761, 782, 802, 814, 871, 916, 960, 1144, 1210, 1305, 1314, 1315, 1317, 1319, 1322, 1323, 1324, 1325, 1327, 1328, 1329, 1330, 1331, 1334, 1335], "sql_expr": 1333, "sqlalchemi": [37, 136, 156, 319], "sqlcontext": [266, 319, 781, 875, 916, 1332], "sqlite": [37, 136, 319], "sqrt": [553, 644, 702, 802, 1159, 1217, 1305, 1326], "sqrt_x": 1327, "squar": [1, 54, 305, 502, 610, 648, 802, 899, 1109, 1188, 1220, 1305, 1327], "st": [32, 1336], "stabil": [211, 319, 483, 802, 1088, 1305], "stabl": [146, 175, 186, 188, 189, 211, 255, 259, 266, 319, 408, 483, 549, 567, 708, 802, 828, 829, 856, 869, 874, 875, 916, 924, 1088, 1288, 1305], "stack": [58, 214, 291, 319, 322, 1315], "stai": [552, 640, 802], "standalon": [162, 922], "standard": [7, 10, 39, 267, 276, 281, 319, 426, 462, 627, 628, 644, 649, 668, 783, 798, 802, 876, 916, 1026, 1064, 1069, 1171, 1217, 1221, 1240, 1305, 1322, 1336], "standardis": [39, 319], "start": [39, 132, 134, 135, 137, 139, 140, 142, 144, 145, 146, 148, 151, 152, 153, 170, 204, 209, 210, 227, 264, 289, 295, 296, 319, 372, 375, 377, 413, 421, 431, 436, 439, 452, 453, 464, 478, 520, 538, 613, 617, 619, 621, 623, 625, 628, 630, 632, 645, 651, 656, 660, 664, 672, 677, 681, 682, 684, 685, 688, 697, 724, 729, 738, 742, 743, 744, 745, 746, 747, 750, 752, 758, 759, 789, 790, 792, 798, 802, 840, 841, 842, 861, 873, 889, 890, 916, 922, 973, 1013, 1015, 1018, 1021, 1023, 1024, 1030, 1032, 1034, 1035, 1038, 1040, 1043, 1047, 1056, 1057, 1082, 1127, 1145, 1191, 1218, 1228, 1232, 1236, 1244, 1249, 1253, 1254, 1256, 1260, 1269, 1305, 1321, 1328, 1336], "start_bi": [210, 319, 842, 916], "startbi": [210, 319, 842, 916], "starts_a": 1328, "starts_with": [51, 244, 319, 323, 372, 375, 560, 651, 656, 781, 875, 916, 922, 1228, 1326], "starts_with_expr": 377, "starts_with_lit": 377, "startup": [276, 319], "stat": [502, 644, 802, 1109, 1217, 1305], "state": [4, 5, 104, 738, 814, 834, 861, 872, 916, 1333], "statement": [594, 792, 802, 1319, 1334], "static": [86, 899], "statist": [44, 48, 134, 135, 146, 151, 153, 188, 319, 462, 463, 502, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 644, 802, 828, 916, 1008, 1069, 1070, 1109, 1198, 1217, 1305], "std": [188, 319, 627, 628, 802, 828, 916, 1008, 1199, 1305], "std_dev": [39, 319], "stddev": 1326, "stddev_samp": 1322, "stdev": [39, 319, 1322], "stdev_samp": 1322, "stdout": [173, 208, 319, 569], "step": [287, 319, 474, 724, 758, 759, 802], "steve": [236, 319, 857, 916], "still": [136, 137], "stock": [319, 322], "stop": [132, 134, 135, 140, 142, 144, 146, 148, 151, 152, 153, 617, 619, 621, 623, 625, 628, 630, 632, 802, 1015, 1018, 1023, 1024, 1030, 1032, 1034, 1038, 1043, 1047], "storag": [36, 38, 40, 44, 45, 46, 47, 48, 134, 138, 140, 142, 144, 146, 148, 149, 150, 151, 152, 153, 319, 916], "storage_opt": [36, 38, 40, 44, 45, 46, 47, 48, 134, 138, 140, 142, 144, 146, 148, 149, 150, 151, 152, 153, 319, 916], "store": [38, 134, 150, 198, 222, 253, 319, 390, 612, 802, 985, 1073, 1190, 1305], "store_id": [594, 802], "str": [1, 2, 3, 5, 6, 9, 10, 12, 15, 16, 17, 20, 21, 26, 27, 30, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 65, 68, 90, 121, 122, 123, 124, 125, 127, 128, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 161, 162, 164, 167, 168, 169, 173, 180, 181, 185, 188, 189, 190, 191, 192, 193, 194, 196, 197, 201, 202, 203, 205, 206, 208, 209, 210, 212, 214, 217, 219, 220, 222, 224, 225, 226, 228, 230, 232, 234, 235, 236, 237, 240, 242, 244, 246, 248, 249, 250, 251, 252, 253, 255, 259, 260, 264, 265, 266, 267, 268, 270, 272, 273, 274, 275, 276, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 319, 328, 329, 330, 351, 356, 368, 372, 373, 374, 375, 377, 388, 390, 400, 406, 408, 410, 418, 435, 438, 439, 441, 444, 452, 461, 464, 470, 472, 476, 477, 480, 487, 490, 511, 512, 521, 522, 523, 538, 542, 544, 553, 564, 566, 567, 568, 569, 571, 578, 579, 580, 581, 582, 583, 584, 585, 591, 594, 598, 601, 607, 608, 609, 611, 613, 614, 617, 619, 621, 623, 625, 628, 630, 632, 639, 646, 647, 698, 699, 700, 701, 710, 715, 717, 718, 719, 720, 721, 722, 723, 725, 726, 732, 733, 735, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 750, 751, 752, 753, 754, 755, 756, 757, 760, 761, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 775, 776, 777, 778, 779, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 798, 802, 809, 818, 820, 823, 824, 826, 828, 829, 830, 831, 832, 834, 835, 838, 841, 842, 844, 846, 847, 848, 856, 857, 860, 861, 863, 864, 865, 869, 870, 872, 873, 874, 875, 879, 880, 881, 882, 883, 888, 889, 890, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 916, 920, 921, 922, 928, 948, 953, 965, 970, 984, 985, 1007, 1008, 1018, 1039, 1042, 1043, 1045, 1048, 1056, 1068, 1076, 1079, 1118, 1119, 1130, 1151, 1167, 1168, 1169, 1180, 1185, 1186, 1187, 1207, 1270, 1272, 1273, 1281, 1282, 1283, 1284, 1294, 1305, 1311, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1325, 1328, 1329, 1333, 1334, 1336], "str_date": 1328, "str_timestamp": 1328, "strategi": [36, 45, 50, 58, 134, 153, 161, 162, 163, 164, 165, 166, 168, 200, 210, 224, 225, 239, 288, 319, 469, 544, 553, 802, 837, 842, 846, 847, 883, 916, 1076, 1151, 1305], "stream": [14, 40, 41, 45, 46, 47, 48, 56, 57, 132, 134, 135, 139, 140, 141, 142, 143, 144, 145, 146, 147, 209, 224, 284, 319, 552, 802, 823, 824, 834, 841, 846, 852, 856, 861, 872, 874, 880, 916], "streamabl": [852, 856, 882, 916], "strftime": [92, 444, 1048, 1326, 1328], "strict": [123, 124, 127, 131, 181, 190, 248, 319, 373, 389, 444, 651, 654, 663, 687, 689, 690, 692, 694, 802, 820, 830, 863, 916, 922, 969, 984, 1048, 1223, 1226, 1235, 1259, 1261, 1262, 1264, 1266, 1305], "strictli": [36, 45, 49, 89, 319, 916], "string": [1, 2, 3, 5, 6, 12, 14, 15, 16, 20, 34, 36, 37, 38, 39, 42, 43, 45, 49, 62, 65, 68, 80, 87, 88, 89, 90, 92, 98, 116, 124, 128, 131, 134, 135, 136, 137, 148, 157, 158, 159, 160, 161, 168, 172, 180, 181, 184, 189, 194, 196, 203, 205, 208, 209, 210, 225, 242, 244, 251, 254, 256, 257, 258, 259, 265, 275, 276, 282, 283, 287, 289, 293, 294, 298, 319, 328, 351, 356, 373, 374, 375, 388, 391, 392, 395, 408, 435, 439, 441, 444, 452, 461, 464, 472, 476, 490, 523, 567, 569, 594, 598, 608, 609, 614, 617, 619, 621, 623, 625, 628, 630, 632, 647, 650, 651, 652, 653, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 699, 702, 710, 718, 720, 722, 727, 730, 731, 732, 733, 741, 743, 744, 746, 747, 753, 766, 768, 771, 780, 784, 786, 789, 790, 792, 798, 802, 814, 818, 820, 825, 829, 833, 834, 841, 842, 847, 865, 866, 867, 868, 869, 874, 879, 886, 887, 892, 916, 921, 922, 953, 969, 970, 971, 986, 987, 988, 1039, 1043, 1045, 1048, 1056, 1068, 1094, 1130, 1186, 1187, 1222, 1223, 1224, 1225, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1272, 1283, 1284, 1305, 1314, 1315, 1323, 1326, 1329, 1332, 1336], "stringcach": [88, 89, 224, 319, 814, 986, 989], "stringio": [143, 144, 476, 802], "strings_hex": 655, "strip": [28, 682, 683, 684, 685, 686, 1254, 1255, 1256, 1328], "strip_chars_end": [684, 686], "strip_chars_start": [683, 685], "strip_prefix": [684, 686], "strip_suffix": [683, 685], "strongli": [39, 170, 229, 252, 305, 319, 553, 802, 1159, 1305], "strpo": 1326, "strpost": 1328, "strptime": [251, 319, 438, 614, 802, 865, 916, 1042, 1326], "struct": [8, 117, 128, 240, 257, 280, 285, 293, 319, 368, 406, 485, 544, 552, 553, 579, 581, 583, 601, 612, 613, 661, 667, 679, 680, 708, 715, 738, 739, 741, 763, 802, 867, 881, 886, 899, 916, 965, 1007, 1151, 1159, 1180, 1190, 1233, 1239, 1251, 1252, 1286, 1288, 1305], "struct_col": [698, 700, 701], "struct_seri": 899, "structarrai": [196, 319, 1066, 1305], "structfieldnotfounderror": 700, "structur": [39, 40, 41, 98, 101, 115, 131, 198, 243, 254, 271, 277, 319, 598, 802, 860, 916, 1073, 1280, 1305, 1333], "student": [244, 319], "style": [7, 20, 39, 136, 244, 319], "sub": [305, 349, 350, 351, 354, 355, 356, 357, 358, 359, 360, 361, 365, 366, 370, 523, 530, 802, 946, 947, 948, 951, 952, 953, 954, 955, 956, 957, 958, 962, 963, 967, 1130, 1137], "subarrai": [347, 348, 944, 945], "subclass": [1, 319], "subexpress": [56, 57, 823, 824, 834, 861, 872, 916], "subinterv": 1322, "subject": [44, 244, 319], "sublist": [355, 509, 510, 512, 514, 518, 519, 520, 521, 522, 523, 524, 533, 538, 542, 544, 952, 1099, 1116, 1117, 1119, 1121, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1140, 1145, 1149, 1151, 1305], "subplan": [56, 57, 823, 824, 834, 861, 872, 916], "subsequ": [39, 146, 153, 247, 278, 319, 544, 781, 792, 834, 916, 1287, 1305, 1320], "subset": [192, 193, 240, 284, 319, 831, 832, 880, 916], "substr": [372, 375, 377, 651, 656, 663, 673, 674, 677, 678, 679, 680, 681, 922, 968, 971, 973, 1223, 1228, 1235, 1245, 1246, 1249, 1250, 1251, 1252, 1253, 1326], "subtl": [39, 319], "subtli": [474, 802], "subtract": [502, 703, 802, 1109, 1305], "succe": [134, 135, 148], "success": [653, 660, 1225, 1232], "successfulli": [823, 916], "suffix": [224, 225, 226, 257, 293, 298, 319, 330, 375, 388, 497, 498, 499, 500, 558, 578, 580, 583, 584, 585, 611, 656, 683, 686, 710, 802, 846, 847, 848, 867, 886, 888, 892, 916, 922, 971, 1228, 1258], "suffix_field": [579, 581], "sugar": [288, 319, 608, 609, 675, 719, 721, 723, 735, 737, 740, 750, 755, 756, 757, 765, 767, 769, 770, 772, 774, 775, 780, 783, 785, 787, 791, 793, 802, 883, 916, 1186, 1187, 1220, 1247, 1305], "suggest": [319, 322, 1305, 1310], "suitabl": [50, 58, 136, 162, 229, 319, 553, 636, 802, 1159, 1206, 1305], "sum": [39, 196, 203, 209, 210, 220, 244, 251, 269, 298, 319, 403, 404, 408, 457, 470, 544, 553, 564, 566, 567, 568, 569, 570, 608, 609, 614, 629, 630, 717, 719, 731, 738, 740, 741, 752, 764, 776, 786, 802, 823, 824, 829, 834, 841, 842, 859, 861, 865, 869, 872, 892, 916, 920, 922, 1004, 1005, 1062, 1066, 1200, 1305, 1314, 1321, 1323, 1326, 1333], "sum_": [644, 802, 1217, 1305], "sum_a": [251, 319, 614, 802, 865, 916], "sum_horizont": [50, 319, 785], "summari": [188, 319, 828, 916, 1008, 1305, 1321], "summer": [673, 674], "sun": [319, 322, 687, 1259], "sundai": [210, 319, 413, 441, 444, 454, 729, 842, 916, 1013, 1045, 1048, 1058], "sunni": [673, 674, 1245, 1246], "supercast": [203, 319], "supertyp": [58, 200, 277, 281, 319, 334, 732, 802, 837, 916, 920, 1305], "suppli": [37, 39, 121, 123, 124, 125, 127, 136, 143, 144, 152, 201, 252, 276, 319, 470, 598, 802, 838, 916, 1284, 1305], "support": [1, 36, 37, 38, 39, 40, 44, 45, 46, 47, 48, 58, 121, 122, 123, 124, 125, 126, 127, 128, 136, 137, 138, 139, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 161, 165, 168, 173, 222, 223, 224, 225, 253, 254, 264, 265, 273, 278, 281, 319, 444, 461, 538, 594, 608, 609, 645, 647, 652, 662, 664, 665, 673, 674, 675, 677, 688, 798, 802, 808, 823, 846, 847, 873, 874, 916, 922, 1048, 1068, 1145, 1186, 1187, 1218, 1224, 1234, 1236, 1237, 1245, 1246, 1247, 1249, 1260, 1287, 1289, 1305, 1309, 1323, 1328, 1329, 1331, 1332, 1333], "supportsinterchang": 122, "suppos": [178, 244, 319, 553, 802, 1159, 1305], "sure": [58, 121, 126, 134, 135, 138, 140, 142, 146, 149, 247, 319, 802, 920], "surreal": 136, "surreal_query_to_fram": 136, "surrealdb": 136, "surrealhttp": 136, "surrealql": 136, "suscept": 916, "swap": [863, 916], "swim": 733, "switch": [414, 823, 916, 1014], "sy": 173, "sydnei": 745, "symbol": [35, 36, 45, 319, 802, 916], "symmetr": [535, 922, 1142], "symmetri": [826, 833, 866, 885, 916], "synchron": 910, "syntact": [288, 319, 608, 609, 675, 719, 721, 723, 735, 737, 740, 750, 755, 756, 757, 765, 767, 769, 770, 772, 774, 775, 780, 783, 785, 787, 791, 793, 802, 883, 916, 1186, 1187, 1220, 1247, 1305], "syntax": [39, 112, 201, 229, 240, 319, 568, 651, 659, 660, 663, 673, 674, 758, 759, 798, 838, 872, 916, 1223, 1231, 1232, 1235, 1245, 1246, 1305, 1329, 1331], "system": [35, 134, 135, 319, 418, 823, 916, 1018], "t": [35, 36, 38, 45, 58, 133, 134, 139, 145, 148, 210, 225, 229, 243, 284, 287, 319, 405, 414, 422, 438, 444, 457, 460, 462, 463, 516, 553, 594, 598, 659, 663, 673, 674, 684, 687, 690, 695, 792, 802, 842, 847, 860, 880, 916, 922, 1006, 1042, 1048, 1062, 1067, 1069, 1070, 1123, 1159, 1231, 1235, 1245, 1246, 1255, 1256, 1259, 1262, 1267, 1305, 1317, 1318, 1328], "t_": [285, 319, 461, 802, 881, 916, 1068, 1305], "t_0": [251, 319, 461, 614, 617, 619, 621, 623, 625, 628, 630, 632, 802, 865, 916, 1068, 1305], "t_1": [251, 319, 461, 614, 617, 619, 621, 623, 625, 628, 630, 632, 802, 865, 916, 1068, 1305], "t_a": [285, 319, 881, 916], "t_b": [285, 319, 881, 916], "t_c": [285, 319, 881, 916], "t_d": [285, 319, 881, 916], "t_i": [461, 802, 1068, 1305], "t_id": [226, 319, 848, 916], "t_n": [251, 319, 614, 617, 619, 621, 623, 625, 628, 630, 632, 802, 865, 916], "t_struct": [285, 319, 881, 916], "tab_spann": [319, 323], "tab_stub": [319, 323], "tab_styl": [319, 323], "tabl": [7, 15, 16, 17, 19, 20, 21, 22, 23, 25, 26, 37, 38, 39, 121, 128, 131, 138, 139, 145, 149, 150, 224, 226, 244, 266, 271, 278, 287, 288, 319, 323, 781, 814, 846, 848, 875, 883, 916, 1315, 1316, 1317, 1318, 1320, 1321, 1332, 1333], "table_nam": [37, 39, 266, 319, 875, 916], "table_path": [38, 138, 149, 150, 319], "table_styl": [39, 319], "tablemerg": [38, 319], "tablenotfounderror": [38, 319], "tables_scale_100": [130, 135], "tail": [208, 212, 319, 334, 644, 802, 916, 1089, 1217, 1305], "take": [39, 131, 139, 145, 164, 165, 173, 203, 204, 210, 233, 236, 243, 244, 248, 319, 344, 413, 435, 470, 477, 478, 519, 520, 552, 579, 581, 583, 647, 727, 729, 749, 751, 760, 802, 840, 842, 857, 863, 916, 941, 1013, 1039, 1081, 1082, 1126, 1127, 1296, 1305, 1323], "taken": [538, 677, 1145, 1249], "talkin": [695, 1267], "tan": [802, 1305, 1326], "tand": 1326, "tangent": [340, 341, 706, 707, 802, 937, 938, 1278, 1279, 1305, 1330], "tanh": [244, 319, 802, 1305], "target": [1, 37, 38, 39, 55, 139, 281, 319, 659, 673, 674, 687, 689, 690, 922, 1231, 1245, 1246, 1259, 1261, 1262, 1328], "target_alia": [38, 319], "target_t": [37, 319], "task": [57, 824, 916], "tau": [460, 461, 802, 1067, 1068, 1305], "tb": [157, 159, 196, 319, 376, 1066, 1305], "tbl": [130, 135, 1335], "tbl0": 1320, "tbl1": [1318, 1320], "tbl2": [1318, 1320], "tbl3": 1318, "tbl4": 1318, "tbl_cell_numeric_align": [9, 10, 27], "tbl_col": 17, "tbl_format": [20, 173], "tbl_hide_column_data_typ": 20, "tbl_hide_dataframe_shap": 20, "tbl_row": [25, 188, 319, 828, 916], "tbl_width_char": 748, "td": 444, "td1": 922, "td2": 922, "td3": 922, "tdf": [243, 319], "technic": 798, "tell": [652, 675, 1224, 1247], "tempor": [92, 181, 210, 222, 251, 253, 254, 273, 319, 395, 444, 490, 614, 617, 619, 621, 623, 625, 628, 630, 632, 802, 814, 820, 842, 865, 916, 922, 995, 1048, 1094, 1305, 1326, 1332], "temporalliter": [395, 802, 995, 1028, 1029, 1305], "temporari": [37, 319], "temporarili": [170, 173, 210, 251, 319, 614, 802, 842, 865, 916], "tend": [157, 159], "tensor": [281, 319, 1289, 1305], "tensordataset": [281, 319], "term": [460, 462, 463, 665, 677, 688, 802, 1067, 1069, 1070, 1237, 1249, 1260, 1305], "termin": [36, 45, 319, 916], "test": [0, 37, 136, 137, 139, 145, 195, 244, 319, 814, 1065, 1305], "test1": 1320, "test2": 1320, "test3": 1320, "test_1": [244, 319], "test_1_math": [244, 319], "test_1_phys": [244, 319], "test_2": [244, 319], "test_2_math": [244, 319], "test_2_phys": [244, 319], "test_data": 136, "test_df_height": 164, "test_func": 763, "test_lf": [888, 916], "test_miscellan": 1336, "test_numer": 1336, "test_price_calcul": 1336, "test_series_len": 168, "test_tabl": 137, "test_unique_xyz": 162, "testdb": 137, "testing1234": 1320, "text": [133, 136, 391, 392, 657, 665, 669, 670, 673, 674, 676, 677, 688, 782, 987, 988, 1237, 1241, 1242, 1248, 1249, 1260, 1320, 1336], "text1": 674, "text2": 674, "textclaus": 136, "texttt": [644, 802, 1217, 1305], "th": [204, 319, 478, 520, 533, 644, 665, 688, 802, 840, 916, 1082, 1127, 1140, 1217, 1237, 1260, 1305], "than": [39, 45, 46, 47, 48, 56, 57, 95, 118, 125, 127, 134, 135, 136, 139, 145, 148, 154, 182, 209, 222, 224, 225, 229, 242, 252, 253, 255, 287, 305, 319, 391, 474, 476, 479, 481, 490, 504, 532, 551, 552, 553, 569, 601, 613, 635, 644, 665, 669, 671, 672, 680, 688, 697, 734, 764, 802, 823, 824, 841, 846, 847, 899, 916, 987, 1094, 1139, 1159, 1180, 1191, 1204, 1217, 1237, 1241, 1243, 1244, 1252, 1260, 1269, 1286, 1305, 1336], "the_aws_access_key_id": [38, 138, 149, 150, 319], "the_aws_region": [38, 319], "the_aws_secret_access_kei": [38, 138, 149, 150, 319], "thei": [36, 39, 45, 49, 57, 58, 88, 89, 124, 148, 173, 225, 227, 254, 319, 594, 675, 683, 684, 802, 823, 847, 916, 920, 922, 1247], "them": [57, 121, 123, 124, 125, 127, 136, 137, 139, 143, 144, 145, 146, 148, 151, 152, 153, 173, 197, 198, 210, 225, 236, 244, 251, 281, 289, 319, 356, 461, 490, 523, 586, 587, 594, 614, 732, 743, 744, 746, 747, 789, 790, 802, 824, 835, 842, 847, 857, 865, 916, 922, 953, 1068, 1073, 1130, 1168, 1169, 1305, 1323, 1333], "therebi": [148, 151, 152], "therefor": [196, 319, 553, 792, 802, 1066, 1305], "theta": [460, 462, 463, 802, 1067, 1069, 1070, 1305], "thi": [1, 4, 5, 10, 12, 14, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 44, 45, 46, 47, 48, 49, 50, 56, 57, 58, 64, 65, 66, 67, 68, 71, 81, 89, 96, 121, 123, 124, 125, 126, 127, 128, 130, 131, 134, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 175, 177, 178, 179, 180, 183, 184, 186, 188, 189, 192, 193, 196, 198, 202, 203, 208, 209, 210, 211, 215, 217, 219, 220, 221, 222, 224, 225, 226, 227, 229, 230, 232, 234, 235, 236, 237, 239, 240, 242, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 257, 258, 259, 260, 262, 264, 266, 267, 268, 271, 273, 276, 277, 278, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 300, 305, 318, 319, 322, 323, 331, 334, 335, 344, 356, 362, 363, 364, 369, 387, 388, 390, 395, 405, 406, 408, 414, 415, 426, 432, 433, 435, 438, 439, 441, 444, 455, 459, 466, 476, 483, 485, 487, 488, 490, 494, 516, 517, 523, 532, 533, 534, 535, 536, 537, 539, 544, 545, 549, 550, 552, 553, 557, 558, 559, 560, 561, 562, 563, 564, 565, 567, 568, 571, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 589, 594, 601, 604, 605, 606, 607, 608, 609, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 635, 637, 638, 639, 640, 645, 646, 647, 650, 652, 659, 662, 664, 666, 667, 671, 672, 675, 682, 683, 684, 685, 686, 691, 695, 697, 699, 702, 709, 710, 712, 713, 714, 715, 719, 723, 731, 732, 735, 737, 738, 751, 752, 754, 756, 757, 760, 761, 764, 767, 769, 772, 774, 778, 779, 780, 783, 787, 791, 792, 793, 798, 802, 814, 817, 818, 819, 822, 823, 824, 825, 826, 828, 829, 831, 832, 833, 834, 841, 842, 844, 846, 847, 848, 850, 852, 856, 857, 861, 863, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 879, 880, 882, 883, 885, 886, 887, 888, 889, 890, 891, 894, 899, 913, 914, 915, 916, 920, 922, 924, 931, 932, 941, 953, 959, 960, 961, 966, 983, 985, 989, 990, 995, 996, 1006, 1007, 1014, 1015, 1017, 1026, 1036, 1037, 1039, 1042, 1043, 1045, 1048, 1059, 1061, 1064, 1066, 1072, 1073, 1082, 1084, 1088, 1090, 1099, 1108, 1123, 1124, 1130, 1139, 1140, 1141, 1142, 1143, 1144, 1146, 1152, 1157, 1159, 1160, 1161, 1162, 1163, 1165, 1166, 1167, 1168, 1169, 1171, 1174, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1204, 1205, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1218, 1219, 1221, 1222, 1224, 1231, 1234, 1236, 1238, 1239, 1243, 1244, 1247, 1254, 1255, 1256, 1263, 1267, 1269, 1270, 1272, 1275, 1276, 1280, 1282, 1284, 1285, 1286, 1287, 1289, 1290, 1291, 1293, 1294, 1295, 1305, 1310, 1314, 1315, 1316, 1320, 1328, 1331, 1332, 1333, 1334, 1336], "thing": [148, 155], "think": [432, 433, 1036, 1037], "third": [552, 802], "thoma": [236, 319, 857, 916], "those": [5, 30, 39, 134, 254, 278, 288, 319, 474, 604, 659, 764, 802, 883, 916, 922, 1182, 1231, 1287, 1305], "though": [37, 136, 210, 319, 798, 842, 916], "thousand": [9, 27], "thousands_separ": [9, 10, 27], "thread": [14, 36, 45, 57, 130, 134, 135, 137, 170, 171, 265, 319, 516, 553, 647, 727, 802, 824, 874, 916, 961, 1123, 1146, 1219, 1305], "thread_loc": [553, 802], "thread_pool_s": 171, "threadpool": 56, "three": [39, 178, 251, 280, 319, 406, 601, 614, 636, 665, 673, 688, 802, 865, 916, 965, 1007, 1151, 1180, 1237, 1246, 1260, 1305], "threshold": [257, 319, 867, 916], "through": [122, 136, 798, 922, 1305, 1320], "throughout": 173, "throw": [38, 123, 124, 127, 190, 248, 319, 667, 668, 820, 830, 863, 916, 1239, 1240, 1305], "thu": [39, 198, 319, 322, 734, 1073, 1305], "thursdai": [210, 319, 413, 729, 842, 916, 1013], "ti": [604, 802, 1182, 1305], "time": [12, 36, 38, 40, 44, 45, 46, 47, 48, 55, 56, 57, 65, 67, 105, 138, 144, 146, 148, 149, 151, 152, 153, 164, 165, 168, 188, 198, 210, 225, 226, 251, 289, 319, 351, 387, 388, 414, 415, 417, 418, 419, 422, 423, 432, 433, 435, 438, 439, 441, 443, 444, 452, 455, 461, 511, 512, 544, 613, 614, 617, 619, 621, 623, 625, 628, 630, 632, 640, 687, 690, 694, 708, 709, 710, 732, 733, 743, 744, 745, 746, 747, 748, 754, 789, 790, 802, 823, 824, 828, 842, 847, 848, 861, 865, 916, 922, 948, 983, 1014, 1015, 1017, 1018, 1022, 1023, 1039, 1042, 1043, 1045, 1047, 1048, 1056, 1059, 1068, 1073, 1118, 1119, 1191, 1213, 1259, 1262, 1266, 1288, 1290, 1305, 1314, 1320, 1329, 1336], "time_column": [289, 319], "time_format": [36, 45, 319, 916], "time_unit": [65, 67, 415, 417, 423, 443, 455, 690, 745, 746, 747, 748, 754, 921, 922, 1015, 1017, 1023, 1047, 1059, 1262], "time_unit_m": [415, 1015], "time_unit_n": [415, 1015], "time_unit_u": 455, "time_zon": [65, 418, 420, 438, 690, 745, 746, 747, 921, 922, 1014, 1018, 1022, 1042, 1262], "timedelta": [210, 225, 251, 289, 319, 435, 439, 444, 452, 461, 614, 617, 619, 621, 623, 625, 628, 630, 632, 743, 744, 746, 747, 789, 790, 802, 842, 847, 865, 916, 921, 922, 1027, 1033, 1039, 1043, 1056, 1068, 1168, 1169, 1221, 1295, 1305], "timeout": [57, 824, 916], "timestamp": [128, 138, 149, 210, 319, 438, 439, 452, 754, 842, 916, 1042, 1043, 1056, 1326], "timestamp_m": 443, "timestamp_n": 1047, "timestamp_u": [443, 1047], "timestep": 754, "timeunit": [36, 45, 65, 67, 319, 415, 417, 443, 455, 690, 745, 746, 747, 748, 916, 922, 1015, 1017, 1047, 1059, 1262], "timezon": [65, 138, 149, 420, 922, 1329], "tip": [553, 802], "titl": [39, 319, 322, 1305, 1310, 1314], "titlecas": [695, 1267], "tm": [417, 444, 922, 1329], "to_arrow": [223, 319, 1286, 1305, 1333], "to_batch": [223, 319], "to_dict": [181, 254, 319, 820, 916, 922], "to_dummi": [276, 281, 319, 1305], "to_fram": [390, 423, 439, 443, 452, 687, 1007, 1180, 1205, 1207, 1251, 1252, 1259, 1305, 1310], "to_init_repr": [128, 319, 1305], "to_jax": [281, 319, 1305], "to_list": [128, 251, 319, 1223, 1235, 1305], "to_lowercas": 585, "to_numpi": [276, 281, 319, 552, 802, 1305], "to_panda": [319, 1305], "to_phys": [802, 989, 1305], "to_python": 921, "to_seri": [51, 205, 319, 687, 728, 777, 1259], "to_sql": [37, 319], "to_str": [441, 1045], "to_struct": [319, 660], "to_torch": [276, 319, 1305], "to_uppercas": [330, 584, 661, 802], "togeth": 1328, "token": [36, 40, 44, 45, 46, 47, 48, 144, 146, 148, 150, 151, 152, 153, 319, 916], "tokyo": [128, 922], "tokyo_tz": 922, "toler": [157, 158, 159, 160, 225, 319, 847, 916], "tone": [39, 319], "tonight": [652, 675, 1224, 1247], "too": [14, 244, 319, 594, 802, 916], "tooltip": [319, 322, 1305, 1310], "toomanyrowsreturnederror": [252, 319], "top": [39, 266, 282, 319, 322, 710, 802, 875, 879, 916, 1305, 1310, 1333], "top_col": [39, 319], "top_k": [180, 319, 387, 388, 710, 802, 818, 916, 983, 1305], "top_k_bi": [387, 388, 709, 802], "top_row": [39, 319], "tor_id": 128, "torch": [156, 281, 319, 1289, 1305], "torchexporttyp": [281, 319], "total": [39, 196, 300, 319, 445, 446, 447, 448, 449, 450, 451, 505, 525, 802, 894, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1066, 1112, 1132, 1305], "total_gross": 1314, "toward": [300, 505, 525, 802, 894, 1112, 1132, 1305], "tp": [1, 53], "tpu": [276, 319, 1284, 1305], "trace": 68, "traceback": [157, 158, 159, 160, 277, 319, 609, 802, 1187, 1286, 1305], "tracebacktyp": 1333, "track": [138, 149, 150, 229, 319, 544, 1333], "trail": [28, 208, 319, 682, 683, 1254, 1255], "train": [281, 319], "train_lf": [888, 916], "transfer": 137, "transferencod": [373, 374, 654, 655, 969, 970, 1226, 1227], "transform": [229, 266, 319, 552, 695, 781, 802, 875, 916, 1267], "transform_dens": [1305, 1310], "transit": [201, 319, 838, 916], "translat": 136, "transpar": [823, 916], "transpos": [244, 319], "travel": [138, 149], "travers": [616, 618, 620, 622, 624, 627, 629, 631, 802, 1193, 1194, 1196, 1199, 1200, 1201, 1305], "treat": [134, 135, 148, 175, 461, 651, 653, 663, 673, 674, 792, 802, 924, 1068, 1223, 1225, 1235, 1245, 1246, 1305], "tree": [569, 834, 916], "tree_format": [834, 916], "trend": [39, 319], "tri": [229, 319], "triangl": [305, 899], "trigger": [38, 227, 278, 319, 802, 920, 1287, 1305], "trigonometri": [1326, 1332], "trim": [128, 1328], "trim_decimal_zero": 28, "trip": 136, "true": [7, 8, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 36, 37, 38, 39, 44, 45, 46, 47, 48, 56, 57, 58, 121, 122, 123, 124, 126, 127, 128, 130, 131, 134, 135, 136, 138, 139, 140, 142, 145, 146, 148, 149, 151, 153, 154, 157, 158, 159, 160, 161, 162, 164, 165, 167, 168, 173, 177, 181, 182, 183, 188, 190, 195, 200, 201, 203, 205, 207, 208, 209, 210, 215, 217, 218, 219, 222, 224, 225, 226, 227, 232, 233, 239, 240, 242, 244, 245, 248, 252, 253, 254, 255, 257, 265, 266, 269, 272, 274, 276, 277, 278, 281, 283, 284, 285, 287, 288, 289, 293, 299, 301, 303, 306, 307, 308, 309, 310, 311, 312, 319, 322, 329, 330, 331, 332, 333, 334, 345, 347, 348, 351, 355, 356, 364, 368, 372, 373, 375, 377, 388, 389, 400, 401, 402, 403, 404, 406, 413, 415, 418, 421, 423, 425, 432, 433, 435, 436, 438, 439, 440, 443, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 457, 458, 459, 460, 462, 463, 470, 477, 479, 480, 481, 482, 485, 488, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 504, 507, 508, 512, 519, 521, 523, 539, 544, 551, 552, 553, 557, 558, 559, 560, 561, 562, 563, 564, 565, 568, 569, 570, 588, 589, 591, 593, 596, 597, 601, 606, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 635, 639, 640, 644, 646, 647, 650, 651, 652, 653, 654, 656, 662, 663, 664, 666, 667, 668, 673, 674, 678, 679, 681, 687, 689, 690, 692, 694, 698, 700, 701, 710, 712, 715, 718, 719, 720, 721, 722, 724, 727, 728, 729, 734, 743, 746, 752, 758, 764, 768, 774, 777, 780, 781, 784, 786, 789, 792, 793, 802, 820, 821, 822, 823, 824, 828, 830, 834, 837, 838, 841, 842, 846, 847, 848, 850, 852, 856, 861, 863, 867, 872, 874, 875, 880, 881, 882, 883, 886, 891, 893, 895, 897, 900, 901, 902, 903, 904, 905, 906, 915, 916, 920, 921, 922, 929, 930, 942, 944, 945, 948, 952, 953, 961, 968, 969, 971, 973, 984, 986, 990, 993, 994, 1007, 1013, 1014, 1015, 1018, 1021, 1022, 1023, 1024, 1025, 1029, 1030, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1047, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1062, 1064, 1065, 1067, 1069, 1070, 1077, 1086, 1090, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1109, 1114, 1115, 1119, 1126, 1128, 1130, 1146, 1159, 1165, 1171, 1173, 1176, 1177, 1180, 1183, 1184, 1198, 1217, 1219, 1222, 1223, 1224, 1225, 1226, 1228, 1234, 1235, 1236, 1238, 1239, 1240, 1245, 1246, 1250, 1251, 1253, 1259, 1261, 1262, 1264, 1266, 1281, 1286, 1287, 1294, 1296, 1305, 1310, 1314, 1315, 1317, 1319, 1323, 1325, 1328, 1333, 1336], "truediv": [474, 802], "truncat": [20, 128, 134, 135, 148, 208, 210, 222, 253, 254, 273, 319, 842, 861, 916, 1332], "truncate_nod": [861, 916], "truncate_ragged_lin": [134, 135, 148], "truncate_str": 452, "truncate_td": 452, "trust": [408, 802, 829, 916], "try": [36, 40, 44, 45, 46, 47, 48, 56, 57, 115, 134, 135, 140, 144, 146, 148, 151, 152, 153, 319, 823, 824, 834, 861, 872, 916], "try_cast": 1326, "try_parse_d": [130, 134, 135, 148], "try_parse_hive_d": [146, 151, 153], "ts_local": [438, 1042], "tseri": [432, 433, 1036, 1037], "tstamp": 922, "tstamp_tokyo": 922, "tstamp_utc": 922, "tue": [319, 322], "tuesdai": [210, 319, 842, 916], "tupl": [39, 59, 137, 139, 145, 178, 222, 229, 242, 252, 253, 254, 261, 281, 297, 319, 568, 610, 802, 861, 872, 916, 921, 922, 1188, 1209, 1305], "turn": [8, 45, 46, 47, 48, 56, 57, 134, 135, 148, 224, 225, 319, 823, 824, 834, 846, 847, 852, 861, 916], "twice": [39, 319], "two": [39, 49, 88, 89, 123, 125, 127, 137, 178, 201, 203, 225, 226, 235, 236, 253, 280, 286, 299, 305, 319, 323, 329, 410, 417, 474, 477, 480, 544, 601, 646, 725, 726, 732, 734, 736, 743, 746, 778, 779, 781, 802, 838, 847, 848, 856, 857, 882, 893, 899, 916, 922, 965, 1010, 1017, 1151, 1180, 1305, 1320, 1321, 1322, 1325, 1334], "two_a": 1333, "tworld": [684, 1254, 1256], "txt": [1, 12, 148, 651, 663, 1235], "type": [0, 1, 4, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 38, 39, 45, 46, 47, 48, 51, 52, 53, 54, 56, 57, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 121, 123, 124, 125, 126, 127, 129, 134, 135, 136, 138, 139, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 168, 175, 178, 184, 194, 197, 203, 208, 210, 211, 223, 224, 229, 251, 256, 271, 276, 277, 280, 281, 284, 296, 319, 331, 333, 336, 337, 338, 339, 340, 341, 344, 349, 350, 351, 353, 356, 367, 368, 372, 373, 374, 375, 376, 377, 389, 390, 391, 392, 395, 396, 397, 398, 399, 406, 407, 413, 414, 416, 418, 419, 420, 421, 422, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 442, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 461, 464, 466, 477, 480, 483, 490, 491, 492, 493, 494, 495, 496, 505, 509, 510, 512, 517, 523, 525, 543, 544, 552, 553, 601, 603, 607, 608, 609, 610, 612, 613, 614, 617, 619, 621, 623, 625, 628, 630, 632, 641, 642, 643, 650, 653, 654, 655, 658, 659, 660, 661, 664, 665, 666, 668, 669, 670, 677, 678, 679, 680, 687, 688, 692, 706, 707, 708, 715, 724, 732, 735, 742, 743, 744, 745, 746, 747, 748, 750, 758, 759, 761, 762, 763, 764, 774, 777, 788, 789, 790, 793, 798, 802, 814, 823, 824, 833, 834, 835, 842, 846, 861, 865, 866, 872, 880, 890, 916, 921, 924, 929, 930, 942, 944, 945, 946, 947, 948, 950, 952, 953, 964, 965, 966, 968, 969, 970, 972, 984, 985, 987, 988, 995, 1007, 1008, 1013, 1014, 1016, 1018, 1019, 1020, 1021, 1022, 1024, 1025, 1026, 1030, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1065, 1068, 1072, 1088, 1095, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1107, 1114, 1115, 1116, 1117, 1119, 1124, 1130, 1132, 1150, 1151, 1173, 1180, 1186, 1187, 1188, 1190, 1191, 1212, 1214, 1222, 1223, 1225, 1226, 1227, 1229, 1230, 1231, 1232, 1233, 1236, 1237, 1238, 1240, 1241, 1242, 1249, 1250, 1251, 1252, 1259, 1260, 1264, 1285, 1286, 1288, 1296, 1305, 1314, 1321, 1326, 1328, 1332, 1333], "type_coercion": [45, 46, 47, 48, 56, 57, 823, 824, 834, 861, 872, 916], "typeerror": [38, 319], "typenam": [39, 319], "typic": [124, 136, 153, 229, 319, 422, 641, 802, 922, 1022, 1159, 1214, 1305], "tz": [690, 1262], "tzinfo": [138, 149, 922], "u": [39, 65, 67, 153, 166, 225, 319, 415, 417, 423, 443, 455, 687, 690, 720, 722, 745, 746, 747, 748, 754, 847, 916, 921, 922, 1015, 1017, 1023, 1047, 1059, 1259, 1262, 1318, 1329], "u1": [277, 319], "u16": [148, 1331, 1336], "u32": [12, 136, 179, 181, 187, 241, 295, 296, 300, 304, 310, 312, 319, 329, 335, 342, 343, 344, 345, 346, 349, 350, 352, 361, 376, 391, 392, 399, 400, 485, 505, 509, 510, 513, 525, 530, 576, 592, 604, 612, 613, 617, 619, 621, 623, 625, 628, 630, 632, 636, 653, 663, 664, 669, 670, 708, 713, 715, 719, 723, 727, 728, 735, 737, 758, 761, 772, 802, 817, 820, 827, 859, 889, 890, 894, 898, 904, 906, 916, 922, 941, 942, 943, 946, 947, 949, 958, 984, 987, 988, 989, 1001, 1090, 1116, 1117, 1120, 1132, 1137, 1182, 1190, 1191, 1206, 1225, 1235, 1236, 1241, 1242, 1288, 1292, 1294, 1305, 1314, 1322, 1323, 1324, 1328, 1333], "u64": [211, 296, 319, 483, 606, 802, 861, 890, 916, 922, 1088, 1184, 1305], "u8": [181, 274, 275, 287, 319, 609, 718, 802, 820, 916, 922, 1187, 1281, 1305, 1336], "udf": [170, 229, 243, 305, 319, 408, 553, 598, 764, 802, 829, 860, 899, 916, 1159, 1305], "ufunc": 95, "uid": 136, "uint": 1336, "uint16": [148, 403, 404, 704, 802, 922, 1004, 1005, 1276, 1286, 1289, 1305], "uint2": 1331, "uint32": [129, 156, 181, 196, 251, 296, 319, 344, 349, 350, 376, 391, 392, 399, 461, 477, 480, 505, 509, 510, 525, 607, 612, 613, 614, 617, 619, 621, 623, 625, 628, 630, 632, 653, 664, 669, 670, 708, 735, 758, 761, 802, 820, 865, 890, 916, 922, 942, 946, 947, 972, 984, 987, 988, 1066, 1068, 1116, 1117, 1132, 1190, 1191, 1225, 1236, 1241, 1242, 1288, 1289, 1305], "uint4": 1333, "uint64": [129, 211, 251, 296, 319, 349, 350, 461, 483, 509, 510, 606, 614, 617, 619, 621, 623, 625, 628, 630, 632, 802, 865, 890, 916, 922, 946, 947, 1068, 1088, 1116, 1117, 1184, 1289, 1305], "uint8": [136, 181, 275, 276, 277, 287, 319, 403, 404, 609, 704, 718, 802, 820, 916, 921, 922, 1004, 1005, 1187, 1276, 1289, 1305, 1336], "uint8_pair": 1336, "uit": [677, 1249], "uk": [660, 1232], "unabl": [97, 139], "unalias": 559, "unari": [590, 802], "unbias": [462, 463, 802, 1069, 1070, 1305], "unchang": [196, 319, 608, 708, 802, 852, 899, 916, 1066, 1186, 1288, 1305], "uncompress": [34, 40, 41, 44, 48, 140, 151, 319, 916], "undefin": [711, 802], "under": [36, 40, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 88, 89, 144, 146, 148, 151, 152, 153, 244, 266, 319, 794, 795, 797, 798, 803, 804, 807, 809, 810, 811, 875, 916, 1297, 1299, 1301, 1306, 1311, 1312, 1313], "underli": [1, 49, 64, 65, 67, 81, 89, 94, 104, 121, 123, 124, 125, 127, 136, 137, 139, 143, 144, 146, 152, 161, 164, 168, 197, 198, 222, 223, 253, 271, 277, 319, 373, 415, 416, 417, 421, 424, 425, 426, 427, 428, 429, 430, 431, 434, 436, 437, 438, 440, 444, 453, 454, 455, 456, 606, 633, 651, 654, 663, 802, 835, 916, 922, 969, 989, 1015, 1016, 1017, 1021, 1024, 1025, 1026, 1030, 1031, 1032, 1034, 1035, 1038, 1040, 1041, 1042, 1044, 1048, 1057, 1058, 1059, 1060, 1073, 1184, 1202, 1212, 1223, 1226, 1235, 1280, 1286, 1305, 1333], "understood": 764, "undo": [570, 577, 578, 580, 582, 584, 585], "unexpect": [104, 113, 136, 552, 553, 802, 1159, 1305], "unhelpfulli": [157, 159], "unicod": [20, 392, 665, 670, 677, 688, 922, 988, 1237, 1242, 1249, 1260], "unifi": [39, 276, 281, 319, 922], "uniform": [39, 319, 601, 802, 1180, 1305], "unimod": [644, 802, 1217, 1305], "unintend": [201, 319, 838, 916], "union": [56, 57, 58, 536, 823, 824, 834, 861, 872, 916, 922, 1143, 1332, 1333], "uniqu": [44, 48, 50, 68, 161, 162, 163, 166, 168, 179, 219, 224, 240, 244, 254, 310, 319, 335, 346, 361, 406, 501, 530, 576, 601, 687, 689, 690, 694, 713, 715, 723, 772, 802, 817, 846, 904, 916, 920, 932, 943, 958, 1007, 1107, 1137, 1166, 1180, 1259, 1261, 1262, 1266, 1292, 1294, 1305, 1321, 1323], "unique_column_valu": [244, 319], "unique_count": [802, 1305], "uniquekeepstrategi": [284, 319, 880, 916], "unit": [39, 65, 67, 157, 158, 159, 160, 164, 168, 196, 319, 376, 415, 417, 423, 443, 455, 461, 467, 550, 565, 687, 690, 714, 731, 745, 746, 747, 748, 754, 802, 861, 916, 920, 922, 972, 1015, 1017, 1023, 1047, 1059, 1066, 1068, 1074, 1157, 1259, 1262, 1293, 1305, 1336], "univers": [175, 924], "unix": [64, 65, 423, 754, 1023], "unknown": [544, 659, 762, 1231], "unless": [39, 50, 123, 276, 281, 319, 682, 683, 777, 916, 1254, 1328], "unlik": [131, 210, 319, 842, 916], "unnam": [661, 1233], "unnest": [131, 319, 406, 601, 612, 660, 661, 679, 680, 700, 702, 715, 802, 916, 965, 1007, 1151, 1180, 1190, 1251, 1252, 1305, 1326, 1332], "unpivot": [235, 319, 856, 916], "unregist": [1316, 1317, 1318, 1333, 1335], "unsaf": [802, 920], "unset": [37, 146, 151, 163, 304, 319, 380, 381, 382, 384, 385, 438, 544, 802, 898, 976, 977, 978, 980, 981, 1042, 1305, 1314], "unsign": [82, 83, 84, 85, 606, 802, 922, 1184, 1305], "unsigned_integ": 922, "unstabl": [31, 32, 33, 36, 40, 44, 45, 46, 47, 48, 56, 57, 66, 68, 71, 119, 131, 136, 144, 146, 148, 151, 152, 153, 154, 161, 162, 164, 165, 166, 167, 168, 169, 266, 276, 281, 287, 288, 319, 322, 323, 405, 406, 439, 485, 553, 601, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 731, 778, 779, 802, 823, 824, 834, 875, 883, 916, 990, 1006, 1007, 1043, 1090, 1180, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1284, 1289, 1305, 1310], "unstack": 319, "unstackdirect": [287, 319], "unsuit": 120, "unsupport": [38, 319], "until": [88, 210, 227, 319, 671, 672, 697, 842, 916, 1243, 1244, 1269], "up": [10, 39, 80, 137, 222, 225, 244, 253, 254, 260, 273, 319, 394, 395, 553, 665, 673, 674, 688, 802, 846, 847, 852, 870, 916, 922, 992, 1237, 1245, 1246, 1260, 1305], "upcast": [334, 802], "upcast_integer_typ": [1, 53], "updat": [38, 132, 134, 135, 139, 140, 141, 142, 143, 144, 145, 146, 147, 173, 188, 319, 828, 916], "upgrad": 100, "upheld": [852, 916], "upon": 135, "upper": [134, 135, 136, 196, 210, 319, 395, 485, 490, 544, 579, 714, 724, 743, 744, 746, 747, 789, 790, 802, 842, 916, 995, 1066, 1090, 1094, 1157, 1293, 1305, 1323, 1326], "upper_bound": [210, 319, 395, 490, 544, 802, 842, 916, 995, 1094, 1157, 1305], "uppercas": [585, 696, 1268, 1328], "upsampl": [210, 319, 842, 916], "urandom": [376, 972], "uri": [37, 38, 136, 137, 138, 149, 150, 319], "url": [136, 137, 146, 151, 153, 659, 661, 1231, 1233], "urllib": 137, "us": [1, 7, 9, 11, 12, 14, 20, 25, 27, 32, 33, 35, 36, 37, 38, 39, 40, 41, 44, 45, 48, 49, 50, 56, 57, 58, 65, 80, 88, 89, 92, 96, 119, 122, 124, 125, 127, 129, 133, 134, 135, 136, 137, 138, 139, 140, 142, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 170, 179, 180, 181, 184, 188, 190, 192, 193, 199, 200, 201, 203, 209, 210, 217, 219, 221, 222, 223, 225, 229, 235, 239, 240, 242, 243, 244, 251, 252, 253, 254, 255, 257, 258, 260, 265, 266, 267, 271, 273, 274, 275, 276, 277, 278, 281, 282, 283, 284, 286, 287, 288, 289, 290, 293, 294, 295, 296, 298, 305, 319, 322, 329, 331, 333, 335, 344, 345, 368, 373, 374, 388, 391, 392, 395, 405, 408, 411, 412, 420, 438, 439, 441, 444, 452, 455, 457, 460, 461, 462, 463, 464, 468, 469, 470, 474, 485, 488, 489, 490, 502, 516, 532, 540, 544, 546, 552, 553, 556, 577, 580, 582, 584, 585, 594, 601, 604, 606, 608, 610, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 635, 637, 639, 640, 644, 646, 647, 649, 650, 651, 652, 654, 655, 656, 658, 659, 660, 662, 663, 664, 669, 670, 673, 674, 675, 677, 679, 681, 683, 684, 685, 686, 687, 689, 690, 694, 697, 698, 702, 710, 716, 717, 719, 720, 721, 722, 723, 726, 727, 733, 734, 735, 736, 737, 738, 740, 741, 742, 743, 744, 745, 746, 747, 748, 752, 754, 758, 759, 761, 762, 764, 765, 766, 768, 770, 771, 774, 777, 778, 779, 780, 781, 783, 784, 785, 786, 789, 790, 791, 792, 793, 798, 801, 802, 813, 814, 817, 818, 819, 820, 823, 824, 826, 828, 829, 830, 831, 832, 833, 834, 836, 837, 838, 841, 842, 847, 850, 856, 865, 866, 867, 868, 870, 874, 875, 876, 879, 880, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 899, 916, 921, 922, 929, 930, 932, 961, 965, 969, 970, 987, 988, 990, 1006, 1008, 1011, 1012, 1020, 1028, 1029, 1042, 1043, 1045, 1048, 1056, 1059, 1062, 1067, 1068, 1069, 1070, 1075, 1076, 1081, 1087, 1090, 1092, 1093, 1094, 1109, 1123, 1139, 1146, 1151, 1159, 1180, 1182, 1184, 1186, 1188, 1190, 1191, 1192, 1204, 1205, 1207, 1208, 1211, 1217, 1219, 1221, 1222, 1223, 1224, 1226, 1227, 1230, 1231, 1232, 1234, 1235, 1236, 1241, 1242, 1245, 1246, 1247, 1249, 1251, 1259, 1261, 1262, 1266, 1269, 1280, 1281, 1283, 1286, 1287, 1295, 1305, 1314, 1315, 1316, 1317, 1318, 1320, 1321, 1328, 1329, 1333, 1336], "usag": [164, 168, 263, 319, 922, 1212, 1305], "usd": [208, 319, 1336], "use_pyarrow": [44, 48, 134, 138, 140, 142, 146, 149, 277, 319, 916, 1286, 1305], "use_pyarrow_extension_arrai": [278, 319, 1287, 1305], "use_pyarrow_write_to_dataset": [44, 319], "use_statist": [146, 153], "user": [37, 136, 137, 175, 229, 243, 305, 319, 552, 553, 598, 637, 764, 802, 860, 899, 916, 920, 924, 1159, 1208, 1305], "user_conn": 136, "usernam": [134, 137, 140, 142], "userwarn": 1, "usr": 136, "usual": [96, 137, 173, 281, 319, 414, 1014], "utc": [138, 149, 414, 418, 420, 422, 438, 687, 690, 921, 922, 1014, 1018, 1022, 1042, 1259, 1262], "utc_tz": 922, "utf": [36, 45, 79, 319, 916], "utf8": [20, 134, 135, 148, 665, 677, 688, 1237, 1249, 1260], "utf8_borders_onli": 20, "utf8_ful": [20, 50, 128], "utf8_full_condens": [7, 20, 128], "utf8_horizontal_onli": 20, "utf8_no_bord": 20, "util": [281, 319, 754, 916, 920], "uvw": [660, 1232], "v": [8, 9, 44, 196, 319, 636, 720, 722, 802, 1206, 1305, 1317, 1318], "v1": 32, "v2": [8, 140, 151], "val": [39, 250, 319, 553, 598, 708, 792, 802, 864, 916], "valid": [36, 39, 45, 65, 136, 140, 142, 146, 168, 173, 190, 196, 224, 248, 319, 405, 651, 653, 659, 660, 661, 663, 668, 673, 674, 792, 802, 830, 846, 863, 891, 916, 922, 1006, 1066, 1223, 1225, 1231, 1232, 1233, 1235, 1240, 1245, 1246, 1305, 1314, 1315], "validate_output_schema": [852, 916], "vals_phys": [708, 802], "valu": [4, 5, 10, 11, 12, 13, 17, 20, 28, 30, 35, 36, 39, 44, 45, 48, 49, 50, 58, 59, 62, 68, 76, 77, 86, 89, 98, 123, 124, 126, 127, 134, 135, 136, 137, 146, 148, 151, 153, 154, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 169, 170, 173, 177, 179, 180, 181, 188, 192, 193, 195, 198, 199, 200, 201, 205, 208, 210, 211, 212, 216, 220, 222, 224, 225, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 240, 242, 244, 245, 246, 248, 251, 252, 253, 254, 255, 262, 265, 267, 268, 269, 270, 272, 273, 277, 278, 282, 283, 286, 287, 288, 289, 290, 297, 300, 301, 303, 306, 307, 309, 310, 319, 322, 323, 327, 328, 329, 331, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 346, 347, 348, 349, 350, 352, 354, 355, 356, 357, 358, 359, 360, 361, 363, 364, 365, 366, 369, 370, 371, 373, 374, 375, 376, 377, 387, 388, 389, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 404, 405, 406, 409, 411, 412, 417, 421, 431, 436, 444, 453, 458, 459, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 485, 486, 487, 488, 489, 490, 491, 492, 493, 495, 496, 497, 498, 499, 500, 501, 503, 504, 505, 507, 508, 509, 510, 513, 514, 515, 518, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 532, 537, 539, 540, 541, 542, 544, 545, 546, 548, 550, 551, 552, 553, 554, 555, 556, 561, 572, 573, 574, 575, 576, 586, 587, 588, 589, 592, 594, 595, 598, 599, 601, 602, 604, 607, 608, 609, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 635, 636, 637, 638, 641, 642, 643, 644, 646, 647, 648, 650, 651, 653, 654, 655, 656, 657, 659, 662, 663, 664, 665, 666, 667, 668, 670, 671, 672, 673, 674, 675, 676, 677, 679, 680, 681, 688, 697, 699, 703, 704, 706, 707, 709, 710, 711, 712, 713, 714, 715, 718, 719, 720, 721, 722, 723, 727, 730, 732, 733, 735, 737, 738, 739, 740, 741, 751, 752, 757, 758, 759, 760, 762, 765, 766, 767, 768, 769, 770, 771, 772, 776, 777, 778, 779, 785, 786, 792, 802, 817, 818, 828, 831, 832, 836, 837, 838, 842, 844, 845, 846, 847, 853, 854, 855, 856, 858, 859, 862, 863, 865, 871, 874, 876, 877, 879, 882, 883, 884, 894, 895, 897, 900, 901, 903, 904, 916, 922, 927, 929, 930, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 944, 945, 946, 947, 949, 951, 952, 953, 954, 955, 956, 957, 958, 960, 961, 962, 963, 966, 967, 969, 970, 971, 972, 973, 984, 987, 988, 992, 995, 997, 998, 999, 1001, 1006, 1007, 1008, 1009, 1011, 1012, 1017, 1021, 1035, 1040, 1048, 1057, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1073, 1074, 1075, 1076, 1080, 1081, 1082, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1107, 1112, 1113, 1114, 1115, 1116, 1117, 1120, 1121, 1122, 1125, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1139, 1144, 1146, 1147, 1148, 1149, 1152, 1153, 1159, 1160, 1161, 1163, 1164, 1166, 1168, 1169, 1171, 1172, 1174, 1175, 1179, 1180, 1181, 1182, 1186, 1187, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1204, 1205, 1206, 1207, 1210, 1214, 1215, 1216, 1217, 1219, 1222, 1223, 1225, 1226, 1227, 1228, 1229, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1251, 1252, 1253, 1260, 1269, 1272, 1276, 1277, 1278, 1279, 1286, 1287, 1288, 1292, 1294, 1296, 1305, 1314, 1319, 1321, 1322, 1323, 1324, 1325, 1327, 1328, 1329, 1331, 1333, 1335, 1336], "value1": [647, 802], "value2": [647, 802], "value_a": 1333, "value_b": 1333, "value_count": [713, 802, 1305], "value_cum_sum": [404, 802], "value_cum_sum_all_fil": [404, 802], "value_nam": [235, 286, 319, 856, 882, 916], "value_var": [235, 286, 319, 856, 882, 916], "valueerror": [15, 20], "valueexcept": 762, "var": [39, 169, 319, 631, 632, 802, 916, 1305, 1322], "var_samp": 1322, "vari": [414, 1014, 1336], "variabl": [30, 36, 40, 44, 45, 46, 47, 48, 76, 144, 146, 148, 151, 152, 153, 167, 170, 235, 274, 286, 319, 856, 882, 916, 1281, 1305, 1315, 1317, 1333], "variable_nam": [235, 286, 319, 856, 882, 916], "variad": 136, "varianc": [290, 319, 463, 502, 631, 632, 716, 791, 802, 884, 916, 1070, 1109, 1201, 1295, 1305, 1326], "variou": [136, 178, 184, 319, 802, 825, 916, 921, 922, 1305], "vector": [616, 618, 620, 622, 624, 627, 629, 631, 802, 1193, 1194, 1196, 1199, 1200, 1201, 1305], "vectoris": [432, 433, 1036, 1037], "vein": 173, "verbos": [29, 157, 159, 173, 660, 1232], "veri": [136, 222, 283, 319, 553, 802, 899, 1327], "verifi": [225, 319, 847, 916], "versicolor": [319, 322], "version": [37, 38, 55, 134, 135, 138, 139, 149, 156, 161, 162, 163, 164, 168, 171, 177, 179, 189, 211, 224, 235, 259, 266, 276, 277, 281, 295, 300, 319, 322, 408, 420, 432, 433, 444, 455, 476, 483, 560, 561, 567, 571, 608, 650, 658, 702, 717, 726, 734, 776, 781, 802, 817, 829, 834, 846, 856, 869, 875, 888, 889, 894, 916, 922, 1020, 1028, 1029, 1036, 1037, 1048, 1059, 1087, 1088, 1186, 1222, 1230, 1284, 1286, 1289, 1305, 1310], "versu": [188, 319, 828, 916], "vertic": [58, 198, 287, 291, 319, 650, 666, 1222, 1238], "vertical_relax": 58, "via": [30, 134, 135, 136, 146, 148, 151, 152, 153, 176, 178, 189, 222, 253, 319, 408, 553, 661, 802, 829, 916, 925, 1233], "view": [553, 802], "visibl": [17, 196, 319, 1066, 1305], "visit": [405, 802, 1006, 1305], "visual": [217, 219, 319, 568, 872, 916], "volk": 131, "vote": [659, 661, 1231, 1233], "vowel": [673, 674, 1245, 1246], "vstack": [58, 198, 319], "w": [39, 136, 210, 254, 319, 653, 657, 659, 661, 720, 722, 842, 916, 922, 1225, 1229, 1231, 1233, 1255, 1317, 1318, 1321], "w_i": [460, 462, 463, 802, 1067, 1069, 1070, 1305], "wa": [37, 55, 96, 139, 189, 276, 277, 319, 322, 408, 609, 675, 748, 802, 829, 916, 922, 1187, 1247, 1286, 1305, 1310], "wai": [88, 89, 121, 123, 124, 125, 127, 143, 144, 152, 209, 223, 243, 265, 298, 319, 439, 598, 647, 659, 735, 798, 802, 826, 833, 841, 860, 866, 874, 885, 892, 899, 916, 1043, 1231], "walk": 733, "want": [57, 124, 126, 139, 173, 198, 229, 240, 251, 266, 319, 391, 413, 470, 552, 553, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 640, 652, 669, 673, 674, 675, 729, 738, 743, 746, 752, 774, 777, 793, 802, 824, 875, 891, 916, 922, 987, 1013, 1073, 1159, 1224, 1241, 1245, 1246, 1247, 1305, 1320], "warehous": 137, "warn": [91, 92, 95, 96, 99, 106, 108, 109, 119, 594, 802, 1305], "watermark": [44, 319], "wb": [39, 319], "we": [44, 132, 134, 135, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 178, 188, 189, 210, 225, 244, 251, 289, 319, 322, 408, 435, 439, 452, 485, 516, 544, 552, 553, 614, 617, 619, 621, 623, 625, 628, 630, 632, 661, 673, 674, 692, 742, 743, 744, 745, 746, 747, 762, 789, 790, 792, 802, 828, 829, 842, 847, 852, 865, 916, 1039, 1043, 1056, 1090, 1123, 1159, 1233, 1246, 1264, 1305, 1310, 1317], "weather": [673, 674, 1245, 1246], "wed": [319, 322], "wednesdai": [210, 319, 441, 444, 842, 916, 1045, 1048], "week": [210, 225, 251, 289, 319, 413, 435, 439, 452, 454, 461, 614, 617, 619, 621, 623, 625, 628, 630, 632, 729, 743, 744, 746, 747, 748, 789, 790, 802, 842, 847, 865, 916, 922, 1013, 1039, 1043, 1056, 1058, 1068, 1305, 1329], "week_mask": [413, 729, 1013], "weekdai": [421, 436], "weekend": [413, 729, 1013], "weekli": [210, 319, 452, 842, 916, 1056], "weghorst": [661, 1233], "weight": [131, 460, 461, 462, 463, 615, 616, 618, 620, 622, 624, 627, 629, 631, 644, 802, 1067, 1068, 1069, 1070, 1192, 1193, 1194, 1195, 1196, 1197, 1199, 1200, 1201, 1217, 1305], "wei\u00df": 1328, "well": [39, 134, 135, 136, 148, 319, 490, 781, 802, 1094, 1305, 1333], "were": [173, 608, 609, 798, 802, 1186, 1187, 1305], "west": [68, 226, 319, 848, 916], "what": [178, 240, 319, 413, 552, 652, 675, 802, 1013, 1224, 1247], "whatev": 173, "when": [10, 14, 17, 19, 23, 36, 37, 38, 39, 40, 41, 44, 45, 48, 49, 65, 80, 88, 89, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 108, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 131, 134, 135, 136, 137, 139, 140, 142, 144, 145, 146, 148, 149, 151, 152, 153, 154, 157, 158, 159, 160, 164, 168, 173, 180, 188, 194, 196, 198, 200, 203, 210, 224, 226, 229, 243, 248, 252, 254, 257, 258, 262, 265, 271, 274, 276, 277, 281, 282, 284, 288, 294, 319, 363, 391, 392, 395, 413, 460, 462, 463, 469, 537, 544, 565, 598, 608, 609, 638, 646, 647, 652, 658, 662, 664, 665, 669, 670, 675, 677, 682, 683, 684, 687, 688, 727, 729, 738, 752, 802, 818, 828, 837, 842, 846, 848, 852, 863, 867, 868, 871, 874, 879, 880, 883, 887, 913, 916, 960, 987, 988, 995, 1008, 1013, 1066, 1067, 1069, 1070, 1073, 1076, 1144, 1186, 1187, 1205, 1207, 1210, 1224, 1230, 1234, 1236, 1237, 1241, 1242, 1247, 1249, 1254, 1255, 1256, 1259, 1260, 1280, 1281, 1286, 1305, 1320, 1333], "when_matched_update_al": [38, 319], "when_not_matched_insert_al": [38, 319], "where": [39, 50, 96, 136, 137, 139, 192, 193, 198, 201, 210, 222, 226, 235, 244, 253, 266, 267, 276, 281, 286, 288, 290, 319, 345, 444, 454, 457, 459, 461, 470, 540, 546, 552, 589, 607, 636, 644, 647, 649, 675, 695, 716, 728, 734, 736, 778, 779, 781, 783, 791, 792, 802, 831, 832, 838, 842, 848, 856, 875, 876, 882, 883, 884, 916, 942, 1048, 1058, 1062, 1064, 1068, 1073, 1077, 1171, 1206, 1217, 1221, 1247, 1267, 1295, 1296, 1305, 1314, 1322, 1332, 1333, 1335], "wherea": [134, 148, 251, 319, 439, 452, 586, 587, 614, 802, 865, 916, 1043, 1056, 1168, 1169, 1305], "wherev": [39, 229, 305, 319, 553, 802, 1159, 1305], "whether": [36, 45, 125, 127, 131, 139, 145, 146, 151, 153, 168, 172, 195, 221, 225, 260, 265, 319, 331, 333, 347, 348, 425, 440, 482, 507, 508, 637, 647, 662, 664, 727, 802, 847, 852, 870, 874, 916, 922, 929, 930, 944, 945, 986, 990, 1025, 1044, 1065, 1086, 1087, 1114, 1115, 1234, 1236, 1305, 1317, 1333], "which": [1, 6, 10, 20, 34, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 124, 126, 134, 135, 136, 137, 138, 139, 144, 145, 146, 148, 149, 150, 151, 152, 153, 164, 167, 169, 173, 180, 181, 188, 189, 192, 193, 198, 199, 209, 210, 215, 224, 225, 244, 251, 259, 276, 277, 282, 284, 289, 319, 331, 368, 408, 413, 435, 439, 441, 452, 461, 467, 490, 492, 495, 497, 498, 499, 500, 544, 552, 553, 565, 567, 614, 617, 619, 621, 623, 625, 628, 630, 632, 674, 692, 729, 743, 744, 746, 747, 748, 789, 790, 792, 802, 818, 820, 823, 826, 828, 829, 831, 832, 833, 834, 842, 846, 847, 865, 869, 879, 880, 885, 916, 922, 965, 1013, 1039, 1043, 1045, 1056, 1068, 1073, 1074, 1094, 1097, 1100, 1102, 1103, 1104, 1105, 1151, 1207, 1264, 1284, 1286, 1305, 1315, 1321, 1333, 1336], "while": [38, 57, 135, 138, 139, 149, 153, 164, 168, 173, 222, 235, 283, 286, 288, 319, 392, 608, 670, 802, 824, 856, 882, 883, 916, 988, 1186, 1242, 1305], "white": [39, 319], "whitespac": [128, 682, 683, 684, 1254, 1255, 1256, 1328], "whole": [552, 646, 647, 659, 802, 899, 916, 1231], "whose": [50, 225, 244, 319, 464, 750, 802, 847, 916, 922], "why": [823, 916], "wide": [136, 208, 235, 244, 286, 287, 319, 856, 882, 916], "width": [26, 39, 59, 134, 135, 148, 319, 322, 543, 731, 916, 1150, 1305, 1310], "wiki": 20, "wikipedia": 20, "wildcard": [464, 698, 738, 739, 752, 776, 798, 802, 920], "win_loss": [39, 319], "window": [134, 135, 148, 210, 251, 319, 405, 460, 462, 463, 553, 594, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 732, 778, 779, 802, 842, 865, 916, 1006, 1067, 1069, 1070, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1305], "window_s": [615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 778, 779, 802, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1305], "windowmappingstrategi": [594, 802], "winter": [662, 664, 673, 674, 1234, 1236], "wise": [39, 50, 136, 203, 319, 336, 337, 338, 339, 340, 341, 396, 397, 398, 465, 548, 641, 642, 643, 706, 707, 752, 776, 802, 933, 934, 935, 936, 937, 938, 997, 998, 999, 1071, 1155, 1156, 1214, 1215, 1216, 1278, 1279, 1305], "wish": [180, 282, 319, 387, 388, 709, 710, 802, 818, 879, 916, 983, 1290, 1305], "with_column": [1, 12, 53, 56, 57, 210, 243, 251, 281, 287, 294, 319, 328, 330, 345, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 361, 362, 363, 364, 368, 373, 374, 376, 389, 391, 392, 395, 400, 401, 402, 403, 404, 406, 409, 413, 414, 416, 419, 420, 421, 422, 423, 424, 425, 427, 428, 429, 430, 431, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 453, 454, 456, 458, 459, 461, 468, 469, 474, 479, 481, 483, 488, 489, 490, 493, 494, 496, 497, 498, 499, 500, 504, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 551, 552, 553, 573, 575, 577, 578, 580, 582, 584, 585, 588, 589, 590, 594, 595, 598, 599, 601, 604, 608, 609, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 634, 638, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 688, 691, 692, 693, 695, 696, 697, 699, 702, 703, 708, 711, 718, 720, 722, 725, 729, 730, 731, 732, 733, 738, 739, 741, 742, 744, 745, 749, 759, 763, 766, 768, 771, 782, 786, 788, 790, 792, 798, 802, 823, 824, 834, 842, 844, 860, 861, 865, 872, 887, 916, 922, 1007, 1042, 1180, 1236, 1305, 1333], "with_column_nam": 148, "with_columns_seq": [319, 916], "with_context": 916, "with_field": [553, 802], "with_replac": [255, 319, 532, 635, 802, 1139, 1204, 1305], "with_row_count": [319, 916], "with_row_index": [1, 251, 295, 319, 617, 619, 621, 623, 625, 628, 630, 632, 802, 889, 916, 1205, 1305, 1310], "within": [44, 59, 76, 157, 158, 159, 160, 209, 210, 211, 225, 251, 289, 319, 483, 604, 647, 802, 842, 847, 865, 916, 1088, 1305, 1333], "without": [1, 31, 32, 33, 36, 40, 44, 45, 46, 47, 48, 55, 56, 57, 66, 68, 71, 96, 99, 128, 131, 138, 141, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 161, 162, 164, 165, 166, 167, 168, 169, 224, 226, 266, 276, 277, 281, 287, 288, 319, 322, 323, 405, 406, 439, 485, 553, 601, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 652, 662, 664, 675, 731, 735, 778, 779, 780, 802, 823, 824, 834, 846, 848, 875, 883, 916, 986, 990, 1006, 1007, 1043, 1090, 1180, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1224, 1234, 1236, 1247, 1284, 1286, 1289, 1305, 1310, 1335], "without_fil": [138, 149, 150], "wod": [684, 1256], "womp": [285, 319, 881, 916], "word": [137, 673, 674, 683, 684, 695, 1267], "work": [39, 66, 68, 71, 135, 154, 258, 294, 319, 331, 333, 369, 391, 392, 394, 395, 464, 473, 516, 545, 552, 553, 577, 578, 580, 582, 584, 585, 594, 665, 669, 670, 677, 688, 712, 802, 868, 887, 916, 922, 929, 930, 966, 987, 988, 992, 995, 1080, 1123, 1152, 1237, 1241, 1242, 1249, 1260, 1291, 1305], "workaround": 319, "workbook": [39, 139, 145, 319], "working_with_conditional_format": [39, 319], "working_with_sparklin": [39, 319], "worksheet": [39, 139, 145, 319], "world": [1, 20, 652, 675, 682, 683, 684, 922, 1130, 1224, 1247, 1254, 1255, 1256, 1316, 1319], "wors": [874, 916], "worth": [516, 1123], "worthwhil": [157, 159], "would": [95, 134, 135, 148, 178, 277, 281, 319, 322, 344, 355, 413, 521, 552, 553, 564, 594, 604, 727, 729, 802, 941, 952, 1013, 1128, 1182, 1286, 1305, 1310, 1331], "wrap": [78, 128, 389, 490, 552, 802, 984, 1305], "wrap_numer": [389, 802, 984, 1305], "wrapper": [57, 824, 916], "writabl": [34, 36, 40, 41, 42, 43, 44, 259, 277, 319, 1286, 1305], "write": [34, 35, 36, 37, 38, 39, 40, 41, 44, 45, 46, 47, 48, 133, 135, 140, 173, 184, 319, 395, 568, 571, 802, 850, 872, 916, 922, 995, 1305], "write_avro": 319, "write_clipboard": [133, 319], "write_csv": [35, 135, 148, 319], "write_databas": 319, "write_delta": 319, "write_excel": 319, "write_ipc": [140, 319], "write_ipc_stream": 319, "write_json": 319, "write_markdown_frame_to_stdout": 173, "write_ndjson": [42, 319], "write_parquet": 319, "write_t": [44, 319], "write_to_dataset": [44, 319], "writeabl": [277, 319, 1286, 1305], "written": [6, 34, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 259, 319, 567, 869, 916], "ww": [1328, 1335], "www": 700, "x": [27, 50, 58, 80, 98, 122, 128, 134, 135, 137, 139, 145, 148, 161, 162, 164, 177, 196, 214, 217, 219, 224, 244, 253, 254, 283, 286, 287, 319, 322, 328, 330, 332, 351, 356, 376, 400, 407, 458, 459, 474, 479, 481, 483, 504, 511, 523, 549, 551, 552, 553, 573, 575, 576, 578, 579, 580, 581, 582, 583, 584, 585, 588, 589, 593, 599, 607, 608, 609, 613, 641, 644, 679, 702, 703, 708, 711, 718, 720, 722, 725, 726, 732, 738, 739, 741, 752, 762, 763, 766, 768, 771, 776, 781, 786, 792, 802, 846, 852, 873, 875, 882, 916, 921, 922, 953, 989, 1001, 1076, 1159, 1186, 1187, 1214, 1217, 1251, 1284, 1288, 1289, 1305, 1310, 1317, 1318, 1321, 1327, 1333, 1335], "x00": [372, 373, 374, 375, 377, 654, 968, 969, 970, 971, 973, 1226], "x00fvalu": [259, 319], "x07": 376, "x1": 376, "x80": 376, "x81": 567, "x82": [259, 319], "x83": [259, 319, 376], "x88": 376, "x8e": 376, "x99": 376, "x_": [461, 802, 1068, 1305], "x_0": [287, 319, 460, 461, 462, 463, 802, 1067, 1068, 1069, 1070, 1305], "x_1": [287, 319, 461, 802, 1068, 1305], "x_2": [460, 462, 463, 802, 1067, 1069, 1070, 1305], "x_i": [461, 802, 1068, 1305], "x_invers": [599, 802], "x_pow_8": 1327, "x_round": 1327, "x_round_1": 1327, "x_squar": [599, 802], "x_t": [460, 462, 463, 802, 1067, 1069, 1070, 1305], "x_uniqu": [576, 802], "x_y": [356, 523], "xa1cagg": 567, "xa1csum": 567, "xa1fcolumncfoolpartition_bi": 567, "xa1fwindow": 567, "xa1gcolumn": [259, 319], "xa4dnamecfoohdatatypeeint64lbit_set": [259, 319], "xa4hfunct": 567, "xb": 376, "xb9neq": 376, "xbd": 376, "xc14": 376, "xd3": 376, "xdist": 1336, "xee": 376, "xf4v": 376, "xf9": 376, "xfb": 376, "xff": [372, 373, 374, 375, 377, 654, 968, 969, 970, 971, 973, 1226], "xi": [660, 1232], "xl": 139, "xlog2": [575, 599, 802], "xlsb": 139, "xlsx": [39, 139, 319], "xlsx2csv": [139, 156], "xlsxwriter": [39, 156, 319], "xor": [386, 802, 982, 1305, 1324], "xor_xi": [718, 802], "xx": [10, 51, 53, 168, 188, 266, 319, 828, 916, 922, 1321, 1328, 1335], "xxx": [192, 319, 700, 831, 916], "xy": [51, 53], "xyz": [7, 16, 18, 19, 20, 21, 22, 23, 24, 25, 328, 653, 660, 802, 1225, 1232, 1282, 1305], "y": [27, 50, 58, 80, 98, 122, 128, 161, 162, 164, 177, 196, 217, 219, 224, 244, 253, 254, 283, 286, 287, 319, 322, 328, 330, 332, 351, 356, 376, 441, 444, 458, 459, 479, 481, 504, 511, 523, 551, 553, 576, 578, 580, 582, 584, 585, 588, 589, 593, 607, 608, 609, 613, 687, 689, 690, 702, 711, 718, 720, 722, 725, 726, 741, 748, 762, 766, 768, 771, 781, 786, 802, 846, 873, 875, 882, 916, 921, 922, 953, 989, 1045, 1048, 1186, 1187, 1259, 1261, 1262, 1305, 1310, 1321, 1328, 1329, 1335], "y_": [460, 461, 462, 463, 802, 1067, 1068, 1069, 1070, 1305], "y_0": [287, 319, 460, 461, 462, 463, 802, 1067, 1068, 1069, 1070, 1305], "y_1": [287, 319], "y_i": [461, 802, 1068, 1305], "y_mul": 702, "y_t": [460, 462, 463, 802, 1067, 1069, 1070, 1305], "y_uniqu": [576, 802], "ya": [677, 1249], "ya29": 150, "year": [210, 225, 251, 266, 289, 319, 413, 425, 426, 435, 436, 439, 452, 453, 614, 617, 619, 621, 623, 625, 628, 630, 632, 729, 742, 743, 744, 745, 746, 747, 789, 790, 802, 842, 847, 865, 916, 922, 1013, 1025, 1026, 1039, 1040, 1043, 1056, 1057, 1329], "yellow": [319, 323, 372, 373, 374, 375, 377], "yield": [125, 127, 134, 135, 136, 148, 196, 198, 221, 283, 319, 474, 552, 594, 802, 916, 1066, 1073, 1305], "you": [1, 10, 14, 39, 44, 48, 50, 57, 58, 121, 123, 124, 125, 126, 127, 134, 135, 136, 137, 139, 140, 143, 144, 148, 152, 154, 173, 180, 198, 201, 210, 221, 222, 225, 229, 240, 244, 251, 252, 253, 254, 266, 273, 276, 282, 283, 284, 286, 305, 319, 322, 387, 388, 391, 413, 432, 433, 435, 438, 441, 444, 464, 470, 490, 516, 544, 552, 553, 568, 594, 599, 606, 614, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 640, 652, 669, 673, 674, 675, 695, 698, 709, 710, 729, 738, 743, 746, 748, 752, 764, 774, 777, 781, 793, 802, 818, 824, 838, 842, 847, 865, 872, 875, 879, 880, 882, 891, 899, 916, 920, 922, 983, 987, 1013, 1036, 1037, 1042, 1045, 1048, 1073, 1094, 1123, 1159, 1178, 1184, 1224, 1241, 1245, 1246, 1247, 1267, 1284, 1290, 1305, 1310, 1315, 1320, 1336], "your": [37, 39, 49, 50, 89, 134, 135, 136, 137, 139, 154, 173, 222, 224, 229, 253, 254, 257, 273, 293, 298, 305, 319, 322, 418, 461, 476, 553, 661, 687, 689, 690, 697, 764, 802, 846, 852, 867, 886, 892, 899, 916, 1018, 1068, 1159, 1233, 1259, 1261, 1262, 1269, 1305, 1310, 1336], "yy": [10, 51, 53, 168, 188, 266, 319, 828, 916, 922, 1321, 1328, 1335], "yyi": [192, 319, 700, 831, 916], "yyyi": [39, 319], "yz": [51, 53], "z": [39, 58, 80, 128, 162, 196, 217, 219, 224, 253, 254, 283, 286, 287, 319, 328, 330, 332, 483, 511, 553, 578, 580, 582, 584, 585, 593, 607, 608, 609, 652, 660, 662, 664, 675, 687, 690, 720, 722, 741, 766, 768, 771, 777, 781, 786, 802, 846, 873, 875, 882, 916, 921, 922, 1076, 1186, 1187, 1224, 1232, 1234, 1236, 1247, 1259, 1262, 1305, 1317, 1321, 1333, 1335], "z_0": [287, 319], "z_1": [287, 319], "zap": 922, "zero": [28, 39, 121, 122, 132, 134, 135, 140, 142, 146, 163, 166, 177, 200, 210, 222, 252, 266, 271, 277, 278, 319, 469, 544, 549, 636, 644, 697, 711, 802, 821, 837, 842, 916, 994, 1076, 1151, 1217, 1269, 1280, 1286, 1287, 1305, 1327, 1333], "zero_copy_onli": [1286, 1305], "zfill": [672, 718, 802, 1244], "zip": 1336, "zip_with": [203, 319, 1305], "zone": [65, 164, 165, 168, 414, 418, 438, 461, 690, 745, 746, 747, 802, 922, 1014, 1018, 1042, 1068, 1262, 1305], "zoneinfo": [65, 922], "zoom": [39, 319], "zstd": [40, 41, 44, 46, 48, 319, 916], "zz": [168, 188, 266, 319, 828, 916, 1321, 1328, 1335], "zzz": 700, "\u03bc": [128, 181, 210, 222, 251, 253, 254, 273, 289, 319, 414, 415, 417, 418, 419, 420, 422, 424, 427, 429, 430, 432, 433, 434, 435, 438, 439, 440, 441, 442, 444, 445, 446, 447, 448, 449, 450, 451, 452, 455, 614, 617, 619, 621, 623, 625, 628, 630, 632, 687, 690, 745, 746, 747, 748, 754, 802, 820, 842, 865, 916, 922, 1014, 1015, 1017, 1018, 1019, 1020, 1022, 1023, 1024, 1029, 1030, 1034, 1036, 1037, 1038, 1039, 1042, 1043, 1046, 1047, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1059, 1259, 1262, 1328], "\u0441\u0438\u043d\u0438\u0439": 1328, "\u0967\u096f\u096f\u096f": 922, "\u0968\u0966\u096d\u096d": 922, "\u4eac\u90fd": 922, "\u5927\u962a": 922, "\u6771\u4eac": [391, 392, 669, 670, 922, 987, 988, 1241, 1242], "\u90fd\u5e02": 922, "\ud835\udf0b": 1327}, "titles": ["Index", "Extending the API", "polars.Config.load", "polars.Config.load_from_file", "polars.Config.restore_defaults", "polars.Config.save", "polars.Config.save_to_file", "polars.Config.set_ascii_tables", "polars.Config.set_auto_structify", "polars.Config.set_decimal_separator", "polars.Config.set_float_precision", "polars.Config.set_fmt_float", "polars.Config.set_fmt_str_lengths", "polars.Config.set_fmt_table_cell_list_len", "polars.Config.set_streaming_chunk_size", "polars.Config.set_tbl_cell_alignment", "polars.Config.set_tbl_cell_numeric_alignment", "polars.Config.set_tbl_cols", "polars.Config.set_tbl_column_data_type_inline", "polars.Config.set_tbl_dataframe_shape_below", "polars.Config.set_tbl_formatting", "polars.Config.set_tbl_hide_column_data_types", "polars.Config.set_tbl_hide_column_names", "polars.Config.set_tbl_hide_dataframe_shape", "polars.Config.set_tbl_hide_dtype_separator", "polars.Config.set_tbl_rows", "polars.Config.set_tbl_width_chars", "polars.Config.set_thousands_separator", "polars.Config.set_trim_decimal_zeros", "polars.Config.set_verbose", "polars.Config.state", "polars.CredentialProvider", "polars.CredentialProviderAWS", "polars.CredentialProviderGCP", "polars.DataFrame.write_avro", "polars.DataFrame.write_clipboard", "polars.DataFrame.write_csv", "polars.DataFrame.write_database", "polars.DataFrame.write_delta", "polars.DataFrame.write_excel", "polars.DataFrame.write_ipc", "polars.DataFrame.write_ipc_stream", "polars.DataFrame.write_json", "polars.DataFrame.write_ndjson", "polars.DataFrame.write_parquet", "polars.LazyFrame.sink_csv", "polars.LazyFrame.sink_ipc", "polars.LazyFrame.sink_ndjson", "polars.LazyFrame.sink_parquet", "polars.StringCache", "polars.align_frames", "polars.api.register_dataframe_namespace", "polars.api.register_expr_namespace", "polars.api.register_lazyframe_namespace", "polars.api.register_series_namespace", "polars.build_info", "polars.collect_all", "polars.collect_all_async", "polars.concat", "polars.datatypes.Array", "polars.datatypes.Binary", "polars.datatypes.Boolean", "polars.datatypes.Categorical", "polars.datatypes.DataType", "polars.datatypes.Date", "polars.datatypes.Datetime", "polars.datatypes.Decimal", "polars.datatypes.Duration", "polars.datatypes.Enum", "polars.datatypes.Float32", "polars.datatypes.Float64", "polars.datatypes.Int128", "polars.datatypes.Int16", "polars.datatypes.Int32", "polars.datatypes.Int64", "polars.datatypes.Int8", "polars.datatypes.List", "polars.datatypes.Null", "polars.datatypes.Object", "polars.datatypes.String", "polars.datatypes.Struct", "polars.datatypes.Time", "polars.datatypes.UInt16", "polars.datatypes.UInt32", "polars.datatypes.UInt64", "polars.datatypes.UInt8", "polars.datatypes.Unknown", "polars.datatypes.Utf8", "polars.disable_string_cache", "polars.enable_string_cache", "polars.escape_regex", "polars.exceptions.CategoricalRemappingWarning", "polars.exceptions.ChronoFormatWarning", "polars.exceptions.ColumnNotFoundError", "polars.exceptions.ComputeError", "polars.exceptions.CustomUFuncWarning", "polars.exceptions.DataOrientationWarning", "polars.exceptions.DuplicateError", "polars.exceptions.InvalidOperationError", "polars.exceptions.MapWithoutReturnDtypeWarning", "polars.exceptions.ModuleUpgradeRequiredError", "polars.exceptions.NoDataError", "polars.exceptions.NoRowsReturnedError", "polars.exceptions.OutOfBoundsError", "polars.exceptions.PanicException", "polars.exceptions.ParameterCollisionError", "polars.exceptions.PerformanceWarning", "polars.exceptions.PolarsError", "polars.exceptions.PolarsInefficientMapWarning", "polars.exceptions.PolarsWarning", "polars.exceptions.RowsError", "polars.exceptions.SQLInterfaceError", "polars.exceptions.SQLSyntaxError", "polars.exceptions.SchemaError", "polars.exceptions.SchemaFieldNotFoundError", "polars.exceptions.ShapeError", "polars.exceptions.StringCacheMismatchError", "polars.exceptions.StructFieldNotFoundError", "polars.exceptions.TooManyRowsReturnedError", "polars.exceptions.UnstableWarning", "polars.exceptions.UnsuitableSQLError", "polars.from_arrow", "polars.from_dataframe", "polars.from_dict", "polars.from_dicts", "polars.from_numpy", "polars.from_pandas", "polars.from_records", "polars.from_repr", "polars.get_index_type", "polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "polars.json_normalize", "polars.read_avro", "polars.read_clipboard", "polars.read_csv", "polars.read_csv_batched", "polars.read_database", "polars.read_database_uri", "polars.read_delta", "polars.read_excel", "polars.read_ipc", "polars.read_ipc_schema", "polars.read_ipc_stream", "polars.read_json", "polars.read_ndjson", "polars.read_ods", "polars.read_parquet", "polars.read_parquet_schema", "polars.scan_csv", "polars.scan_delta", "polars.scan_iceberg", "polars.scan_ipc", "polars.scan_ndjson", "polars.scan_parquet", "polars.scan_pyarrow_dataset", "polars.set_random_seed", "polars.show_versions", "polars.testing.assert_frame_equal", "polars.testing.assert_frame_not_equal", "polars.testing.assert_series_equal", "polars.testing.assert_series_not_equal", "polars.testing.parametric.column", "polars.testing.parametric.columns", "polars.testing.parametric.create_list_strategy", "polars.testing.parametric.dataframes", "polars.testing.parametric.dtypes", "polars.testing.parametric.lists", "polars.testing.parametric.load_profile", "polars.testing.parametric.series", "polars.testing.parametric.set_profile", "polars.thread_pool_size", "polars.threadpool_size", "polars.using_string_cache", "Config", "Aggregation", "polars.DataFrame.__array__", "polars.DataFrame.__arrow_c_stream__", "polars.DataFrame.__dataframe__", "polars.DataFrame.__getitem__", "polars.DataFrame.approx_n_unique", "polars.DataFrame.bottom_k", "polars.DataFrame.cast", "polars.DataFrame.clear", "polars.DataFrame.clone", "polars.DataFrame.collect_schema", "polars.DataFrame.columns", "polars.DataFrame.corr", "polars.DataFrame.count", "polars.DataFrame.describe", "polars.DataFrame.deserialize", "polars.DataFrame.drop", "polars.DataFrame.drop_in_place", "polars.DataFrame.drop_nans", "polars.DataFrame.drop_nulls", "polars.DataFrame.dtypes", "polars.DataFrame.equals", "polars.DataFrame.estimated_size", "polars.DataFrame.explode", "polars.DataFrame.extend", "polars.DataFrame.fill_nan", "polars.DataFrame.fill_null", "polars.DataFrame.filter", "polars.DataFrame.flags", "polars.DataFrame.fold", "polars.DataFrame.gather_every", "polars.DataFrame.get_column", "polars.DataFrame.get_column_index", "polars.DataFrame.get_columns", "polars.DataFrame.glimpse", "polars.DataFrame.group_by", "polars.DataFrame.group_by_dynamic", "polars.DataFrame.hash_rows", "polars.DataFrame.head", "polars.DataFrame.height", "polars.DataFrame.hstack", "polars.DataFrame.insert_column", "polars.DataFrame.interpolate", "polars.DataFrame.is_duplicated", "polars.DataFrame.is_empty", "polars.DataFrame.is_unique", "polars.DataFrame.item", "polars.DataFrame.iter_columns", "polars.DataFrame.iter_rows", "polars.DataFrame.iter_slices", "polars.DataFrame.join", "polars.DataFrame.join_asof", "polars.DataFrame.join_where", "polars.DataFrame.lazy", "polars.DataFrame.limit", "polars.DataFrame.map_rows", "polars.DataFrame.max", "polars.DataFrame.max_horizontal", "polars.DataFrame.mean", "polars.DataFrame.mean_horizontal", "polars.DataFrame.median", "polars.DataFrame.melt", "polars.DataFrame.merge_sorted", "polars.DataFrame.min", "polars.DataFrame.min_horizontal", "polars.DataFrame.n_chunks", "polars.DataFrame.n_unique", "polars.DataFrame.null_count", "polars.DataFrame.partition_by", "polars.DataFrame.pipe", "polars.DataFrame.pivot", "polars.DataFrame.product", "polars.DataFrame.quantile", "polars.DataFrame.rechunk", "polars.DataFrame.rename", "polars.DataFrame.replace_column", "polars.DataFrame.reverse", "polars.DataFrame.rolling", "polars.DataFrame.row", "polars.DataFrame.rows", "polars.DataFrame.rows_by_key", "polars.DataFrame.sample", "polars.DataFrame.schema", "polars.DataFrame.select", "polars.DataFrame.select_seq", "polars.DataFrame.serialize", "polars.DataFrame.set_sorted", "polars.DataFrame.shape", "polars.DataFrame.shift", "polars.DataFrame.shrink_to_fit", "polars.DataFrame.slice", "polars.DataFrame.sort", "polars.DataFrame.sql", "polars.DataFrame.std", "polars.DataFrame.sum", "polars.DataFrame.sum_horizontal", "polars.DataFrame.tail", "polars.DataFrame.to_arrow", "polars.DataFrame.to_dict", "polars.DataFrame.to_dicts", "polars.DataFrame.to_dummies", "polars.DataFrame.to_init_repr", "polars.DataFrame.to_jax", "polars.DataFrame.to_numpy", "polars.DataFrame.to_pandas", "polars.DataFrame.to_series", "polars.DataFrame.to_struct", "polars.DataFrame.to_torch", "polars.DataFrame.top_k", "polars.DataFrame.transpose", "polars.DataFrame.unique", "polars.DataFrame.unnest", "polars.DataFrame.unpivot", "polars.DataFrame.unstack", "polars.DataFrame.update", "polars.DataFrame.upsample", "polars.DataFrame.var", "polars.DataFrame.vstack", "polars.DataFrame.width", "polars.DataFrame.with_columns", "polars.DataFrame.with_columns_seq", "polars.DataFrame.with_row_count", "polars.DataFrame.with_row_index", "polars.dataframe.group_by.GroupBy.__iter__", "polars.dataframe.group_by.GroupBy.agg", "polars.dataframe.group_by.GroupBy.all", "polars.dataframe.group_by.GroupBy.count", "polars.dataframe.group_by.GroupBy.first", "polars.dataframe.group_by.GroupBy.head", "polars.dataframe.group_by.GroupBy.last", "polars.dataframe.group_by.GroupBy.len", "polars.dataframe.group_by.GroupBy.map_groups", "polars.dataframe.group_by.GroupBy.max", "polars.dataframe.group_by.GroupBy.mean", "polars.dataframe.group_by.GroupBy.median", "polars.dataframe.group_by.GroupBy.min", "polars.dataframe.group_by.GroupBy.n_unique", "polars.dataframe.group_by.GroupBy.quantile", "polars.dataframe.group_by.GroupBy.sum", "polars.dataframe.group_by.GroupBy.tail", "Attributes", "Computation", "Descriptive", "Export", "GroupBy", "DataFrame", "Miscellaneous", "Manipulation/selection", "Plot", "Style", "Data types", "Exceptions", "Aggregation", "polars.Expr.abs", "polars.Expr.add", "polars.Expr.agg_groups", "polars.Expr.alias", "polars.Expr.all", "polars.Expr.and_", "polars.Expr.any", "polars.Expr.append", "polars.Expr.approx_n_unique", "polars.Expr.arccos", "polars.Expr.arccosh", "polars.Expr.arcsin", "polars.Expr.arcsinh", "polars.Expr.arctan", "polars.Expr.arctanh", "polars.Expr.arg_max", "polars.Expr.arg_min", "polars.Expr.arg_sort", "polars.Expr.arg_true", "polars.Expr.arg_unique", "polars.Expr.arr.all", "polars.Expr.arr.any", "polars.Expr.arr.arg_max", "polars.Expr.arr.arg_min", "polars.Expr.arr.contains", "polars.Expr.arr.count_matches", "polars.Expr.arr.explode", "polars.Expr.arr.first", "polars.Expr.arr.get", "polars.Expr.arr.join", "polars.Expr.arr.last", "polars.Expr.arr.max", "polars.Expr.arr.median", "polars.Expr.arr.min", "polars.Expr.arr.n_unique", "polars.Expr.arr.reverse", "polars.Expr.arr.shift", "polars.Expr.arr.sort", "polars.Expr.arr.std", "polars.Expr.arr.sum", "polars.Expr.arr.to_list", "polars.Expr.arr.to_struct", "polars.Expr.arr.unique", "polars.Expr.arr.var", "polars.Expr.backward_fill", "polars.Expr.bin.contains", "polars.Expr.bin.decode", "polars.Expr.bin.encode", "polars.Expr.bin.ends_with", "polars.Expr.bin.size", "polars.Expr.bin.starts_with", "polars.Expr.bitwise_and", "polars.Expr.bitwise_count_ones", "polars.Expr.bitwise_count_zeros", "polars.Expr.bitwise_leading_ones", "polars.Expr.bitwise_leading_zeros", "polars.Expr.bitwise_or", "polars.Expr.bitwise_trailing_ones", "polars.Expr.bitwise_trailing_zeros", "polars.Expr.bitwise_xor", "polars.Expr.bottom_k", "polars.Expr.bottom_k_by", "polars.Expr.cast", "polars.Expr.cat.get_categories", "polars.Expr.cat.len_bytes", "polars.Expr.cat.len_chars", "polars.Expr.cbrt", "polars.Expr.ceil", "polars.Expr.clip", "polars.Expr.cos", "polars.Expr.cosh", "polars.Expr.cot", "polars.Expr.count", "polars.Expr.cum_count", "polars.Expr.cum_max", "polars.Expr.cum_min", "polars.Expr.cum_prod", "polars.Expr.cum_sum", "polars.Expr.cumulative_eval", "polars.Expr.cut", "polars.Expr.degrees", "polars.Expr.deserialize", "polars.Expr.diff", "polars.Expr.dot", "polars.Expr.drop_nans", "polars.Expr.drop_nulls", "polars.Expr.dt.add_business_days", "polars.Expr.dt.base_utc_offset", "polars.Expr.dt.cast_time_unit", "polars.Expr.dt.century", "polars.Expr.dt.combine", "polars.Expr.dt.convert_time_zone", "polars.Expr.dt.date", "polars.Expr.dt.datetime", "polars.Expr.dt.day", "polars.Expr.dt.dst_offset", "polars.Expr.dt.epoch", "polars.Expr.dt.hour", "polars.Expr.dt.is_leap_year", "polars.Expr.dt.iso_year", "polars.Expr.dt.microsecond", "polars.Expr.dt.millennium", "polars.Expr.dt.millisecond", "polars.Expr.dt.minute", "polars.Expr.dt.month", "polars.Expr.dt.month_end", "polars.Expr.dt.month_start", "polars.Expr.dt.nanosecond", "polars.Expr.dt.offset_by", "polars.Expr.dt.ordinal_day", "polars.Expr.dt.quarter", "polars.Expr.dt.replace_time_zone", "polars.Expr.dt.round", "polars.Expr.dt.second", "polars.Expr.dt.strftime", "polars.Expr.dt.time", "polars.Expr.dt.timestamp", "polars.Expr.dt.to_string", "polars.Expr.dt.total_days", "polars.Expr.dt.total_hours", "polars.Expr.dt.total_microseconds", "polars.Expr.dt.total_milliseconds", "polars.Expr.dt.total_minutes", "polars.Expr.dt.total_nanoseconds", "polars.Expr.dt.total_seconds", "polars.Expr.dt.truncate", "polars.Expr.dt.week", "polars.Expr.dt.weekday", "polars.Expr.dt.with_time_unit", "polars.Expr.dt.year", "polars.Expr.entropy", "polars.Expr.eq", "polars.Expr.eq_missing", "polars.Expr.ewm_mean", "polars.Expr.ewm_mean_by", "polars.Expr.ewm_std", "polars.Expr.ewm_var", "polars.Expr.exclude", "polars.Expr.exp", "polars.Expr.explode", "polars.Expr.extend_constant", "polars.Expr.fill_nan", "polars.Expr.fill_null", "polars.Expr.filter", "polars.Expr.first", "polars.Expr.flatten", "polars.Expr.floor", "polars.Expr.floordiv", "polars.Expr.forward_fill", "polars.Expr.from_json", "polars.Expr.gather", "polars.Expr.gather_every", "polars.Expr.ge", "polars.Expr.get", "polars.Expr.gt", "polars.Expr.has_nulls", "polars.Expr.hash", "polars.Expr.head", "polars.Expr.hist", "polars.Expr.implode", "polars.Expr.inspect", "polars.Expr.interpolate", "polars.Expr.interpolate_by", "polars.Expr.is_between", "polars.Expr.is_duplicated", "polars.Expr.is_finite", "polars.Expr.is_first_distinct", "polars.Expr.is_in", "polars.Expr.is_infinite", "polars.Expr.is_last_distinct", "polars.Expr.is_nan", "polars.Expr.is_not_nan", "polars.Expr.is_not_null", "polars.Expr.is_null", "polars.Expr.is_unique", "polars.Expr.kurtosis", "polars.Expr.last", "polars.Expr.le", "polars.Expr.len", "polars.Expr.limit", "polars.Expr.list.all", "polars.Expr.list.any", "polars.Expr.list.arg_max", "polars.Expr.list.arg_min", "polars.Expr.list.concat", "polars.Expr.list.contains", "polars.Expr.list.count_matches", "polars.Expr.list.diff", "polars.Expr.list.drop_nulls", "polars.Expr.list.eval", "polars.Expr.list.explode", "polars.Expr.list.first", "polars.Expr.list.gather", "polars.Expr.list.gather_every", "polars.Expr.list.get", "polars.Expr.list.head", "polars.Expr.list.join", "polars.Expr.list.last", "polars.Expr.list.len", "polars.Expr.list.max", "polars.Expr.list.mean", "polars.Expr.list.median", "polars.Expr.list.min", "polars.Expr.list.n_unique", "polars.Expr.list.reverse", "polars.Expr.list.sample", "polars.Expr.list.set_difference", "polars.Expr.list.set_intersection", "polars.Expr.list.set_symmetric_difference", "polars.Expr.list.set_union", "polars.Expr.list.shift", "polars.Expr.list.slice", "polars.Expr.list.sort", "polars.Expr.list.std", "polars.Expr.list.sum", "polars.Expr.list.tail", "polars.Expr.list.to_array", "polars.Expr.list.to_struct", "polars.Expr.list.unique", "polars.Expr.list.var", "polars.Expr.log", "polars.Expr.log10", "polars.Expr.log1p", "polars.Expr.lower_bound", "polars.Expr.lt", "polars.Expr.map_batches", "polars.Expr.map_elements", "polars.Expr.max", "polars.Expr.mean", "polars.Expr.median", "polars.Expr.meta.eq", "polars.Expr.meta.has_multiple_outputs", "polars.Expr.meta.is_column", "polars.Expr.meta.is_column_selection", "polars.Expr.meta.is_literal", "polars.Expr.meta.is_regex_projection", "polars.Expr.meta.ne", "polars.Expr.meta.output_name", "polars.Expr.meta.pop", "polars.Expr.meta.root_names", "polars.Expr.meta.serialize", "polars.Expr.meta.show_graph", "polars.Expr.meta.tree_format", "polars.Expr.meta.undo_aliases", "polars.Expr.meta.write_json", "polars.Expr.min", "polars.Expr.mod", "polars.Expr.mode", "polars.Expr.mul", "polars.Expr.n_unique", "polars.Expr.name.keep", "polars.Expr.name.map", "polars.Expr.name.map_fields", "polars.Expr.name.prefix", "polars.Expr.name.prefix_fields", "polars.Expr.name.suffix", "polars.Expr.name.suffix_fields", "polars.Expr.name.to_lowercase", "polars.Expr.name.to_uppercase", "polars.Expr.nan_max", "polars.Expr.nan_min", "polars.Expr.ne", "polars.Expr.ne_missing", "polars.Expr.neg", "polars.Expr.not_", "polars.Expr.null_count", "polars.Expr.or_", "polars.Expr.over", "polars.Expr.pct_change", "polars.Expr.peak_max", "polars.Expr.peak_min", "polars.Expr.pipe", "polars.Expr.pow", "polars.Expr.product", "polars.Expr.qcut", "polars.Expr.quantile", "polars.Expr.radians", "polars.Expr.rank", "polars.Expr.rechunk", "polars.Expr.reinterpret", "polars.Expr.repeat_by", "polars.Expr.replace", "polars.Expr.replace_strict", "polars.Expr.reshape", "polars.Expr.reverse", "polars.Expr.rle", "polars.Expr.rle_id", "polars.Expr.rolling", "polars.Expr.rolling_map", "polars.Expr.rolling_max", "polars.Expr.rolling_max_by", "polars.Expr.rolling_mean", "polars.Expr.rolling_mean_by", "polars.Expr.rolling_median", "polars.Expr.rolling_median_by", "polars.Expr.rolling_min", "polars.Expr.rolling_min_by", "polars.Expr.rolling_quantile", "polars.Expr.rolling_quantile_by", "polars.Expr.rolling_skew", "polars.Expr.rolling_std", "polars.Expr.rolling_std_by", "polars.Expr.rolling_sum", "polars.Expr.rolling_sum_by", "polars.Expr.rolling_var", "polars.Expr.rolling_var_by", "polars.Expr.round", "polars.Expr.round_sig_figs", "polars.Expr.sample", "polars.Expr.search_sorted", "polars.Expr.set_sorted", "polars.Expr.shift", "polars.Expr.shrink_dtype", "polars.Expr.shuffle", "polars.Expr.sign", "polars.Expr.sin", "polars.Expr.sinh", "polars.Expr.skew", "polars.Expr.slice", "polars.Expr.sort", "polars.Expr.sort_by", "polars.Expr.sqrt", "polars.Expr.std", "polars.Expr.str.concat", "polars.Expr.str.contains", "polars.Expr.str.contains_any", "polars.Expr.str.count_matches", "polars.Expr.str.decode", "polars.Expr.str.encode", "polars.Expr.str.ends_with", "polars.Expr.str.escape_regex", "polars.Expr.str.explode", "polars.Expr.str.extract", "polars.Expr.str.extract_all", "polars.Expr.str.extract_groups", "polars.Expr.str.extract_many", "polars.Expr.str.find", "polars.Expr.str.find_many", "polars.Expr.str.head", "polars.Expr.str.join", "polars.Expr.str.json_decode", "polars.Expr.str.json_path_match", "polars.Expr.str.len_bytes", "polars.Expr.str.len_chars", "polars.Expr.str.pad_end", "polars.Expr.str.pad_start", "polars.Expr.str.replace", "polars.Expr.str.replace_all", "polars.Expr.str.replace_many", "polars.Expr.str.reverse", "polars.Expr.str.slice", "polars.Expr.str.split", "polars.Expr.str.split_exact", "polars.Expr.str.splitn", "polars.Expr.str.starts_with", "polars.Expr.str.strip_chars", "polars.Expr.str.strip_chars_end", "polars.Expr.str.strip_chars_start", "polars.Expr.str.strip_prefix", "polars.Expr.str.strip_suffix", "polars.Expr.str.strptime", "polars.Expr.str.tail", "polars.Expr.str.to_date", "polars.Expr.str.to_datetime", "polars.Expr.str.to_decimal", "polars.Expr.str.to_integer", "polars.Expr.str.to_lowercase", "polars.Expr.str.to_time", "polars.Expr.str.to_titlecase", "polars.Expr.str.to_uppercase", "polars.Expr.str.zfill", "polars.Expr.struct.field", "polars.Expr.struct.json_encode", "polars.Expr.struct.rename_fields", "polars.Expr.struct.unnest", "polars.Expr.struct.with_fields", "polars.Expr.sub", "polars.Expr.sum", "polars.Expr.tail", "polars.Expr.tan", "polars.Expr.tanh", "polars.Expr.to_physical", "polars.Expr.top_k", "polars.Expr.top_k_by", "polars.Expr.truediv", "polars.Expr.unique", "polars.Expr.unique_counts", "polars.Expr.upper_bound", "polars.Expr.value_counts", "polars.Expr.var", "polars.Expr.where", "polars.Expr.xor", "polars.all", "polars.all_horizontal", "polars.any", "polars.any_horizontal", "polars.approx_n_unique", "polars.arange", "polars.arctan2", "polars.arctan2d", "polars.arg_sort_by", "polars.arg_where", "polars.business_day_count", "polars.coalesce", "polars.concat_arr", "polars.concat_list", "polars.concat_str", "polars.corr", "polars.count", "polars.cov", "polars.cum_count", "polars.cum_fold", "polars.cum_reduce", "polars.cum_sum", "polars.cum_sum_horizontal", "polars.date", "polars.date_range", "polars.date_ranges", "polars.datetime", "polars.datetime_range", "polars.datetime_ranges", "polars.duration", "polars.element", "polars.exclude", "polars.first", "polars.fold", "polars.format", "polars.from_epoch", "polars.groups", "polars.head", "polars.implode", "polars.int_range", "polars.int_ranges", "polars.last", "polars.len", "polars.lit", "polars.map_batches", "polars.map_groups", "polars.max", "polars.max_horizontal", "polars.mean", "polars.mean_horizontal", "polars.median", "polars.min", "polars.min_horizontal", "polars.n_unique", "polars.nth", "polars.ones", "polars.quantile", "polars.reduce", "polars.repeat", "polars.rolling_corr", "polars.rolling_cov", "polars.select", "polars.sql", "polars.sql_expr", "polars.std", "polars.struct", "polars.sum", "polars.sum_horizontal", "polars.tail", "polars.time", "polars.time_range", "polars.time_ranges", "polars.var", "polars.when", "polars.zeros", "Array", "Binary", "Boolean", "Categories", "polars.col", "Columns / names", "Computation", "Functions", "Expressions", "List", "Meta", "Miscellaneous", "Manipulation/selection", "Name", "Operators", "String", "Struct", "Temporal", "Window", "Functions", "Python API reference", "Input/output", "Aggregation", "polars.LazyFrame.approx_n_unique", "polars.LazyFrame.bottom_k", "polars.LazyFrame.cache", "polars.LazyFrame.cast", "polars.LazyFrame.clear", "polars.LazyFrame.clone", "polars.LazyFrame.collect", "polars.LazyFrame.collect_async", "polars.LazyFrame.collect_schema", "polars.LazyFrame.columns", "polars.LazyFrame.count", "polars.LazyFrame.describe", "polars.LazyFrame.deserialize", "polars.LazyFrame.drop", "polars.LazyFrame.drop_nans", "polars.LazyFrame.drop_nulls", "polars.LazyFrame.dtypes", "polars.LazyFrame.explain", "polars.LazyFrame.explode", "polars.LazyFrame.fill_nan", "polars.LazyFrame.fill_null", "polars.LazyFrame.filter", "polars.LazyFrame.first", "polars.LazyFrame.gather_every", "polars.LazyFrame.group_by", "polars.LazyFrame.group_by_dynamic", "polars.LazyFrame.head", "polars.LazyFrame.inspect", "polars.LazyFrame.interpolate", "polars.LazyFrame.join", "polars.LazyFrame.join_asof", "polars.LazyFrame.join_where", "polars.LazyFrame.last", "polars.LazyFrame.lazy", "polars.LazyFrame.limit", "polars.LazyFrame.map_batches", "polars.LazyFrame.max", "polars.LazyFrame.mean", "polars.LazyFrame.median", "polars.LazyFrame.melt", "polars.LazyFrame.merge_sorted", "polars.LazyFrame.min", "polars.LazyFrame.null_count", "polars.LazyFrame.pipe", "polars.LazyFrame.profile", "polars.LazyFrame.quantile", "polars.LazyFrame.rename", "polars.LazyFrame.reverse", "polars.LazyFrame.rolling", "polars.LazyFrame.schema", "polars.LazyFrame.select", "polars.LazyFrame.select_seq", "polars.LazyFrame.serialize", "polars.LazyFrame.set_sorted", "polars.LazyFrame.shift", "polars.LazyFrame.show_graph", "polars.LazyFrame.slice", "polars.LazyFrame.sort", "polars.LazyFrame.sql", "polars.LazyFrame.std", "polars.LazyFrame.sum", "polars.LazyFrame.tail", "polars.LazyFrame.top_k", "polars.LazyFrame.unique", "polars.LazyFrame.unnest", "polars.LazyFrame.unpivot", "polars.LazyFrame.update", "polars.LazyFrame.var", "polars.LazyFrame.width", "polars.LazyFrame.with_columns", "polars.LazyFrame.with_columns_seq", "polars.LazyFrame.with_context", "polars.LazyFrame.with_row_count", "polars.LazyFrame.with_row_index", "polars.lazyframe.engine_config.GPUEngine", "polars.lazyframe.group_by.LazyGroupBy.agg", "polars.lazyframe.group_by.LazyGroupBy.all", "polars.lazyframe.group_by.LazyGroupBy.count", "polars.lazyframe.group_by.LazyGroupBy.first", "polars.lazyframe.group_by.LazyGroupBy.head", "polars.lazyframe.group_by.LazyGroupBy.last", "polars.lazyframe.group_by.LazyGroupBy.len", "polars.lazyframe.group_by.LazyGroupBy.map_groups", "polars.lazyframe.group_by.LazyGroupBy.max", "polars.lazyframe.group_by.LazyGroupBy.mean", "polars.lazyframe.group_by.LazyGroupBy.median", "polars.lazyframe.group_by.LazyGroupBy.min", "polars.lazyframe.group_by.LazyGroupBy.n_unique", "polars.lazyframe.group_by.LazyGroupBy.quantile", "polars.lazyframe.group_by.LazyGroupBy.sum", "polars.lazyframe.group_by.LazyGroupBy.tail", "polars.lazyframe.in_process.InProcessQuery.cancel", "polars.lazyframe.in_process.InProcessQuery.fetch", "polars.lazyframe.in_process.InProcessQuery.fetch_blocking", "Attributes", "Descriptive", "GPUEngine", "GroupBy", "InProcessQuery", "LazyFrame", "Miscellaneous", "Manipulation/selection", "Metadata", "Plugins", "Schema", "Selectors", "Aggregation", "polars.Series.__array__", "polars.Series.__arrow_c_stream__", "polars.Series.__getitem__", "polars.Series.abs", "polars.Series.alias", "polars.Series.all", "polars.Series.any", "polars.Series.append", "polars.Series.approx_n_unique", "polars.Series.arccos", "polars.Series.arccosh", "polars.Series.arcsin", "polars.Series.arcsinh", "polars.Series.arctan", "polars.Series.arctanh", "polars.Series.arg_max", "polars.Series.arg_min", "polars.Series.arg_sort", "polars.Series.arg_true", "polars.Series.arg_unique", "polars.Series.arr.all", "polars.Series.arr.any", "polars.Series.arr.arg_max", "polars.Series.arr.arg_min", "polars.Series.arr.contains", "polars.Series.arr.count_matches", "polars.Series.arr.explode", "polars.Series.arr.first", "polars.Series.arr.get", "polars.Series.arr.join", "polars.Series.arr.last", "polars.Series.arr.max", "polars.Series.arr.median", "polars.Series.arr.min", "polars.Series.arr.n_unique", "polars.Series.arr.reverse", "polars.Series.arr.shift", "polars.Series.arr.sort", "polars.Series.arr.std", "polars.Series.arr.sum", "polars.Series.arr.to_list", "polars.Series.arr.to_struct", "polars.Series.arr.unique", "polars.Series.arr.var", "polars.Series.bin.contains", "polars.Series.bin.decode", "polars.Series.bin.encode", "polars.Series.bin.ends_with", "polars.Series.bin.size", "polars.Series.bin.starts_with", "polars.Series.bitwise_and", "polars.Series.bitwise_count_ones", "polars.Series.bitwise_count_zeros", "polars.Series.bitwise_leading_ones", "polars.Series.bitwise_leading_zeros", "polars.Series.bitwise_or", "polars.Series.bitwise_trailing_ones", "polars.Series.bitwise_trailing_zeros", "polars.Series.bitwise_xor", "polars.Series.bottom_k", "polars.Series.cast", "polars.Series.cat.get_categories", "polars.Series.cat.is_local", "polars.Series.cat.len_bytes", "polars.Series.cat.len_chars", "polars.Series.cat.to_local", "polars.Series.cat.uses_lexical_ordering", "polars.Series.cbrt", "polars.Series.ceil", "polars.Series.chunk_lengths", "polars.Series.clear", "polars.Series.clip", "polars.Series.clone", "polars.Series.cos", "polars.Series.cosh", "polars.Series.cot", "polars.Series.count", "polars.Series.cum_count", "polars.Series.cum_max", "polars.Series.cum_min", "polars.Series.cum_prod", "polars.Series.cum_sum", "polars.Series.cumulative_eval", "polars.Series.cut", "polars.Series.describe", "polars.Series.diff", "polars.Series.dot", "polars.Series.drop_nans", "polars.Series.drop_nulls", "polars.Series.dt.add_business_days", "polars.Series.dt.base_utc_offset", "polars.Series.dt.cast_time_unit", "polars.Series.dt.century", "polars.Series.dt.combine", "polars.Series.dt.convert_time_zone", "polars.Series.dt.date", "polars.Series.dt.datetime", "polars.Series.dt.day", "polars.Series.dt.dst_offset", "polars.Series.dt.epoch", "polars.Series.dt.hour", "polars.Series.dt.is_leap_year", "polars.Series.dt.iso_year", "polars.Series.dt.max", "polars.Series.dt.mean", "polars.Series.dt.median", "polars.Series.dt.microsecond", "polars.Series.dt.millennium", "polars.Series.dt.millisecond", "polars.Series.dt.min", "polars.Series.dt.minute", "polars.Series.dt.month", "polars.Series.dt.month_end", "polars.Series.dt.month_start", "polars.Series.dt.nanosecond", "polars.Series.dt.offset_by", "polars.Series.dt.ordinal_day", "polars.Series.dt.quarter", "polars.Series.dt.replace_time_zone", "polars.Series.dt.round", "polars.Series.dt.second", "polars.Series.dt.strftime", "polars.Series.dt.time", "polars.Series.dt.timestamp", "polars.Series.dt.to_string", "polars.Series.dt.total_days", "polars.Series.dt.total_hours", "polars.Series.dt.total_microseconds", "polars.Series.dt.total_milliseconds", "polars.Series.dt.total_minutes", "polars.Series.dt.total_nanoseconds", "polars.Series.dt.total_seconds", "polars.Series.dt.truncate", "polars.Series.dt.week", "polars.Series.dt.weekday", "polars.Series.dt.with_time_unit", "polars.Series.dt.year", "polars.Series.dtype", "polars.Series.entropy", "polars.Series.eq", "polars.Series.eq_missing", "polars.Series.equals", "polars.Series.estimated_size", "polars.Series.ewm_mean", "polars.Series.ewm_mean_by", "polars.Series.ewm_std", "polars.Series.ewm_var", "polars.Series.exp", "polars.Series.explode", "polars.Series.extend", "polars.Series.extend_constant", "polars.Series.fill_nan", "polars.Series.fill_null", "polars.Series.filter", "polars.Series.first", "polars.Series.flags", "polars.Series.floor", "polars.Series.gather", "polars.Series.gather_every", "polars.Series.ge", "polars.Series.get_chunks", "polars.Series.gt", "polars.Series.has_nulls", "polars.Series.has_validity", "polars.Series.hash", "polars.Series.head", "polars.Series.hist", "polars.Series.implode", "polars.Series.interpolate", "polars.Series.interpolate_by", "polars.Series.is_between", "polars.Series.is_duplicated", "polars.Series.is_empty", "polars.Series.is_finite", "polars.Series.is_first_distinct", "polars.Series.is_in", "polars.Series.is_infinite", "polars.Series.is_last_distinct", "polars.Series.is_nan", "polars.Series.is_not_nan", "polars.Series.is_not_null", "polars.Series.is_null", "polars.Series.is_sorted", "polars.Series.is_unique", "polars.Series.item", "polars.Series.kurtosis", "polars.Series.last", "polars.Series.le", "polars.Series.len", "polars.Series.limit", "polars.Series.list.all", "polars.Series.list.any", "polars.Series.list.arg_max", "polars.Series.list.arg_min", "polars.Series.list.concat", "polars.Series.list.contains", "polars.Series.list.count_matches", "polars.Series.list.diff", "polars.Series.list.drop_nulls", "polars.Series.list.eval", "polars.Series.list.explode", "polars.Series.list.first", "polars.Series.list.gather", "polars.Series.list.gather_every", "polars.Series.list.get", "polars.Series.list.head", "polars.Series.list.join", "polars.Series.list.last", "polars.Series.list.len", "polars.Series.list.max", "polars.Series.list.mean", "polars.Series.list.median", "polars.Series.list.min", "polars.Series.list.n_unique", "polars.Series.list.reverse", "polars.Series.list.sample", "polars.Series.list.set_difference", "polars.Series.list.set_intersection", "polars.Series.list.set_symmetric_difference", "polars.Series.list.set_union", "polars.Series.list.shift", "polars.Series.list.slice", "polars.Series.list.sort", "polars.Series.list.std", "polars.Series.list.sum", "polars.Series.list.tail", "polars.Series.list.to_array", "polars.Series.list.to_struct", "polars.Series.list.unique", "polars.Series.list.var", "polars.Series.log", "polars.Series.log10", "polars.Series.log1p", "polars.Series.lower_bound", "polars.Series.lt", "polars.Series.map_elements", "polars.Series.max", "polars.Series.mean", "polars.Series.median", "polars.Series.min", "polars.Series.mode", "polars.Series.n_chunks", "polars.Series.n_unique", "polars.Series.name", "polars.Series.nan_max", "polars.Series.nan_min", "polars.Series.ne", "polars.Series.ne_missing", "polars.Series.new_from_index", "polars.Series.not_", "polars.Series.null_count", "polars.Series.pct_change", "polars.Series.peak_max", "polars.Series.peak_min", "polars.Series.pow", "polars.Series.product", "polars.Series.qcut", "polars.Series.quantile", "polars.Series.rank", "polars.Series.rechunk", "polars.Series.reinterpret", "polars.Series.rename", "polars.Series.replace", "polars.Series.replace_strict", "polars.Series.reshape", "polars.Series.reverse", "polars.Series.rle", "polars.Series.rle_id", "polars.Series.rolling_map", "polars.Series.rolling_max", "polars.Series.rolling_mean", "polars.Series.rolling_median", "polars.Series.rolling_min", "polars.Series.rolling_quantile", "polars.Series.rolling_skew", "polars.Series.rolling_std", "polars.Series.rolling_sum", "polars.Series.rolling_var", "polars.Series.round", "polars.Series.round_sig_figs", "polars.Series.sample", "polars.Series.scatter", "polars.Series.search_sorted", "polars.Series.set", "polars.Series.set_sorted", "polars.Series.shape", "polars.Series.shift", "polars.Series.shrink_dtype", "polars.Series.shrink_to_fit", "polars.Series.shuffle", "polars.Series.sign", "polars.Series.sin", "polars.Series.sinh", "polars.Series.skew", "polars.Series.slice", "polars.Series.sort", "polars.Series.sqrt", "polars.Series.std", "polars.Series.str.concat", "polars.Series.str.contains", "polars.Series.str.contains_any", "polars.Series.str.count_matches", "polars.Series.str.decode", "polars.Series.str.encode", "polars.Series.str.ends_with", "polars.Series.str.escape_regex", "polars.Series.str.explode", "polars.Series.str.extract", "polars.Series.str.extract_all", "polars.Series.str.extract_groups", "polars.Series.str.extract_many", "polars.Series.str.find", "polars.Series.str.find_many", "polars.Series.str.head", "polars.Series.str.join", "polars.Series.str.json_decode", "polars.Series.str.json_path_match", "polars.Series.str.len_bytes", "polars.Series.str.len_chars", "polars.Series.str.pad_end", "polars.Series.str.pad_start", "polars.Series.str.replace", "polars.Series.str.replace_all", "polars.Series.str.replace_many", "polars.Series.str.reverse", "polars.Series.str.slice", "polars.Series.str.split", "polars.Series.str.split_exact", "polars.Series.str.splitn", "polars.Series.str.starts_with", "polars.Series.str.strip_chars", "polars.Series.str.strip_chars_end", "polars.Series.str.strip_chars_start", "polars.Series.str.strip_prefix", "polars.Series.str.strip_suffix", "polars.Series.str.strptime", "polars.Series.str.tail", "polars.Series.str.to_date", "polars.Series.str.to_datetime", "polars.Series.str.to_decimal", "polars.Series.str.to_integer", "polars.Series.str.to_lowercase", "polars.Series.str.to_time", "polars.Series.str.to_titlecase", "polars.Series.str.to_uppercase", "polars.Series.str.zfill", "polars.Series.struct.field", "polars.Series.struct.fields", "polars.Series.struct.json_encode", "polars.Series.struct.rename_fields", "polars.Series.struct.schema", "polars.Series.struct.unnest", "polars.Series.sum", "polars.Series.tail", "polars.Series.tan", "polars.Series.tanh", "polars.Series.to_arrow", "polars.Series.to_dummies", "polars.Series.to_frame", "polars.Series.to_init_repr", "polars.Series.to_jax", "polars.Series.to_list", "polars.Series.to_numpy", "polars.Series.to_pandas", "polars.Series.to_physical", "polars.Series.to_torch", "polars.Series.top_k", "polars.Series.unique", "polars.Series.unique_counts", "polars.Series.upper_bound", "polars.Series.value_counts", "polars.Series.var", "polars.Series.zip_with", "Array", "Attributes", "Binary", "Boolean", "Categories", "Computation", "Descriptive", "Export", "Series", "List", "Miscellaneous", "Manipulation/selection", "Operators", "Plot", "String", "Struct", "Temporal", "polars.SQLContext.execute", "polars.SQLContext.execute_global", "polars.SQLContext.register", "polars.SQLContext.register_globals", "polars.SQLContext.register_many", "polars.SQLContext.tables", "polars.SQLContext.unregister", "SQL Clauses", "Aggregate", "Array", "Temporal", "Conditional", "SQL Functions", "Math", "String", "Temporal", "Trigonometry", "Types", "SQL Interface", "Python API", "Set Operations", "Table Operations", "Testing"], "titleterms": {"BY": [1321, 1334], "IF": 1325, "__array__": [175, 924], "__arrow_c_stream__": [176, 925], "__dataframe__": 177, "__getitem__": [178, 926], "__iter__": 297, "ab": [327, 927, 1327], "aco": 1330, "acosd": 1330, "add": 328, "add_business_dai": [413, 1013], "agg": [298, 892], "agg_group": 329, "aggreg": [174, 326, 816, 923, 1322], "alia": [330, 928], "alias": [1322, 1327, 1328], "align_fram": 50, "all": [299, 331, 347, 507, 719, 893, 929, 944, 1114, 1334], "all_horizont": 720, "and_": 332, "ani": [333, 348, 508, 721, 930, 945, 1115], "any_horizont": 722, "api": [1, 51, 52, 53, 54, 814, 1333], "append": [334, 931], "approx_n_uniqu": [179, 335, 723, 817, 932], "arang": 724, "arcco": [336, 933], "arccosh": [337, 934], "arcsin": [338, 935], "arcsinh": [339, 936], "arctan": [340, 937], "arctan2": 725, "arctan2d": 726, "arctanh": [341, 938], "arg_max": [342, 349, 509, 939, 946, 1116], "arg_min": [343, 350, 510, 940, 947, 1117], "arg_sort": [344, 941], "arg_sort_bi": 727, "arg_tru": [345, 942], "arg_uniqu": [346, 943], "arg_wher": 728, "arr": [347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967], "arrai": [59, 794, 1297, 1323], "array_agg": 1323, "array_contain": 1323, "array_get": 1323, "array_length": 1323, "array_low": 1323, "array_mean": 1323, "array_revers": 1323, "array_sum": 1323, "array_to_str": 1323, "array_uniqu": 1323, "array_upp": 1323, "asin": 1330, "asind": 1330, "assert": 1336, "assert_frame_equ": 157, "assert_frame_not_equ": 158, "assert_series_equ": 159, "assert_series_not_equ": 160, "atan": 1330, "atan2": 1330, "atan2d": 1330, "atand": 1330, "attribut": [314, 911, 1298], "avail": 1, "avg": 1322, "avro": 815, "backward_fil": 371, "base_utc_offset": [414, 1014], "batched_read": 130, "batchedcsvread": 130, "bin": [372, 373, 374, 375, 376, 377, 968, 969, 970, 971, 972, 973], "binari": [60, 795, 808, 1299], "bit_and": 1324, "bit_count": 1324, "bit_length": 1328, "bit_or": 1324, "bit_xor": 1324, "bitwise_and": [378, 974], "bitwise_count_on": [379, 975], "bitwise_count_zero": [380, 976], "bitwise_leading_on": [381, 977], "bitwise_leading_zero": [382, 978], "bitwise_or": [383, 979], "bitwise_trailing_on": [384, 980], "bitwise_trailing_zero": [385, 981], "bitwise_xor": [386, 982], "boolean": [61, 796, 1300], "bottom_k": [180, 387, 818, 983], "bottom_k_bi": 388, "build_info": 55, "business_day_count": 729, "cach": 819, "cancel": 908, "cast": [181, 389, 820, 984, 1331], "cast_time_unit": [415, 1015], "cat": [390, 391, 392, 985, 986, 987, 988, 989, 990], "categor": 62, "categori": [797, 1301], "categoricalremappingwarn": 91, "cbrt": [393, 991, 1327], "ceil": [394, 992, 1327], "centuri": [416, 1016], "chronoformatwarn": 92, "chunk_length": 993, "claus": 1321, "clear": [182, 821, 994], "clip": [395, 995], "clipboard": 815, "clone": [183, 822, 996], "cloud": 815, "co": [396, 997, 1330], "coalesc": [730, 1325], "col": 798, "collect": 823, "collect_al": 56, "collect_all_async": 57, "collect_async": 824, "collect_schema": [184, 825], "column": [161, 162, 185, 799, 826], "columnnotfounderror": 93, "combin": [417, 1017], "comparison": [808, 1309], "comput": [315, 800, 1302], "computeerror": 94, "concat": [58, 511, 650, 1118, 1222, 1328], "concat_arr": 731, "concat_list": 732, "concat_str": 733, "concat_w": 1328, "condit": 1325, "config": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 173], "conjunct": 808, "contain": [351, 372, 512, 651, 948, 968, 1119, 1223], "contains_ani": [652, 1224], "context": 173, "convers": 813, "convert_time_zon": [418, 1018], "corr": [186, 734], "cosd": 1330, "cosh": [397, 998], "cot": [398, 999, 1330], "cotd": 1330, "count": [187, 300, 399, 735, 827, 894, 1000, 1322], "count_match": [352, 513, 653, 949, 1120, 1225], "cov": 736, "creat": 1335, "create_list_strategi": 163, "credenti": 815, "credentialprovid": 31, "credentialprovideraw": 32, "credentialprovidergcp": 33, "csv": [130, 815], "cum_count": [400, 737, 1001], "cum_fold": 738, "cum_max": [401, 1002], "cum_min": [402, 1003], "cum_prod": [403, 1004], "cum_reduc": 739, "cum_sum": [404, 740, 1005], "cum_sum_horizont": 741, "cumulative_ev": [405, 1006], "customufuncwarn": 95, "cut": [406, 1007], "dai": [421, 1021], "data": 324, "databas": 815, "datafram": [34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 164, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 319], "dataorientationwarn": 96, "dataset": 815, "datatyp": [59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 324], "date": [64, 419, 742, 1019, 1328], "date_part": 1329, "date_rang": [743, 744], "datetim": [65, 420, 745, 1020], "datetime_rang": [746, 747], "decim": 66, "decod": [373, 654, 969, 1226], "decor": 173, "degre": [407, 1330], "delta": 815, "describ": [188, 828, 1008], "descript": [316, 912, 1303], "deseri": [189, 408, 829], "diff": [409, 514, 1009, 1121], "disable_string_cach": 88, "distinct": 1321, "div": 1327, "document": 1333, "dot": [410, 1010], "drop": [190, 830, 1335], "drop_in_plac": 191, "drop_nan": [192, 411, 831, 1011], "drop_nul": [193, 412, 515, 832, 1012, 1122], "dst_offset": [422, 1022], "dt": [413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "dtype": [165, 194, 833, 1061], "duplicateerror": 97, "durat": [67, 748], "element": 749, "enable_string_cach": 89, "encod": [374, 655, 970, 1227], "ends_with": [375, 656, 971, 1228, 1328], "engine_config": 891, "entropi": [457, 1062], "enum": 68, "epoch": [423, 1023], "eq": [458, 557, 1063], "eq_miss": [459, 1064], "equal": [195, 1065], "error": 325, "escape_regex": [90, 657, 1229], "estimated_s": [196, 1066], "eval": [516, 1123], "ewm_mean": [460, 1067], "ewm_mean_bi": [461, 1068], "ewm_std": [462, 1069], "ewm_var": [463, 1070], "exampl": [1, 922, 1336], "excel": 815, "except": [91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 325, 1334], "exclud": [464, 750], "execut": 1314, "execute_glob": 1315, "exp": [465, 1071, 1327], "explain": [834, 1335], "explod": [197, 353, 466, 517, 658, 835, 950, 1072, 1124, 1230], "export": [317, 1304], "expr": [327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718], "express": [802, 1333], "extend": [1, 198, 1073], "extend_const": [467, 1074], "extract": [659, 1231, 1329], "extract_al": [660, 1232], "extract_group": [661, 1233], "extract_mani": [662, 1234], "feather": 815, "fetch": 909, "fetch_block": 910, "field": [698, 1270, 1271], "fill_nan": [199, 468, 836, 1075], "fill_nul": [200, 469, 837, 1076], "filter": [201, 470, 838, 1077], "find": [663, 1235], "find_mani": [664, 1236], "first": [301, 354, 471, 518, 751, 839, 895, 951, 1078, 1125, 1322], "flag": [202, 1079], "flatten": 472, "float32": 69, "float64": 70, "floor": [473, 1080, 1327], "floordiv": 474, "fold": [203, 752], "format": 753, "forward_fil": 475, "frame": 1333, "from": 1321, "from_arrow": 121, "from_datafram": 122, "from_dict": [123, 124], "from_epoch": 754, "from_json": 476, "from_numpi": 125, "from_panda": 126, "from_record": 127, "from_repr": 128, "function": [1, 801, 813, 922, 1326], "gather": [477, 519, 1081, 1126], "gather_everi": [204, 478, 520, 840, 1082, 1127], "ge": [479, 1083], "get": [355, 480, 521, 952, 1128], "get_categori": [390, 985], "get_chunk": 1084, "get_column": [205, 207], "get_column_index": 206, "get_index_typ": 129, "glimps": 208, "global": 1333, "gpuengin": [891, 913], "greatest": 1325, "group": [755, 1321], "group_bi": [209, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 841, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907], "group_by_dynam": [210, 842], "groupbi": [297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 318, 914], "gt": [481, 1085], "has_multiple_output": 558, "has_nul": [482, 1086], "has_valid": 1087, "hash": [483, 1088], "hash_row": 211, "have": 1321, "head": [212, 302, 484, 522, 665, 756, 843, 896, 1089, 1129, 1237], "height": 213, "helper": 1336, "hist": [485, 1090], "hour": [424, 1024], "hstack": 214, "iceberg": 815, "ifnul": 1325, "implod": [486, 757, 1091], "import": 922, "in_process": [908, 909, 910], "index": 0, "initcap": 1328, "inprocessqueri": [908, 909, 910, 915], "input": 815, "insert_column": 215, "inspect": [487, 844], "instanc": 173, "int128": 71, "int16": 72, "int32": 73, "int64": 74, "int8": 75, "int_rang": [758, 759], "interfac": 1332, "interpol": [216, 488, 845, 1092], "interpolate_bi": [489, 1093], "intersect": 1334, "introduct": 1333, "invalidoperationerror": 98, "io": 130, "ipc": 815, "is_between": [490, 1094], "is_column": 559, "is_column_select": 560, "is_dupl": [217, 491, 1095], "is_empti": [218, 1096], "is_finit": [492, 1097], "is_first_distinct": [493, 1098], "is_in": [494, 1099], "is_infinit": [495, 1100], "is_last_distinct": [496, 1101], "is_leap_year": [425, 1025], "is_liter": 561, "is_loc": 986, "is_nan": [497, 1102], "is_not_nan": [498, 1103], "is_not_nul": [499, 1104], "is_nul": [500, 1105], "is_regex_project": 562, "is_sort": 1106, "is_uniqu": [219, 501, 1107], "iso_year": [426, 1026], "item": [220, 1108], "iter_column": 221, "iter_row": 222, "iter_slic": 223, "join": [224, 356, 523, 666, 846, 953, 1130, 1238, 1321], "join_asof": [225, 847], "join_wher": [226, 848], "json": 815, "json_decod": [667, 1239], "json_encod": [699, 1272], "json_norm": 131, "json_path_match": [668, 1240], "keep": 577, "kurtosi": [502, 1109], "lake": 815, "last": [303, 357, 503, 524, 760, 849, 897, 954, 1110, 1131, 1322], "lazi": [227, 850], "lazyfram": [45, 46, 47, 48, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 916], "lazygroupbi": [892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907], "le": [504, 1111], "least": 1325, "left": 1328, "len": [304, 505, 525, 761, 898, 1112, 1132], "len_byt": [391, 669, 987, 1241], "len_char": [392, 670, 988, 1242], "length": 1328, "limit": [228, 506, 851, 1113, 1321], "list": [76, 166, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 803, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1306], "lit": 762, "ln": 1327, "load": [2, 173], "load_from_fil": 3, "load_profil": 167, "log": [547, 1154, 1327], "log10": [548, 1155, 1327], "log1p": [549, 1156, 1327], "log2": 1327, "lower": 1328, "lower_bound": [550, 1157], "lt": [551, 1158], "ltrim": 1328, "manag": 173, "manipul": [321, 806, 918, 1308], "map": 578, "map_batch": [552, 763, 852], "map_el": [553, 1159], "map_field": 579, "map_group": [305, 764, 899], "map_row": 229, "mapwithoutreturndtypewarn": 99, "math": 1327, "max": [230, 306, 358, 526, 554, 765, 853, 900, 955, 1027, 1133, 1160, 1322], "max_horizont": [231, 766], "mean": [232, 307, 527, 555, 767, 854, 901, 1028, 1134, 1161], "mean_horizont": [233, 768], "median": [234, 308, 359, 528, 556, 769, 855, 902, 956, 1029, 1135, 1162, 1322], "melt": [235, 856], "merge_sort": [236, 857], "meta": [557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 804], "metadata": 919, "method": 1333, "microsecond": [427, 1030], "millennium": [428, 1031], "millisecond": [429, 1032], "min": [237, 309, 360, 529, 572, 770, 858, 903, 957, 1033, 1136, 1163, 1322], "min_horizont": [238, 771], "minut": [430, 1034], "miscellan": [320, 805, 813, 917, 1307], "mod": [573, 1327], "mode": [574, 1164], "moduleupgraderequirederror": 100, "month": [431, 1035], "month_end": [432, 1036], "month_start": [433, 1037], "mul": 575, "multipl": 173, "n_chunk": [239, 1165], "n_uniqu": [240, 310, 361, 530, 576, 772, 904, 958, 1137, 1166], "name": [577, 578, 579, 580, 581, 582, 583, 584, 585, 799, 807, 1167, 1334], "nan_max": [586, 1168], "nan_min": [587, 1169], "nanosecond": [434, 1038], "ne": [563, 588, 1170], "ne_miss": [589, 1171], "neg": 590, "nest": 324, "new": 1, "new_from_index": 1172, "next_batch": 130, "nodataerror": 101, "norowsreturnederror": 102, "not_": [591, 1173], "nth": 773, "null": 77, "null_count": [241, 592, 859, 1174], "nullif": 1325, "numer": [324, 808, 1309], "object": 78, "octet_length": 1328, "od": 815, "offset": 1321, "offset_bi": [435, 1039], "ones": 774, "oper": [808, 922, 1309, 1334, 1335], "option": 173, "or_": 593, "order": 1321, "ordinal_dai": [436, 1040], "other": 324, "outofboundserror": 103, "output": 815, "output_nam": 564, "over": 594, "pad_end": [671, 1243], "pad_start": [672, 1244], "panic": 325, "panicexcept": 104, "parallel": 813, "parametercollisionerror": 105, "parametr": [161, 162, 163, 164, 165, 166, 167, 168, 169, 1336], "parquet": 815, "partition_bi": 242, "pct_chang": [595, 1175], "peak_max": [596, 1176], "peak_min": [597, 1177], "performancewarn": 106, "pi": 1327, "pipe": [243, 598, 860], "pivot": 244, "plot": [322, 1310], "plugin": 920, "polar": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 798, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1336], "polarserror": 107, "polarsinefficientmapwarn": 108, "polarswarn": 109, "pop": 565, "pow": [599, 1178, 1327], "prefix": 580, "prefix_field": 581, "product": [245, 600, 1179], "profil": [861, 1336], "provid": 1, "pyarrow": 815, "python": [814, 1333], "qcut": [601, 1180], "quantil": [246, 311, 602, 775, 862, 905, 1181], "quantile_cont": 1322, "quantile_disc": 1322, "quarter": [437, 1041], "queri": 1333, "radian": [603, 1330], "random": 813, "rank": [604, 1182], "read_avro": 132, "read_clipboard": 133, "read_csv": 134, "read_csv_batch": 135, "read_databas": 136, "read_database_uri": 137, "read_delta": 138, "read_excel": 139, "read_ipc": 140, "read_ipc_schema": 141, "read_ipc_stream": 142, "read_json": 143, "read_ndjson": 144, "read_od": 145, "read_parquet": 146, "read_parquet_schema": 147, "rechunk": [247, 605, 1183], "reduc": 776, "refer": 814, "regexp_lik": 1328, "regist": 1316, "register_dataframe_namespac": 51, "register_expr_namespac": 52, "register_glob": 1317, "register_lazyframe_namespac": 53, "register_mani": 1318, "register_series_namespac": 54, "registr": 1, "reinterpret": [606, 1184], "renam": [248, 863, 1185], "rename_field": [700, 1273], "repeat": 777, "repeat_bi": 607, "replac": [608, 673, 1186, 1245, 1328], "replace_al": [674, 1246], "replace_column": 249, "replace_mani": [675, 1247], "replace_strict": [609, 1187], "replace_time_zon": [438, 1042], "reshap": [610, 1188], "restore_default": 4, "revers": [250, 362, 531, 611, 676, 864, 959, 1138, 1189, 1248, 1328], "right": 1328, "rle": [612, 1190], "rle_id": [613, 1191], "roll": [251, 614, 865], "rolling_corr": 778, "rolling_cov": 779, "rolling_map": [615, 1192], "rolling_max": [616, 1193], "rolling_max_bi": 617, "rolling_mean": [618, 1194], "rolling_mean_bi": 619, "rolling_median": [620, 1195], "rolling_median_bi": 621, "rolling_min": [622, 1196], "rolling_min_bi": 623, "rolling_quantil": [624, 1197], "rolling_quantile_bi": 625, "rolling_skew": [626, 1198], "rolling_std": [627, 1199], "rolling_std_bi": 628, "rolling_sum": [629, 1200], "rolling_sum_bi": 630, "rolling_var": [631, 1201], "rolling_var_bi": 632, "root_nam": 566, "round": [439, 633, 1043, 1202, 1327], "round_sig_fig": [634, 1203], "row": [252, 253], "rows_by_kei": 254, "rowserror": 110, "rtrim": 1328, "sampl": [255, 532, 635, 1139, 1204], "save": [5, 173], "save_to_fil": 6, "scan_csv": 148, "scan_delta": 149, "scan_iceberg": 150, "scan_ipc": 151, "scan_ndjson": 152, "scan_parquet": 153, "scan_pyarrow_dataset": 154, "scatter": 1205, "schema": [256, 866, 921, 1274], "schemaerror": 113, "schemafieldnotfounderror": 114, "search_sort": [636, 1206], "second": [440, 1044], "select": [257, 321, 780, 806, 867, 918, 1308, 1321], "select_seq": [258, 868], "selector": 922, "seri": [168, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1305], "serial": [259, 320, 567, 869, 917], "set": [922, 1207, 1334], "set_ascii_t": 7, "set_auto_structifi": 8, "set_decimal_separ": 9, "set_differ": [533, 1140], "set_float_precis": 10, "set_fmt_float": 11, "set_fmt_str_length": 12, "set_fmt_table_cell_list_len": 13, "set_intersect": [534, 1141], "set_profil": 169, "set_random_se": 155, "set_sort": [260, 637, 870, 1208], "set_streaming_chunk_s": 14, "set_symmetric_differ": [535, 1142], "set_tbl_cell_align": 15, "set_tbl_cell_numeric_align": 16, "set_tbl_col": 17, "set_tbl_column_data_type_inlin": 18, "set_tbl_dataframe_shape_below": 19, "set_tbl_format": 20, "set_tbl_hide_column_data_typ": 21, "set_tbl_hide_column_nam": 22, "set_tbl_hide_dataframe_shap": 23, "set_tbl_hide_dtype_separ": 24, "set_tbl_row": 25, "set_tbl_width_char": 26, "set_thousands_separ": 27, "set_trim_decimal_zero": 28, "set_union": [536, 1143], "set_verbos": 29, "shape": [261, 1209], "shapeerror": 115, "shift": [262, 363, 537, 638, 871, 960, 1144, 1210], "show": 1335, "show_graph": [568, 872], "show_vers": 156, "shrink_dtyp": [639, 1211], "shrink_to_fit": [263, 1212], "shuffl": [640, 1213], "sign": [641, 1214, 1327], "sin": [642, 1215, 1330], "sind": 1330, "sinh": [643, 1216], "sink_csv": 45, "sink_ipc": 46, "sink_ndjson": 47, "sink_parquet": 48, "size": [376, 972], "skew": [644, 1217], "slice": [264, 538, 645, 677, 873, 1145, 1218, 1249], "sort": [265, 364, 539, 646, 874, 961, 1146, 1219], "sort_bi": 647, "split": [678, 1250], "split_exact": [679, 1251], "splitn": [680, 1252], "sql": [266, 781, 875, 1321, 1326, 1332, 1333], "sql_expr": 782, "sqlcontext": [1314, 1315, 1316, 1317, 1318, 1319, 1320, 1333], "sqlinterfaceerror": 111, "sqlsyntaxerror": 112, "sqrt": [648, 1220, 1327], "starts_with": [377, 681, 973, 1253, 1328], "state": [30, 173], "std": [267, 365, 540, 649, 783, 876, 962, 1147, 1221], "stddev": 1322, "str": [650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269], "strategi": 1336, "strftime": [441, 1045, 1329], "string": [79, 324, 809, 1311, 1328], "stringcach": [49, 813], "stringcachemismatcherror": 116, "strip_char": [682, 1254], "strip_chars_end": [683, 1255], "strip_chars_start": [684, 1256], "strip_prefix": [685, 1257], "strip_suffix": [686, 1258], "strpo": 1328, "strptime": [687, 1259, 1328], "struct": [80, 698, 699, 700, 701, 702, 784, 810, 1270, 1271, 1272, 1273, 1274, 1275, 1312], "structfieldnotfounderror": 117, "style": 323, "sub": 703, "substr": 1328, "suffix": 582, "suffix_field": 583, "sum": [268, 312, 366, 541, 704, 785, 877, 906, 963, 1148, 1276, 1322], "sum_horizont": [269, 786], "tabl": [1319, 1335], "tail": [270, 313, 542, 688, 705, 787, 878, 907, 1149, 1260, 1277], "tan": [706, 1278, 1330], "tand": 1330, "tanh": [707, 1279], "tempor": [324, 811, 1313, 1324, 1329], "test": [157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 1336], "thread_pool_s": 170, "threadpool_s": 171, "time": [81, 442, 788, 1046], "time_rang": [789, 790], "timestamp": [443, 1047, 1328], "to_arrai": [543, 1150], "to_arrow": [271, 1280], "to_dat": [689, 1261], "to_datetim": [690, 1262], "to_decim": [691, 1263], "to_dict": [272, 273], "to_dummi": [274, 1281], "to_fram": 1282, "to_init_repr": [275, 1283], "to_integ": [692, 1264], "to_jax": [276, 1284], "to_list": [367, 964, 1285], "to_loc": 989, "to_lowercas": [584, 693, 1265], "to_numpi": [277, 1286], "to_panda": [278, 1287], "to_phys": [708, 1288], "to_seri": 279, "to_str": [444, 1048], "to_struct": [280, 368, 544, 965, 1151], "to_tim": [694, 1266], "to_titlecas": [695, 1267], "to_torch": [281, 1289], "to_uppercas": [585, 696, 1268], "toomanyrowsreturnederror": 118, "top_k": [282, 709, 879, 1290], "top_k_bi": 710, "total_dai": [445, 1049], "total_hour": [446, 1050], "total_microsecond": [447, 1051], "total_millisecond": [448, 1052], "total_minut": [449, 1053], "total_nanosecond": [450, 1054], "total_second": [451, 1055], "transpos": 283, "tree_format": 569, "trigonometri": 1330, "truediv": 711, "truncat": [452, 1056, 1335], "try_cast": 1331, "type": [324, 1331], "uint16": 82, "uint32": 83, "uint64": 84, "uint8": 85, "undo_alias": 570, "union": 1334, "uniqu": [284, 369, 545, 712, 880, 966, 1152, 1291], "unique_count": [713, 1292], "unknown": 86, "unnest": [285, 701, 881, 1275, 1323, 1335], "unpivot": [286, 882], "unregist": 1320, "unstablewarn": 119, "unstack": 287, "unsuitablesqlerror": 120, "updat": [288, 883], "upper": 1328, "upper_bound": [714, 1293], "upsampl": 289, "us": 173, "uses_lexical_ord": 990, "using_string_cach": 172, "utf8": 87, "value_count": [715, 1294], "var": [290, 370, 546, 716, 791, 884, 967, 1153, 1295], "varianc": 1322, "vstack": 291, "warn": 325, "week": [453, 1057], "weekdai": [454, 1058], "when": 792, "where": [717, 1321], "width": [292, 885], "window": 812, "with_column": [293, 886], "with_columns_seq": [294, 887], "with_context": 888, "with_field": 702, "with_row_count": [295, 889], "with_row_index": [296, 890], "with_time_unit": [455, 1059], "write_avro": 34, "write_clipboard": 35, "write_csv": 36, "write_databas": 37, "write_delta": 38, "write_excel": 39, "write_ipc": 40, "write_ipc_stream": 41, "write_json": [42, 571], "write_ndjson": 43, "write_parquet": 44, "xor": 718, "year": [456, 1060], "zero": 793, "zfill": [697, 1269], "zip_with": 1296}})